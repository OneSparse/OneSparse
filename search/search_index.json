{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OneSparse Postgres OneSparse is a Postgres extension that bind the powerful SuiteSparse:GraphBLAS Linear Algebra library, exposing it's functionality and new types, functions and operators in Postgres. TLDR; Docker Demo Start the onesparse demo docker container, substitute suitable password and container name: docker run -d -e POSTGRES_PASSWORD=password -it --name onesparse-demo-container onesparse/onesparse:0.1.0 The container will start detached in the background, verify it's running with 'docker ps'. Now exec a psql process to interact with the container: $ docker exec -u postgres -it onesparse-demo-container psql psql (17.0 (Debian 17.0-1.pgdg120+1)) Type \"help\" for help. postgres=# select 'i4'::matrix; matrix -------- i4[] (1 row) postgres=# See the doctests for some examples for creating matrices and vectors. You can verify the doctests with docker using: $ docker exec -u postgres -it onesparse-demo-container make installcheck Summary OneSparse Postgres extends the PostgreSQL object relational database with the state-of-the-art SuiteSparse:GraphBLAS high performance dense/sparse linear algebra library. SuiteSparse contains thousands of algorithms optimizing tasks for algebraic graph traversal, machine learning, AI, science, and engineering. SuiteSparse's powerful built-in JIT compiler can target multiple hardware architectures, including GPUs, with no changes to your code. Join us in the OneSparse Discussions Board and say hi!.","title":"Welcome to OneSparse Postgres"},{"location":"#welcome-to-onesparse-postgres","text":"OneSparse is a Postgres extension that bind the powerful SuiteSparse:GraphBLAS Linear Algebra library, exposing it's functionality and new types, functions and operators in Postgres.","title":"Welcome to OneSparse Postgres"},{"location":"#tldr-docker-demo","text":"Start the onesparse demo docker container, substitute suitable password and container name: docker run -d -e POSTGRES_PASSWORD=password -it --name onesparse-demo-container onesparse/onesparse:0.1.0 The container will start detached in the background, verify it's running with 'docker ps'. Now exec a psql process to interact with the container: $ docker exec -u postgres -it onesparse-demo-container psql psql (17.0 (Debian 17.0-1.pgdg120+1)) Type \"help\" for help. postgres=# select 'i4'::matrix; matrix -------- i4[] (1 row) postgres=# See the doctests for some examples for creating matrices and vectors. You can verify the doctests with docker using: $ docker exec -u postgres -it onesparse-demo-container make installcheck","title":"TLDR; Docker Demo"},{"location":"#summary","text":"OneSparse Postgres extends the PostgreSQL object relational database with the state-of-the-art SuiteSparse:GraphBLAS high performance dense/sparse linear algebra library. SuiteSparse contains thousands of algorithms optimizing tasks for algebraic graph traversal, machine learning, AI, science, and engineering. SuiteSparse's powerful built-in JIT compiler can target multiple hardware architectures, including GPUs, with no changes to your code. Join us in the OneSparse Discussions Board and say hi!.","title":"Summary"},{"location":"test_matrix_header/","text":"Matrix This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres. Some setup to make sure the extension is installed. set client_min_messages = 'WARNING'; -- pragma:hide create extension if not exists onesparse; \\pset linestyle unicode \\pset border 2 The matrix data type wraps a SuiteSparse GrB_Matrix handle and delegates functions from SQL to the library through instances of this type. An empty matrix can be constructed many ways, but one of the simplest is casting a type code to the matrix type. In this case int32 means the SuiteSparse type GrB_INT32 . select 'int32'::matrix; Another way to create an empty matrix is to use the matrix() constructor function: select matrix('int32'); The above matrices are \"unbounced\", they do not have a fixed number of rows and/or columns. The default possible number of rows and columns is defined by the SuiteSparse library to be GrB_INDEX_MAX which is 2^60 power indexes. For the purposes of this documentation this will be referred to as INDEX_MAX and matrices and vector dimensions that are INDEX_MAX in size are reffered to as \"unbounded\". For matrices with known dimensions, the dimensions can be provided in parentesis after the type code. Here a 4 row by 4 column matrix is created: select 'int32(4:4)'::matrix; Another way to make a new matrix is with the matrix constructor function. select matrix('int32', 4, 4); Either dimension can be ommited, this creates a 4 row by unbounded column matrix. select 'int32(4:)'::matrix; This creates a unbounded row by 4 column matrix. select 'int32(:4)'::matrix; Note that in all the above cases the matrices created are empty . They contain no stored elements. The memory needed to hold the matrix contains only stored elements, if there isn't a value stored at a given row or column position, no memory is consumed. This is the \"sparse\" in sparse matrix. This is how it's possible to create an unbounded row by unbounded column matrix without exhausting memory trying to allocate 2^120 entries. All graphblas operations are exposed by a series of functions and operators. Here we see three very common operations, returning the number of rows, the number of columns, and the number of store values. select nrows('int32'::matrix), ncols('int32'::matrix), nvals('int32'::matrix); Above you can see the matrix has unbounded rows and columns (the very large number is the number of possible entries). And the number of stored values is zero. These matrices are empty, they contain no elements. Values can be specified after the type(dimension) prefix as an array of elements between square brackets. Empty brackets imply no elements, so empty square brackets are the same as no square brackets as above: select nrows('int32[]'::matrix), ncols('int32[]'::matrix), nvals('int32[]'::matrix); Elements are specified between square brackets are coordinates of 'row_id:column_id:value' separated by spaces: select 'int32[1:2:1 2:3:2 3:1:3]'::matrix, 'int32(4:)[1:2:1 2:3:2 3:1:3]'::matrix, 'int32(:4)[1:2:1 2:3:2 3:3:1]'::matrix; Seeing matrices in this format is pretty hard to understand, there are two helpful functions for visualizing matrices, the first is print which prints the matrix in Below you see the number of rows, columns and spaces for a variety of combinations: select print('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as matrix; Above you can see the sparse matrix format of an 8x8 matrix. It's only possible to print matrices that have fixed dimensions of a reasonable size. Another useful function is dot() This turns a matrix into the Graphviz DOT language that is used to draw graph diagrams: select dot('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as dot; Will generate the following diagram: select dot('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as dot_source \\gset \\i sql/dot.sql Adjacency Matrices Onesparse sparse matrices are very similar to matrix objects from other libraries like scipy.sparse and NVIDIA's cuSparse . The primary difference with the the GraphBLAS there also comes an entire library of pre-optimized algebraic kernels. A useful function to illustrate this concept is random_matrix() . This will generate a random matrix provided the type, number of rows, number of columns, and the number of (approximate) values and an optional random seed for deterministic generation: select print(random_matrix(8, 8, 16, seed=>0.42, max=>42)) as random_matrix; This random matrix is also a random graph : select dot(random_matrix(8, 8, 16, seed=>0.42, max=>42)) as dot_source \\gset \\i sql/dot.sql Every Matrix is a Graph In fact every matrix is a graph, whether you think of it that way or not. And every graph has a corresponding matrix. The data that you put into tables can also describe a graph, and thus a matrix. These three different ways of thinking about tables, graphs, and matrices is one of the core concepts of OneSparse: One way of thinking about a \"dense\" matrix is a fully connected graph, these can be constructed with the dense_matrix() function: select print(dense_matrix('int32', 4, 4, 42)); select dot(dense_matrix('int32', 4, 4, 42)) as dot_source \\gset \\i sql/dot.sql Test Fixtures Let's get a test fixture table with a couple matrix and vector columns so that we can do some operations without tediously repeating the literal syntax. These matrices and vectors are construction with random_matrix() show above, and the random_vector() function: \\o /dev/null \\set ECHO none \\i sql/fixtures.sql \\set ECHO all \\o select print(a) as a, print(b) as b, print(u) as u, print(v) as v from test_fixture; Element-wise operations The GraphBLAS API has elementwise operations on matrices that operate pairs of matrices. eadd computes the element-wise \u201caddition\u201d of two matrices A and B, element-wise using any binary operator. Elements present on both sides of the operation are included in the result. select print(a) as a, binaryop, print(b) as b, print(eadd(A, B, binaryop)) as eadd from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(eadd(A, B, binaryop)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql emult multiplies elements of two matrices, taking only the intersection of common elements in both matrices, if an element is missing from either the left or right side, it is ommited from the result: select print(a) as a, binaryop, print(b) as b, print(emult(A, B, binaryop)) as emult from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(emult(A, B, binaryop)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql eunion is like eadd but differs in how the binary op is applied. A pair of scalars, alpha and beta define the inputs to the operator when entries are present in one matrix but not the other. select print(a) as a, binaryop, print(b) as b, print(eunion(A, 3::scalar, B, 4::scalar, binaryop)) as eunion from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(eunion(A, 3::scalar, B, 4::scalar, binaryop)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql The entire matrix can be reduced to a scalar value: select print(a) as a, monoid, reduce_scalar(a, monoid) from test_fixture; The matrix can also be reduced to a column vector: select print(a) as a, monoid, print(reduce_vector(a, monoid)) as reduce_vector from test_fixture; To reduce a row vector, specify that the input should be transposed with the descriptor t0 : select print(a) as a, monoid, print(reduce_vector(a, monoid, descriptor=>'t0')) as transpose_reduce_vector from test_fixture; Matrix Multiplication (referred to here as A @ B) is the heart of linear algebra. All matrix multiplication happens over a semiring. For the most common form of matrix multiplication, the outer opperation is to multiply coresponding elements with the \"times\" operator and then reduce those products with the \"plus\" operator. This is called the plus_times semiring: select print(a) as a, semiring, print(b) as b, print(mxm(a, b)) as mxm from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(mxm(a, b)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql AxB can also be done with the @ operator, mimicking the Python syntax. The default semiring for numeric types is plus_times . select print(a) as a, '@' as \"@\", print(b) as b, print(a @ b) as mxm from test_fixture; Matrices can be multipled by vectors on the right taking the linear combination of the matrices columns using the vectors elements as coefficients: select print(a) as a, '@' as \"@\", semiring, print(u) as u, print(mxv(a, u)) as mxv from test_fixture; select dot(a) as binop_a_source, dot(u) as binop_b_source, dot(mxv(a, u)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql 'mxv' is also supported by the @ operator: select print(a) as a, '@' as \"@\", print(u) as u, print(a @ u) as mxv from test_fixture; Matrices can be multipled by vectors on the right taking the linear combination of the matrices rows using the vectors elements as coefficients: select print(v) as v, semiring, print(b) as b, print(vxm(v, b, semiring)) as vxm from test_fixture; select dot(v) as binop_a_source, dot(b) as binop_b_source, dot(vxm(v, b)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql 'vxm' is also supported by the @ operator: select print(v) as v, '@' as \"@\", print(b) as b, print(v @ b) as vxm from test_fixture; The selection method calls the GrB_select() API function. The name selection was chosen not to conflict with the SQL keyword select . Selection provides a conditional operator called an indexunaryop and a parameter for the operator to use to compare elements in the matrix. Below, all elements with values greater than 50 are returned: select print(a) as a, indexunaryop, print(selection(a, indexunaryop, 1)) as selected from test_fixture; select dot(a) as uop_a_source, dot(selection(a, indexunaryop, 1)) as uop_b_source from test_fixture \\gset \\i sql/uop.sql apply takes an operator of type unaryop and applies it to every element of the matrix. The 'ainv_int32' returned the additive inverse (the negative value for integers) of every element: select print(a) as a, unaryop, print(apply(a, unaryop)) as applied from test_fixture; Elements can be set individually with set_element , the modified input is returned: select print(set_element(a, 1, 1, 1)) as set_element from test_fixture; Scalar elements can be extracted individually with get_element select get_element(a, 3, 3) as get_element from test_fixture; The print function returns a descripton of the matrix from SuiteSparse. select info(a) from test_fixture; The print function takes an optional \"level\" argument that defaults to 1 which is a short summary. select info(a, 5) from test_fixture; The dup function duplicates a matrix returning a new matrix object with the same values: select dup(a) from test_fixture; The wait method is used to \"complete\" a matrix, which may have pending operations waiting to be performed when using the default SuiteSparse non-blocking mode. As a side effect, wait will sort the elements of the input: select wait('int32[2:2:2 3:3:3 1:1:1]'::matrix); The clear function clears the matrix of all elements and returns the same object, but empty. The dimensions do not change: select clear('int32[1:1:1 2:2:2 3:3:3]'::matrix); Extra tests This documentation also forms the basis for the onesparse tests, These tests run the documentation against a live server, all the above results are automatically generated. select nrows('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix); select nrows('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix); select nrows('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix); select nrows('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix);","title":"Matrix"},{"location":"test_matrix_header/#matrix","text":"This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres. Some setup to make sure the extension is installed. set client_min_messages = 'WARNING'; -- pragma:hide create extension if not exists onesparse; \\pset linestyle unicode \\pset border 2 The matrix data type wraps a SuiteSparse GrB_Matrix handle and delegates functions from SQL to the library through instances of this type. An empty matrix can be constructed many ways, but one of the simplest is casting a type code to the matrix type. In this case int32 means the SuiteSparse type GrB_INT32 . select 'int32'::matrix; Another way to create an empty matrix is to use the matrix() constructor function: select matrix('int32'); The above matrices are \"unbounced\", they do not have a fixed number of rows and/or columns. The default possible number of rows and columns is defined by the SuiteSparse library to be GrB_INDEX_MAX which is 2^60 power indexes. For the purposes of this documentation this will be referred to as INDEX_MAX and matrices and vector dimensions that are INDEX_MAX in size are reffered to as \"unbounded\". For matrices with known dimensions, the dimensions can be provided in parentesis after the type code. Here a 4 row by 4 column matrix is created: select 'int32(4:4)'::matrix; Another way to make a new matrix is with the matrix constructor function. select matrix('int32', 4, 4); Either dimension can be ommited, this creates a 4 row by unbounded column matrix. select 'int32(4:)'::matrix; This creates a unbounded row by 4 column matrix. select 'int32(:4)'::matrix; Note that in all the above cases the matrices created are empty . They contain no stored elements. The memory needed to hold the matrix contains only stored elements, if there isn't a value stored at a given row or column position, no memory is consumed. This is the \"sparse\" in sparse matrix. This is how it's possible to create an unbounded row by unbounded column matrix without exhausting memory trying to allocate 2^120 entries. All graphblas operations are exposed by a series of functions and operators. Here we see three very common operations, returning the number of rows, the number of columns, and the number of store values. select nrows('int32'::matrix), ncols('int32'::matrix), nvals('int32'::matrix); Above you can see the matrix has unbounded rows and columns (the very large number is the number of possible entries). And the number of stored values is zero. These matrices are empty, they contain no elements. Values can be specified after the type(dimension) prefix as an array of elements between square brackets. Empty brackets imply no elements, so empty square brackets are the same as no square brackets as above: select nrows('int32[]'::matrix), ncols('int32[]'::matrix), nvals('int32[]'::matrix); Elements are specified between square brackets are coordinates of 'row_id:column_id:value' separated by spaces: select 'int32[1:2:1 2:3:2 3:1:3]'::matrix, 'int32(4:)[1:2:1 2:3:2 3:1:3]'::matrix, 'int32(:4)[1:2:1 2:3:2 3:3:1]'::matrix; Seeing matrices in this format is pretty hard to understand, there are two helpful functions for visualizing matrices, the first is print which prints the matrix in Below you see the number of rows, columns and spaces for a variety of combinations: select print('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as matrix; Above you can see the sparse matrix format of an 8x8 matrix. It's only possible to print matrices that have fixed dimensions of a reasonable size. Another useful function is dot() This turns a matrix into the Graphviz DOT language that is used to draw graph diagrams: select dot('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as dot; Will generate the following diagram: select dot('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as dot_source \\gset \\i sql/dot.sql","title":"Matrix"},{"location":"test_matrix_header/#adjacency-matrices","text":"Onesparse sparse matrices are very similar to matrix objects from other libraries like scipy.sparse and NVIDIA's cuSparse . The primary difference with the the GraphBLAS there also comes an entire library of pre-optimized algebraic kernels. A useful function to illustrate this concept is random_matrix() . This will generate a random matrix provided the type, number of rows, number of columns, and the number of (approximate) values and an optional random seed for deterministic generation: select print(random_matrix(8, 8, 16, seed=>0.42, max=>42)) as random_matrix; This random matrix is also a random graph : select dot(random_matrix(8, 8, 16, seed=>0.42, max=>42)) as dot_source \\gset \\i sql/dot.sql","title":"Adjacency Matrices"},{"location":"test_matrix_header/#every-matrix-is-a-graph","text":"In fact every matrix is a graph, whether you think of it that way or not. And every graph has a corresponding matrix. The data that you put into tables can also describe a graph, and thus a matrix. These three different ways of thinking about tables, graphs, and matrices is one of the core concepts of OneSparse: One way of thinking about a \"dense\" matrix is a fully connected graph, these can be constructed with the dense_matrix() function: select print(dense_matrix('int32', 4, 4, 42)); select dot(dense_matrix('int32', 4, 4, 42)) as dot_source \\gset \\i sql/dot.sql","title":"Every Matrix is a Graph"},{"location":"test_matrix_header/#test-fixtures","text":"Let's get a test fixture table with a couple matrix and vector columns so that we can do some operations without tediously repeating the literal syntax. These matrices and vectors are construction with random_matrix() show above, and the random_vector() function: \\o /dev/null \\set ECHO none \\i sql/fixtures.sql \\set ECHO all \\o select print(a) as a, print(b) as b, print(u) as u, print(v) as v from test_fixture;","title":"Test Fixtures"},{"location":"test_matrix_header/#element-wise-operations","text":"The GraphBLAS API has elementwise operations on matrices that operate pairs of matrices. eadd computes the element-wise \u201caddition\u201d of two matrices A and B, element-wise using any binary operator. Elements present on both sides of the operation are included in the result. select print(a) as a, binaryop, print(b) as b, print(eadd(A, B, binaryop)) as eadd from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(eadd(A, B, binaryop)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql emult multiplies elements of two matrices, taking only the intersection of common elements in both matrices, if an element is missing from either the left or right side, it is ommited from the result: select print(a) as a, binaryop, print(b) as b, print(emult(A, B, binaryop)) as emult from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(emult(A, B, binaryop)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql eunion is like eadd but differs in how the binary op is applied. A pair of scalars, alpha and beta define the inputs to the operator when entries are present in one matrix but not the other. select print(a) as a, binaryop, print(b) as b, print(eunion(A, 3::scalar, B, 4::scalar, binaryop)) as eunion from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(eunion(A, 3::scalar, B, 4::scalar, binaryop)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql The entire matrix can be reduced to a scalar value: select print(a) as a, monoid, reduce_scalar(a, monoid) from test_fixture; The matrix can also be reduced to a column vector: select print(a) as a, monoid, print(reduce_vector(a, monoid)) as reduce_vector from test_fixture; To reduce a row vector, specify that the input should be transposed with the descriptor t0 : select print(a) as a, monoid, print(reduce_vector(a, monoid, descriptor=>'t0')) as transpose_reduce_vector from test_fixture; Matrix Multiplication (referred to here as A @ B) is the heart of linear algebra. All matrix multiplication happens over a semiring. For the most common form of matrix multiplication, the outer opperation is to multiply coresponding elements with the \"times\" operator and then reduce those products with the \"plus\" operator. This is called the plus_times semiring: select print(a) as a, semiring, print(b) as b, print(mxm(a, b)) as mxm from test_fixture; select dot(a) as binop_a_source, dot(b) as binop_b_source, dot(mxm(a, b)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql AxB can also be done with the @ operator, mimicking the Python syntax. The default semiring for numeric types is plus_times . select print(a) as a, '@' as \"@\", print(b) as b, print(a @ b) as mxm from test_fixture; Matrices can be multipled by vectors on the right taking the linear combination of the matrices columns using the vectors elements as coefficients: select print(a) as a, '@' as \"@\", semiring, print(u) as u, print(mxv(a, u)) as mxv from test_fixture; select dot(a) as binop_a_source, dot(u) as binop_b_source, dot(mxv(a, u)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql 'mxv' is also supported by the @ operator: select print(a) as a, '@' as \"@\", print(u) as u, print(a @ u) as mxv from test_fixture; Matrices can be multipled by vectors on the right taking the linear combination of the matrices rows using the vectors elements as coefficients: select print(v) as v, semiring, print(b) as b, print(vxm(v, b, semiring)) as vxm from test_fixture; select dot(v) as binop_a_source, dot(b) as binop_b_source, dot(vxm(v, b)) as binop_c_source from test_fixture \\gset \\i sql/binop.sql 'vxm' is also supported by the @ operator: select print(v) as v, '@' as \"@\", print(b) as b, print(v @ b) as vxm from test_fixture; The selection method calls the GrB_select() API function. The name selection was chosen not to conflict with the SQL keyword select . Selection provides a conditional operator called an indexunaryop and a parameter for the operator to use to compare elements in the matrix. Below, all elements with values greater than 50 are returned: select print(a) as a, indexunaryop, print(selection(a, indexunaryop, 1)) as selected from test_fixture; select dot(a) as uop_a_source, dot(selection(a, indexunaryop, 1)) as uop_b_source from test_fixture \\gset \\i sql/uop.sql apply takes an operator of type unaryop and applies it to every element of the matrix. The 'ainv_int32' returned the additive inverse (the negative value for integers) of every element: select print(a) as a, unaryop, print(apply(a, unaryop)) as applied from test_fixture; Elements can be set individually with set_element , the modified input is returned: select print(set_element(a, 1, 1, 1)) as set_element from test_fixture; Scalar elements can be extracted individually with get_element select get_element(a, 3, 3) as get_element from test_fixture; The print function returns a descripton of the matrix from SuiteSparse. select info(a) from test_fixture; The print function takes an optional \"level\" argument that defaults to 1 which is a short summary. select info(a, 5) from test_fixture; The dup function duplicates a matrix returning a new matrix object with the same values: select dup(a) from test_fixture; The wait method is used to \"complete\" a matrix, which may have pending operations waiting to be performed when using the default SuiteSparse non-blocking mode. As a side effect, wait will sort the elements of the input: select wait('int32[2:2:2 3:3:3 1:1:1]'::matrix); The clear function clears the matrix of all elements and returns the same object, but empty. The dimensions do not change: select clear('int32[1:1:1 2:2:2 3:3:3]'::matrix);","title":"Element-wise operations"},{"location":"test_matrix_header/#extra-tests","text":"This documentation also forms the basis for the onesparse tests, These tests run the documentation against a live server, all the above results are automatically generated. select nrows('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix); select nrows('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix); select nrows('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix); select nrows('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix); select ncols('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix); select nvals('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix);","title":"Extra tests"},{"location":"test_scalar_header/","text":"Scalar This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres. Some setup to make sure warnings are shown, and that the extension is installed. set client_min_messages = 'WARNING'; create extension if not exists onesparse; Describe the scalar type \\dT+ scalar print a scalar select print('int32:42'::scalar); print a scalar select print('int32:42'::scalar, 5); Duplicate a scalar select dup('int32:42'::scalar); Wait for a scalar to complete in non-blocking mode select wait('int32:42'::scalar); Clear a scalar, deleting its stored element. select clear('int32:42'::scalar);","title":"Scalar"},{"location":"test_scalar_header/#scalar","text":"This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres. Some setup to make sure warnings are shown, and that the extension is installed. set client_min_messages = 'WARNING'; create extension if not exists onesparse; Describe the scalar type \\dT+ scalar print a scalar select print('int32:42'::scalar); print a scalar select print('int32:42'::scalar, 5); Duplicate a scalar select dup('int32:42'::scalar); Wait for a scalar to complete in non-blocking mode select wait('int32:42'::scalar); Clear a scalar, deleting its stored element. select clear('int32:42'::scalar);","title":"Scalar"},{"location":"test_scalar_op_f4/","text":"Scalar float4 Operations Test various scalar math operations with native Postgres types select (1::float4)::scalar + -1::float4; select 1::float4 + (-1::float4)::scalar; select (1::float4)::scalar - 1::float4; select 1::float4 - (1::float4)::scalar; select (1::float4)::scalar * -1::float4; select 1::float4 * (-1::float4)::scalar; select (1::float4)::scalar / 1::float4; select 1::float4 / (1::float4)::scalar; Test construction of min, zero and max values: select '-1'::float4::scalar; select '0'::float4::scalar; select '1'::float4::scalar; Test setting a scalar value from max to 2 select set('1'::float4::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_float4((-1)::float4); select scalar_float4((0)::float4); select scalar_float4((1)::float4); select float4_scalar((-1)::float4::scalar); select float4_scalar((0)::float4::scalar); select float4_scalar((1)::float4::scalar); These casting functions cast the Postgres type float4 to the GraphBLAS scalar type GrB_INT32 . select cast(-1::float4 as scalar); select cast(0::float4 as scalar); select cast(1::float4 as scalar); These tests cast back from the scalar type GrB_INT32 to the Postgres type float4 select cast((-1::float4)::scalar as float4); select cast((0::float4)::scalar as float4); select cast((1::float4)::scalar as scalar);","title":"Scalar float4 Operations"},{"location":"test_scalar_op_f4/#scalar-float4-operations","text":"Test various scalar math operations with native Postgres types select (1::float4)::scalar + -1::float4; select 1::float4 + (-1::float4)::scalar; select (1::float4)::scalar - 1::float4; select 1::float4 - (1::float4)::scalar; select (1::float4)::scalar * -1::float4; select 1::float4 * (-1::float4)::scalar; select (1::float4)::scalar / 1::float4; select 1::float4 / (1::float4)::scalar; Test construction of min, zero and max values: select '-1'::float4::scalar; select '0'::float4::scalar; select '1'::float4::scalar; Test setting a scalar value from max to 2 select set('1'::float4::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_float4((-1)::float4); select scalar_float4((0)::float4); select scalar_float4((1)::float4); select float4_scalar((-1)::float4::scalar); select float4_scalar((0)::float4::scalar); select float4_scalar((1)::float4::scalar); These casting functions cast the Postgres type float4 to the GraphBLAS scalar type GrB_INT32 . select cast(-1::float4 as scalar); select cast(0::float4 as scalar); select cast(1::float4 as scalar); These tests cast back from the scalar type GrB_INT32 to the Postgres type float4 select cast((-1::float4)::scalar as float4); select cast((0::float4)::scalar as float4); select cast((1::float4)::scalar as scalar);","title":"Scalar float4 Operations"},{"location":"test_scalar_op_f8/","text":"Scalar float8 Operations Test various scalar math operations with native Postgres types select (1::float8)::scalar + -1::float8; select 1::float8 + (-1::float8)::scalar; select (1::float8)::scalar - 1::float8; select 1::float8 - (1::float8)::scalar; select (1::float8)::scalar * -1::float8; select 1::float8 * (-1::float8)::scalar; select (1::float8)::scalar / 1::float8; select 1::float8 / (1::float8)::scalar; Test construction of min, zero and max values: select '-1'::float8::scalar; select '0'::float8::scalar; select '1'::float8::scalar; Test setting a scalar value from max to 2 select set('1'::float8::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_float8((-1)::float8); select scalar_float8((0)::float8); select scalar_float8((1)::float8); select float8_scalar((-1)::float8::scalar); select float8_scalar((0)::float8::scalar); select float8_scalar((1)::float8::scalar); These casting functions cast the Postgres type float8 to the GraphBLAS scalar type GrB_INT64 . select cast(-1::float8 as scalar); select cast(0::float8 as scalar); select cast(1::float8 as scalar); These tests cast back from the scalar type GrB_INT64 to the Postgres type float8 select cast((-1::float8)::scalar as float8); select cast((0::float8)::scalar as float8); select cast((1::float8)::scalar as scalar);","title":"Scalar float8 Operations"},{"location":"test_scalar_op_f8/#scalar-float8-operations","text":"Test various scalar math operations with native Postgres types select (1::float8)::scalar + -1::float8; select 1::float8 + (-1::float8)::scalar; select (1::float8)::scalar - 1::float8; select 1::float8 - (1::float8)::scalar; select (1::float8)::scalar * -1::float8; select 1::float8 * (-1::float8)::scalar; select (1::float8)::scalar / 1::float8; select 1::float8 / (1::float8)::scalar; Test construction of min, zero and max values: select '-1'::float8::scalar; select '0'::float8::scalar; select '1'::float8::scalar; Test setting a scalar value from max to 2 select set('1'::float8::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_float8((-1)::float8); select scalar_float8((0)::float8); select scalar_float8((1)::float8); select float8_scalar((-1)::float8::scalar); select float8_scalar((0)::float8::scalar); select float8_scalar((1)::float8::scalar); These casting functions cast the Postgres type float8 to the GraphBLAS scalar type GrB_INT64 . select cast(-1::float8 as scalar); select cast(0::float8 as scalar); select cast(1::float8 as scalar); These tests cast back from the scalar type GrB_INT64 to the Postgres type float8 select cast((-1::float8)::scalar as float8); select cast((0::float8)::scalar as float8); select cast((1::float8)::scalar as scalar);","title":"Scalar float8 Operations"},{"location":"test_scalar_op_i2/","text":"Scalar smallint Operations Test various scalar math operations with native Postgres types select (1::smallint)::scalar + -1::smallint; select 1::smallint + (-1::smallint)::scalar; select (1::smallint)::scalar - 1::smallint; select 1::smallint - (1::smallint)::scalar; select (1::smallint)::scalar * -1::smallint; select 1::smallint * (-1::smallint)::scalar; select (1::smallint)::scalar / 1::smallint; select 1::smallint / (1::smallint)::scalar; Test construction of min, zero and max values: select '-1'::smallint::scalar; select '0'::smallint::scalar; select '1'::smallint::scalar; Test setting a scalar value from max to 2 select set('1'::smallint::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_smallint((-1)::smallint); select scalar_smallint((0)::smallint); select scalar_smallint((1)::smallint); select smallint_scalar((-1)::smallint::scalar); select smallint_scalar((0)::smallint::scalar); select smallint_scalar((1)::smallint::scalar); These casting functions cast the Postgres type smallint to the GraphBLAS scalar type GrB_INT16 . select cast(-1::smallint as scalar); select cast(0::smallint as scalar); select cast(1::smallint as scalar); These tests cast back from the scalar type GrB_INT16 to the Postgres type smallint select cast((-1::smallint)::scalar as smallint); select cast((0::smallint)::scalar as smallint); select cast((1::smallint)::scalar as scalar);","title":"Scalar smallint Operations"},{"location":"test_scalar_op_i2/#scalar-smallint-operations","text":"Test various scalar math operations with native Postgres types select (1::smallint)::scalar + -1::smallint; select 1::smallint + (-1::smallint)::scalar; select (1::smallint)::scalar - 1::smallint; select 1::smallint - (1::smallint)::scalar; select (1::smallint)::scalar * -1::smallint; select 1::smallint * (-1::smallint)::scalar; select (1::smallint)::scalar / 1::smallint; select 1::smallint / (1::smallint)::scalar; Test construction of min, zero and max values: select '-1'::smallint::scalar; select '0'::smallint::scalar; select '1'::smallint::scalar; Test setting a scalar value from max to 2 select set('1'::smallint::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_smallint((-1)::smallint); select scalar_smallint((0)::smallint); select scalar_smallint((1)::smallint); select smallint_scalar((-1)::smallint::scalar); select smallint_scalar((0)::smallint::scalar); select smallint_scalar((1)::smallint::scalar); These casting functions cast the Postgres type smallint to the GraphBLAS scalar type GrB_INT16 . select cast(-1::smallint as scalar); select cast(0::smallint as scalar); select cast(1::smallint as scalar); These tests cast back from the scalar type GrB_INT16 to the Postgres type smallint select cast((-1::smallint)::scalar as smallint); select cast((0::smallint)::scalar as smallint); select cast((1::smallint)::scalar as scalar);","title":"Scalar smallint Operations"},{"location":"test_scalar_op_i4/","text":"Scalar integer Operations Test various scalar math operations with native Postgres types select (1::integer)::scalar + -1::integer; select 1::integer + (-1::integer)::scalar; select (1::integer)::scalar - 1::integer; select 1::integer - (1::integer)::scalar; select (1::integer)::scalar * -1::integer; select 1::integer * (-1::integer)::scalar; select (1::integer)::scalar / 1::integer; select 1::integer / (1::integer)::scalar; Test construction of min, zero and max values: select '-1'::integer::scalar; select '0'::integer::scalar; select '1'::integer::scalar; Test setting a scalar value from max to 2 select set('1'::integer::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_integer((-1)::integer); select scalar_integer((0)::integer); select scalar_integer((1)::integer); select integer_scalar((-1)::integer::scalar); select integer_scalar((0)::integer::scalar); select integer_scalar((1)::integer::scalar); These casting functions cast the Postgres type integer to the GraphBLAS scalar type GrB_INT32 . select cast(-1::integer as scalar); select cast(0::integer as scalar); select cast(1::integer as scalar); These tests cast back from the scalar type GrB_INT32 to the Postgres type integer select cast((-1::integer)::scalar as integer); select cast((0::integer)::scalar as integer); select cast((1::integer)::scalar as scalar);","title":"Scalar integer Operations"},{"location":"test_scalar_op_i4/#scalar-integer-operations","text":"Test various scalar math operations with native Postgres types select (1::integer)::scalar + -1::integer; select 1::integer + (-1::integer)::scalar; select (1::integer)::scalar - 1::integer; select 1::integer - (1::integer)::scalar; select (1::integer)::scalar * -1::integer; select 1::integer * (-1::integer)::scalar; select (1::integer)::scalar / 1::integer; select 1::integer / (1::integer)::scalar; Test construction of min, zero and max values: select '-1'::integer::scalar; select '0'::integer::scalar; select '1'::integer::scalar; Test setting a scalar value from max to 2 select set('1'::integer::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_integer((-1)::integer); select scalar_integer((0)::integer); select scalar_integer((1)::integer); select integer_scalar((-1)::integer::scalar); select integer_scalar((0)::integer::scalar); select integer_scalar((1)::integer::scalar); These casting functions cast the Postgres type integer to the GraphBLAS scalar type GrB_INT32 . select cast(-1::integer as scalar); select cast(0::integer as scalar); select cast(1::integer as scalar); These tests cast back from the scalar type GrB_INT32 to the Postgres type integer select cast((-1::integer)::scalar as integer); select cast((0::integer)::scalar as integer); select cast((1::integer)::scalar as scalar);","title":"Scalar integer Operations"},{"location":"test_scalar_op_i8/","text":"Scalar bigint Operations Test various scalar math operations with native Postgres types select (1::bigint)::scalar + -1::bigint; select 1::bigint + (-1::bigint)::scalar; select (1::bigint)::scalar - 1::bigint; select 1::bigint - (1::bigint)::scalar; select (1::bigint)::scalar * -1::bigint; select 1::bigint * (-1::bigint)::scalar; select (1::bigint)::scalar / 1::bigint; select 1::bigint / (1::bigint)::scalar; Test construction of min, zero and max values: select '-1'::bigint::scalar; select '0'::bigint::scalar; select '1'::bigint::scalar; Test setting a scalar value from max to 2 select set('1'::bigint::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_bigint((-1)::bigint); select scalar_bigint((0)::bigint); select scalar_bigint((1)::bigint); select bigint_scalar((-1)::bigint::scalar); select bigint_scalar((0)::bigint::scalar); select bigint_scalar((1)::bigint::scalar); These casting functions cast the Postgres type bigint to the GraphBLAS scalar type GrB_INT64 . select cast(-1::bigint as scalar); select cast(0::bigint as scalar); select cast(1::bigint as scalar); These tests cast back from the scalar type GrB_INT64 to the Postgres type bigint select cast((-1::bigint)::scalar as bigint); select cast((0::bigint)::scalar as bigint); select cast((1::bigint)::scalar as scalar);","title":"Scalar bigint Operations"},{"location":"test_scalar_op_i8/#scalar-bigint-operations","text":"Test various scalar math operations with native Postgres types select (1::bigint)::scalar + -1::bigint; select 1::bigint + (-1::bigint)::scalar; select (1::bigint)::scalar - 1::bigint; select 1::bigint - (1::bigint)::scalar; select (1::bigint)::scalar * -1::bigint; select 1::bigint * (-1::bigint)::scalar; select (1::bigint)::scalar / 1::bigint; select 1::bigint / (1::bigint)::scalar; Test construction of min, zero and max values: select '-1'::bigint::scalar; select '0'::bigint::scalar; select '1'::bigint::scalar; Test setting a scalar value from max to 2 select set('1'::bigint::scalar, 2); Test various casting functions used by the CREATE CAST machinery: select scalar_bigint((-1)::bigint); select scalar_bigint((0)::bigint); select scalar_bigint((1)::bigint); select bigint_scalar((-1)::bigint::scalar); select bigint_scalar((0)::bigint::scalar); select bigint_scalar((1)::bigint::scalar); These casting functions cast the Postgres type bigint to the GraphBLAS scalar type GrB_INT64 . select cast(-1::bigint as scalar); select cast(0::bigint as scalar); select cast(1::bigint as scalar); These tests cast back from the scalar type GrB_INT64 to the Postgres type bigint select cast((-1::bigint)::scalar as bigint); select cast((0::bigint)::scalar as bigint); select cast((1::bigint)::scalar as scalar);","title":"Scalar bigint Operations"},{"location":"test_vector_header/","text":"Vectors This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres. Some setup to make sure warnings are shown, and that the extension is installed. set client_min_messages = 'WARNING'; create extension if not exists onesparse; Describe the vector type: \\dT+ vector An empty vector can be constructed many ways, but one of the simplest is casting a type code to the matrix type. In this case int32 means GrB_INT32. The type codes are intentionally compressed to be as short as possible for smaller pg_dumps. Much of these functions are basically vector versions of the same functions for matrix. See those docs for details: select 'int32'::vector; select nvals('int32'::vector); select size('int32'::vector); select 'int32[]'::vector; select nvals('int32[]'::vector); select size('int32[]'::vector); select 'int32(10)'::vector; select nvals('int32(10)'::vector); select size('int32(10)'::vector); select 'int32(10)[]'::vector; select nvals('int32(10)[]'::vector); select size('int32(10)[]'::vector); select 'int32[0:1 1:2 2:3]'::vector; select nvals('int32[0:1 1:2 2:3]'::vector); select 'int32(10)[0:1 1:2 2:3]'::vector; select size('int32(10)[0:1 1:2 2:3]'::vector); select size('int32(2)[0:1 1:2 2:3]'::vector); select ewise_add('int32[0:1 1:2 2:3]'::vector, 'int32[0:1 1:2 2:3]'::vector, 'plus_int32'); select ewise_mult('int32[0:1 1:2 2:3]'::vector, 'int32[0:1 1:2 2:3]'::vector, 'times_int32'); select ewise_union('int32[0:1 1:2 2:3]'::vector, 42, 'int32[0:1 1:2 2:3]'::vector, 84, 'plus_int32'); select reduce_scalar('int32[0:1 1:2 2:3]'::vector, 'plus_monoid_int32'); select selection('int32[0:1 1:2 2:3]'::vector, 'valuegt_int32', 1); select apply('int32[1:1 2:2 3:3]'::vector, 'ainv_int32'::unaryop); Elements can be set individually with set_element , the modified input is returned: select set_element('int32[1:1 2:2 3:3]'::vector, 4, 4); Scalar elements can be extracted individually with get_element select get_element('int32[1:1 2:2 3:3]'::vector, 3); select print('int32[1:1 2:2 3:3]'::vector); select print('int32[1:1 2:2 3:3]'::vector, 5); select wait('int32[0:1 1:2 2:3]'::vector); select dup('int32[0:1 1:2 2:3]'::vector); select clear('int32[0:1 1:2 2:3]'::vector);","title":"Vectors"},{"location":"test_vector_header/#vectors","text":"This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres. Some setup to make sure warnings are shown, and that the extension is installed. set client_min_messages = 'WARNING'; create extension if not exists onesparse; Describe the vector type: \\dT+ vector An empty vector can be constructed many ways, but one of the simplest is casting a type code to the matrix type. In this case int32 means GrB_INT32. The type codes are intentionally compressed to be as short as possible for smaller pg_dumps. Much of these functions are basically vector versions of the same functions for matrix. See those docs for details: select 'int32'::vector; select nvals('int32'::vector); select size('int32'::vector); select 'int32[]'::vector; select nvals('int32[]'::vector); select size('int32[]'::vector); select 'int32(10)'::vector; select nvals('int32(10)'::vector); select size('int32(10)'::vector); select 'int32(10)[]'::vector; select nvals('int32(10)[]'::vector); select size('int32(10)[]'::vector); select 'int32[0:1 1:2 2:3]'::vector; select nvals('int32[0:1 1:2 2:3]'::vector); select 'int32(10)[0:1 1:2 2:3]'::vector; select size('int32(10)[0:1 1:2 2:3]'::vector); select size('int32(2)[0:1 1:2 2:3]'::vector); select ewise_add('int32[0:1 1:2 2:3]'::vector, 'int32[0:1 1:2 2:3]'::vector, 'plus_int32'); select ewise_mult('int32[0:1 1:2 2:3]'::vector, 'int32[0:1 1:2 2:3]'::vector, 'times_int32'); select ewise_union('int32[0:1 1:2 2:3]'::vector, 42, 'int32[0:1 1:2 2:3]'::vector, 84, 'plus_int32'); select reduce_scalar('int32[0:1 1:2 2:3]'::vector, 'plus_monoid_int32'); select selection('int32[0:1 1:2 2:3]'::vector, 'valuegt_int32', 1); select apply('int32[1:1 2:2 3:3]'::vector, 'ainv_int32'::unaryop); Elements can be set individually with set_element , the modified input is returned: select set_element('int32[1:1 2:2 3:3]'::vector, 4, 4); Scalar elements can be extracted individually with get_element select get_element('int32[1:1 2:2 3:3]'::vector, 3); select print('int32[1:1 2:2 3:3]'::vector); select print('int32[1:1 2:2 3:3]'::vector, 5); select wait('int32[0:1 1:2 2:3]'::vector); select dup('int32[0:1 1:2 2:3]'::vector); select clear('int32[0:1 1:2 2:3]'::vector);","title":"Vectors"}]}