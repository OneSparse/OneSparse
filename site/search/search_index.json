{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OneSparse Postgres","text":"<p>OneSparse is a Postgres extension that bind the powerful SuiteSparse:GraphBLAS Linear Algebra library, exposing it's functionality and new types, functions and operators in Postgres.</p> <p>Join us in the OneSparse Discussions Board and say hi!.</p>"},{"location":"#tldr-docker-demo","title":"TLDR; Docker Demo","text":"<p>Start the onesparse demo docker container, substitute suitable password and container name:</p> <pre><code>docker run -d -e POSTGRES_PASSWORD=password -it --name onesparse-demo-container onesparse/onesparse:0.1.0\n</code></pre> <p>The container will start detached in the background, verify it's running with 'docker ps'.  Now exec a psql process to interact with the container:</p> <pre><code>$ docker exec -u postgres -it onesparse-demo-container psql\npsql (17.0 (Debian 17.0-1.pgdg120+1))\nType \"help\" for help.\n\npostgres=# select 'i4'::matrix;\n matrix \n--------\n i4[]\n(1 row)\n\npostgres=# \n</code></pre> <p>See the Documentation for some examples for creating matrices and vectors.  You can verify the doctests with docker using:</p> <pre><code>$ docker exec -u postgres -it onesparse-demo-container make installcheck\n</code></pre>"},{"location":"#summary","title":"Summary","text":"<p>OneSparse Postgres extends the PostgreSQL object relational database with the state-of-the-art SuiteSparse:GraphBLAS high performance dense/sparse linear algebra library.  SuiteSparse contains thousands of algorithms optimizing tasks for algebraic graph traversal, machine learning, AI, science, and engineering. SuiteSparse's powerful built-in JIT compiler can target multiple hardware architectures, including GPUs, with no changes to your code.</p> <p>Join us in the OneSparse Discussions Board and say hi!.</p> <p>Like the JSON/JSONB types did for unstructured data, OneSparse makes dense and sparse matrices and vectors fully native Postgres types. OneSparse supports optimized, parallel matrix multiplication and other operations like reduction, selection, assignment, extraction, elementwise union, and intersection.  These methods can be used for both traditional numeric algebraic computing, or sparse graph analytics over adjacency and incidence matrices.</p> <p>Like numpy and scipy did for Python, OneSparse transforms Postgres into a powerful framework for linear algebra and its infinite industry application: mathematics, engineering, economics, machine learning, bioinformatics and graph science. Matrix multiplication is as simple as 'A @ B', just as in Python.  Leverage SQL for it's power of filtering, viewing and aggregating, and use linear algebra for its power of abstract reasoning, numeric analytical power, and parallel graph analytics.</p> <p>GraphBLAS is a sparse linear algebra API optimized for processing dense and sparse matrices and in particular graphs encoded as sparse matrices and vectors.  In addition to common real/integer matrix algebra operations \"plus\" and \"times\", GraphBLAS supports many different \"semiring\" algebra operations, that can be used as basic building blocks to implement a wide variety of algebraic and graph solutions.</p> <p>OneSparse Postgres aims to unify the three algebraic paradigms of relational, procedural, and algebraic style approaches.  In the image below, all three visualization are presenting the same information: the tabular form shows rows a relational indicating edge relationships, the graphical form shows the procedural approach, and the sparse matrix form shows the algebraic approach.</p> <p>The diagram below shows the three paradigms of sparse graph computation, relational, procedural and algebraic.  Each approach contains the exact same information, each edge is represented as an element of a table, graph, or matrix.  With OneSparse, programmers can choose which approach best fits their needs, and move seamlessly between them:</p> <p></p> <p>The algebraic approach offers a powerful abstraction over the underlying compute architecture used to do the actual work.  Using SuiteSparse's powerful built-in JIT compiler, any hardware architecture can be targeted with no code changes to the algorithm. This cannot be said for the common procedural approach taken by most graph libraries and frameworks.</p> <p></p> <p>OneSparse's goal is to enable and encourage the multi-architecture future, where the right hardware is used for the right phase of any particularly complex algorithm or data pipeine. By abstracting away the specific and highly optimzation sensitive hardware details, problem solvers can focus on the problems, and allow hardware specialists to optimize for any given architecture:</p> <p></p>"},{"location":"#why-linear-algebra","title":"Why Linear Algebra?","text":"<p>OneSparse brings the power of Linear Algebra to Postgres. In languages like Python, similar roles are fulfilled with packages like numpy and scipy.  OneSparse goes beyond dense matrix multiplication and is highly optimized not only for dense and sparse matrices, but also optimizes for an unlimited number of powerful and and useful algebras by supporting JIT compilation of both built-in and user defined Semirings.</p> <p>Semirings can be thought of as an abstraction of the \"additive\" and \"multiplicative\" operations typically used in Matrix Multiplication. They are particularly useful when implementing graph algorithms across an adjacency matrix:</p> <p></p> <p>For example, to compute the shortest path between rows and columns of a sparse matrix, instead of multiplying elements they are added, and instead of adding to reduce to the final value, the minimum is taken. This form of Tropical Algebra is a very powerful mathematical technique used in solving optimization and other minimization and maximization problems.</p> <p>Another exotic form of Semiring is the Log Semiring which is a powerful tool for traversing graphs whose edges represent probabilities by leveraging Log probability algebra for speed and better numeric stability.</p> <p>Other GraphBLAS Semirings are used to optimize algebraic operations to minimize data movement.  For example, the \"any_pair\" semiring is used instead of \"plus_times\" in many Breadth-First Search Algorithms to avoid any mathematical operations and unnecessary data movement Instead of adding results, \"any\" value is used, thus allowing the JIT compiler to optimize as it sees fit.  Instead of loading element values and multiplying them, the \"pair\" operator is used to simply proceed only if both edges in a multiplication are present, without ever loading or multiplying their values.</p> <p>OneSparse leverages the expertise in the field of sparse matrix programming by The GraphBLAS Forum and uses the SuiteSparse:GraphBLAS API implementation. SuiteSparse:GraphBLAS is brought to us by the work of Dr. Tim Davis, professor in the Department of Computer Science and Engineering at Texas A&amp;M University.  News and information can provide you with a lot more background information, in addition to the references below.</p>"},{"location":"#todo","title":"TODO","text":"<ul> <li> <p>Test harness matrix for all supported pg versions</p> </li> <li> <p>A few missing ops, concat/split</p> </li> <li> <p>Large Object support up to 4TB</p> </li> <li> <p>subscripting syntax support</p> </li> <li> <p>add type[] array casting to vectors and matrices</p> </li> <li> <p>add type[] operators for extract, containment, etc.</p> </li> <li> <p>add type[] constructors and tuple iterators</p> </li> <li> <p>lookup semirings with base name and object \"lookup('any_pair', A)\" for type specific semiring</p> </li> <li> <p>semiring functions? \"plus_times(A, B)\"</p> </li> <li> <p>Zero-copy into python-graphblas objects in plpythonu</p> </li> <li> <p>psycopg2 packed binary adapters to python-graphblas</p> </li> </ul>"},{"location":"test_binaryop_header/","title":"BinaryOp","text":"<p>BinaryOps apply a function to two elements and returning an element.</p> OneSparse Name SuiteSparse Name first_bool GrB_FIRST_BOOL second_bool GrB_SECOND_BOOL oneb_bool GrB_ONEB_BOOL pow_bool GxB_POW_BOOL first_int8 GrB_FIRST_INT8 second_int8 GrB_SECOND_INT8 oneb_int8 GrB_ONEB_INT8 pow_int8 GxB_POW_INT8 first_int16 GrB_FIRST_INT16 second_int16 GrB_SECOND_INT16 oneb_int16 GrB_ONEB_INT16 pow_int16 GxB_POW_INT16 first_int32 GrB_FIRST_INT32 second_int32 GrB_SECOND_INT32 oneb_int32 GrB_ONEB_INT32 pow_int32 GxB_POW_INT32 first_int64 GrB_FIRST_INT64 second_int64 GrB_SECOND_INT64 oneb_int64 GrB_ONEB_INT64 pow_int64 GxB_POW_INT64 first_uint8 GrB_FIRST_UINT8 second_uint8 GrB_SECOND_UINT8 oneb_uint8 GrB_ONEB_UINT8 pow_uint8 GxB_POW_UINT8 first_uint16 GrB_FIRST_UINT16 second_uint16 GrB_SECOND_UINT16 oneb_uint16 GrB_ONEB_UINT16 pow_uint16 GxB_POW_UINT16 first_uint32 GrB_FIRST_UINT32 second_uint32 GrB_SECOND_UINT32 oneb_uint32 GrB_ONEB_UINT32 pow_uint32 GxB_POW_UINT32 first_uint64 GrB_FIRST_UINT64 second_uint64 GrB_SECOND_UINT64 oneb_uint64 GrB_ONEB_UINT64 pow_uint64 GxB_POW_UINT64 first_fp32 GrB_FIRST_FP32 second_fp32 GrB_SECOND_FP32 oneb_fp32 GrB_ONEB_FP32 pow_fp32 GxB_POW_FP32 first_fp64 GrB_FIRST_FP64 second_fp64 GrB_SECOND_FP64 oneb_fp64 GrB_ONEB_FP64 pow_fp64 GxB_POW_FP64 first_fc32 GxB_FIRST_FC32 second_fc32 GxB_SECOND_FC32 oneb_fc32 GxB_ONEB_FC32 pow_fc32 GxB_POW_FC32 first_fc64 GxB_FIRST_FC64 second_fc64 GxB_SECOND_FC64 oneb_fc64 GxB_ONEB_FC64 pow_fc64 GxB_POW_FC64 plus_bool GrB_PLUS_BOOL minus_bool GrB_MINUS_BOOL times_bool GrB_TIMES_BOOL div_bool GrB_DIV_BOOL plus_int8 GrB_PLUS_INT8 minus_int8 GrB_MINUS_INT8 times_int8 GrB_TIMES_INT8 div_int8 GrB_DIV_INT8 plus_int16 GrB_PLUS_INT16 minus_int16 GrB_MINUS_INT16 times_int16 GrB_TIMES_INT16 div_int16 GrB_DIV_INT16 plus_int32 GrB_PLUS_INT32 minus_int32 GrB_MINUS_INT32 times_int32 GrB_TIMES_INT32 div_int32 GrB_DIV_INT32 plus_int64 GrB_PLUS_INT64 minus_int64 GrB_MINUS_INT64 times_int64 GrB_TIMES_INT64 div_int64 GrB_DIV_INT64 plus_uint8 GrB_PLUS_UINT8 minus_uint8 GrB_MINUS_UINT8 times_uint8 GrB_TIMES_UINT8 div_uint8 GrB_DIV_UINT8 plus_uint16 GrB_PLUS_UINT16 minus_uint16 GrB_MINUS_UINT16 times_uint16 GrB_TIMES_UINT16 div_uint16 GrB_DIV_UINT16 plus_uint32 GrB_PLUS_UINT32 minus_uint32 GrB_MINUS_UINT32 times_uint32 GrB_TIMES_UINT32 div_uint32 GrB_DIV_UINT32 plus_uint64 GrB_PLUS_UINT64 minus_uint64 GrB_MINUS_UINT64 times_uint64 GrB_TIMES_UINT64 div_uint64 GrB_DIV_UINT64 plus_fp32 GrB_PLUS_FP32 minus_fp32 GrB_MINUS_FP32 times_fp32 GrB_TIMES_FP32 div_fp32 GrB_DIV_FP32 plus_fp64 GrB_PLUS_FP64 minus_fp64 GrB_MINUS_FP64 times_fp64 GrB_TIMES_FP64 div_fp64 GrB_DIV_FP64 plus_fc32 GxB_PLUS_FC32 minus_fc32 GxB_MINUS_FC32 times_fc32 GxB_TIMES_FC32 div_fc32 GxB_DIV_FC32 plus_fc64 GxB_PLUS_FC64 minus_fc64 GxB_MINUS_FC64 times_fc64 GxB_TIMES_FC64 div_fc64 GxB_DIV_FC64 rminus_bool GxB_RMINUS_BOOL rdiv_bool GxB_RDIV_BOOL pair_bool GxB_PAIR_BOOL any_bool GxB_ANY_BOOL rminus_int8 GxB_RMINUS_INT8 rdiv_int8 GxB_RDIV_INT8 pair_int8 GxB_PAIR_INT8 any_int8 GxB_ANY_INT8 rminus_int16 GxB_RMINUS_INT16 rdiv_int16 GxB_RDIV_INT16 pair_int16 GxB_PAIR_INT16 any_int16 GxB_ANY_INT16 rminus_int32 GxB_RMINUS_INT32 rdiv_int32 GxB_RDIV_INT32 pair_int32 GxB_PAIR_INT32 any_int32 GxB_ANY_INT32 rminus_int64 GxB_RMINUS_INT64 rdiv_int64 GxB_RDIV_INT64 pair_int64 GxB_PAIR_INT64 any_int64 GxB_ANY_INT64 rminus_uint8 GxB_RMINUS_UINT8 rdiv_uint8 GxB_RDIV_UINT8 pair_uint8 GxB_PAIR_UINT8 any_uint8 GxB_ANY_UINT8 rminus_uint16 GxB_RMINUS_UINT16 rdiv_uint16 GxB_RDIV_UINT16 pair_uint16 GxB_PAIR_UINT16 any_uint16 GxB_ANY_UINT16 rminus_uint32 GxB_RMINUS_UINT32 rdiv_uint32 GxB_RDIV_UINT32 pair_uint32 GxB_PAIR_UINT32 any_uint32 GxB_ANY_UINT32 rminus_uint64 GxB_RMINUS_UINT64 rdiv_uint64 GxB_RDIV_UINT64 pair_uint64 GxB_PAIR_UINT64 any_uint64 GxB_ANY_UINT64 rminus_fp32 GxB_RMINUS_FP32 rdiv_fp32 GxB_RDIV_FP32 pair_fp32 GxB_PAIR_FP32 any_fp32 GxB_ANY_FP32 rminus_fp64 GxB_RMINUS_FP64 rdiv_fp64 GxB_RDIV_FP64 pair_fp64 GxB_PAIR_FP64 any_fp64 GxB_ANY_FP64 rminus_fc32 GxB_RMINUS_FC32 rdiv_fc32 GxB_RDIV_FC32 pair_fc32 GxB_PAIR_FC32 any_fc32 GxB_ANY_FC32 rminus_fc64 GxB_RMINUS_FC64 rdiv_fc64 GxB_RDIV_FC64 pair_fc64 GxB_PAIR_FC64 any_fc64 GxB_ANY_FC64 iseq_bool GxB_ISEQ_BOOL isne_bool GxB_ISNE_BOOL iseq_int8 GxB_ISEQ_INT8 isne_int8 GxB_ISNE_INT8 iseq_int16 GxB_ISEQ_INT16 isne_int16 GxB_ISNE_INT16 iseq_int32 GxB_ISEQ_INT32 isne_int32 GxB_ISNE_INT32 iseq_int64 GxB_ISEQ_INT64 isne_int64 GxB_ISNE_INT64 iseq_uint8 GxB_ISEQ_UINT8 isne_uint8 GxB_ISNE_UINT8 iseq_uint16 GxB_ISEQ_UINT16 isne_uint16 GxB_ISNE_UINT16 iseq_uint32 GxB_ISEQ_UINT32 isne_uint32 GxB_ISNE_UINT32 iseq_uint64 GxB_ISEQ_UINT64 isne_uint64 GxB_ISNE_UINT64 iseq_fp32 GxB_ISEQ_FP32 isne_fp32 GxB_ISNE_FP32 iseq_fp64 GxB_ISEQ_FP64 isne_fp64 GxB_ISNE_FP64 iseq_fc32 GxB_ISEQ_FC32 isne_fc32 GxB_ISNE_FC32 iseq_fc64 GxB_ISEQ_FC64 isne_fc64 GxB_ISNE_FC64 isgt_bool GxB_ISGT_BOOL islt_bool GxB_ISLT_BOOL isge_bool GxB_ISGE_BOOL isle_bool GxB_ISLE_BOOL isgt_int8 GxB_ISGT_INT8 islt_int8 GxB_ISLT_INT8 isge_int8 GxB_ISGE_INT8 isle_int8 GxB_ISLE_INT8 isgt_int16 GxB_ISGT_INT16 islt_int16 GxB_ISLT_INT16 isge_int16 GxB_ISGE_INT16 isle_int16 GxB_ISLE_INT16 isgt_int32 GxB_ISGT_INT32 islt_int32 GxB_ISLT_INT32 isge_int32 GxB_ISGE_INT32 isle_int32 GxB_ISLE_INT32 isgt_int64 GxB_ISGT_INT64 islt_int64 GxB_ISLT_INT64 isge_int64 GxB_ISGE_INT64 isle_int64 GxB_ISLE_INT64 isgt_uint8 GxB_ISGT_UINT8 islt_uint8 GxB_ISLT_UINT8 isge_uint8 GxB_ISGE_UINT8 isle_uint8 GxB_ISLE_UINT8 isgt_uint16 GxB_ISGT_UINT16 islt_uint16 GxB_ISLT_UINT16 isge_uint16 GxB_ISGE_UINT16 isle_uint16 GxB_ISLE_UINT16 isgt_uint32 GxB_ISGT_UINT32 islt_uint32 GxB_ISLT_UINT32 isge_uint32 GxB_ISGE_UINT32 isle_uint32 GxB_ISLE_UINT32 isgt_uint64 GxB_ISGT_UINT64 islt_uint64 GxB_ISLT_UINT64 isge_uint64 GxB_ISGE_UINT64 isle_uint64 GxB_ISLE_UINT64 isgt_fp32 GxB_ISGT_FP32 islt_fp32 GxB_ISLT_FP32 isge_fp32 GxB_ISGE_FP32 isle_fp32 GxB_ISLE_FP32 isgt_fp64 GxB_ISGT_FP64 islt_fp64 GxB_ISLT_FP64 isge_fp64 GxB_ISGE_FP64 isle_fp64 GxB_ISLE_FP64 min_bool GrB_MIN_BOOL max_bool GrB_MAX_BOOL min_int8 GrB_MIN_INT8 max_int8 GrB_MAX_INT8 min_int16 GrB_MIN_INT16 max_int16 GrB_MAX_INT16 min_int32 GrB_MIN_INT32 max_int32 GrB_MAX_INT32 min_int64 GrB_MIN_INT64 max_int64 GrB_MAX_INT64 min_uint8 GrB_MIN_UINT8 max_uint8 GrB_MAX_UINT8 min_uint16 GrB_MIN_UINT16 max_uint16 GrB_MAX_UINT16 min_uint32 GrB_MIN_UINT32 max_uint32 GrB_MAX_UINT32 min_uint64 GrB_MIN_UINT64 max_uint64 GrB_MAX_UINT64 min_fp32 GrB_MIN_FP32 max_fp32 GrB_MAX_FP32 min_fp64 GrB_MIN_FP64 max_fp64 GrB_MAX_FP64 lor_bool GxB_LOR_BOOL land_bool GxB_LAND_BOOL lxor_bool GxB_LXOR_BOOL lor_int8 GxB_LOR_INT8 land_int8 GxB_LAND_INT8 lxor_int8 GxB_LXOR_INT8 lor_int16 GxB_LOR_INT16 land_int16 GxB_LAND_INT16 lxor_int16 GxB_LXOR_INT16 lor_int32 GxB_LOR_INT32 land_int32 GxB_LAND_INT32 lxor_int32 GxB_LXOR_INT32 lor_int64 GxB_LOR_INT64 land_int64 GxB_LAND_INT64 lxor_int64 GxB_LXOR_INT64 lor_uint8 GxB_LOR_UINT8 land_uint8 GxB_LAND_UINT8 lxor_uint8 GxB_LXOR_UINT8 lor_uint16 GxB_LOR_UINT16 land_uint16 GxB_LAND_UINT16 lxor_uint16 GxB_LXOR_UINT16 lor_uint32 GxB_LOR_UINT32 land_uint32 GxB_LAND_UINT32 lxor_uint32 GxB_LXOR_UINT32 lor_uint64 GxB_LOR_UINT64 land_uint64 GxB_LAND_UINT64 lxor_uint64 GxB_LXOR_UINT64 lor_fp32 GxB_LOR_FP32 land_fp32 GxB_LAND_FP32 lxor_fp32 GxB_LXOR_FP32 lor_fp64 GxB_LOR_FP64 land_fp64 GxB_LAND_FP64 lxor_fp64 GxB_LXOR_FP64 lor GrB_LOR land GrB_LAND lxor GrB_LXOR lxnor GrB_LXNOR atan2_fp32 GxB_ATAN2_FP32 hypot_fp32 GxB_HYPOT_FP32 fmod_fp32 GxB_FMOD_FP32 remainder_fp32 GxB_REMAINDER_FP32 atan2_fp64 GxB_ATAN2_FP64 hypot_fp64 GxB_HYPOT_FP64 fmod_fp64 GxB_FMOD_FP64 remainder_fp64 GxB_REMAINDER_FP64 ldexp_fp32 GxB_LDEXP_FP32 copysign_fp32 GxB_COPYSIGN_FP32 ldexp_fp64 GxB_LDEXP_FP64 copysign_fp64 GxB_COPYSIGN_FP64 bor_int8 GrB_BOR_INT8 band_int8 GrB_BAND_INT8 bxor_int8 GrB_BXOR_INT8 bxnor_int8 GrB_BXNOR_INT8 bor_int16 GrB_BOR_INT16 band_int16 GrB_BAND_INT16 bxor_int16 GrB_BXOR_INT16 bxnor_int16 GrB_BXNOR_INT16 bor_int32 GrB_BOR_INT32 band_int32 GrB_BAND_INT32 bxor_int32 GrB_BXOR_INT32 bxnor_int32 GrB_BXNOR_INT32 bor_int64 GrB_BOR_INT64 band_int64 GrB_BAND_INT64 bxor_int64 GrB_BXOR_INT64 bxnor_int64 GrB_BXNOR_INT64 bor_uint8 GrB_BOR_UINT8 band_uint8 GrB_BAND_UINT8 bxor_uint8 GrB_BXOR_UINT8 bxnor_uint8 GrB_BXNOR_UINT8 bor_uint16 GrB_BOR_UINT16 band_uint16 GrB_BAND_UINT16 bxor_uint16 GrB_BXOR_UINT16 bxnor_uint16 GrB_BXNOR_UINT16 bor_uint32 GrB_BOR_UINT32 band_uint32 GrB_BAND_UINT32 bxor_uint32 GrB_BXOR_UINT32 bxnor_uint32 GrB_BXNOR_UINT32 bor_uint64 GrB_BOR_UINT64 band_uint64 GrB_BAND_UINT64 bxor_uint64 GrB_BXOR_UINT64 bxnor_uint64 GrB_BXNOR_UINT64 bget_int8 GxB_BGET_INT8 bset_int8 GxB_BSET_INT8 bclr_int8 GxB_BCLR_INT8 bget_int16 GxB_BGET_INT16 bset_int16 GxB_BSET_INT16 bclr_int16 GxB_BCLR_INT16 bget_int32 GxB_BGET_INT32 bset_int32 GxB_BSET_INT32 bclr_int32 GxB_BCLR_INT32 bget_int64 GxB_BGET_INT64 bset_int64 GxB_BSET_INT64 bclr_int64 GxB_BCLR_INT64 bget_uint8 GxB_BGET_UINT8 bset_uint8 GxB_BSET_UINT8 bclr_uint8 GxB_BCLR_UINT8 bget_uint16 GxB_BGET_UINT16 bset_uint16 GxB_BSET_UINT16 bclr_uint16 GxB_BCLR_UINT16 bget_uint32 GxB_BGET_UINT32 bset_uint32 GxB_BSET_UINT32 bclr_uint32 GxB_BCLR_UINT32 bget_uint64 GxB_BGET_UINT64 bset_uint64 GxB_BSET_UINT64 bclr_uint64 GxB_BCLR_UINT64 bshift_int8 GxB_BSHIFT_INT8 bshift_int16 GxB_BSHIFT_INT16 bshift_int32 GxB_BSHIFT_INT32 bshift_int64 GxB_BSHIFT_INT64 bshift_uint8 GxB_BSHIFT_UINT8 bshift_uint16 GxB_BSHIFT_UINT16 bshift_uint32 GxB_BSHIFT_UINT32 bshift_uint64 GxB_BSHIFT_UINT64 eq_bool GrB_EQ_BOOL ne_bool GrB_NE_BOOL gt_bool GrB_GT_BOOL lt_bool GrB_LT_BOOL eq_int8 GrB_EQ_INT8 ne_int8 GrB_NE_INT8 gt_int8 GrB_GT_INT8 lt_int8 GrB_LT_INT8 eq_int16 GrB_EQ_INT16 ne_int16 GrB_NE_INT16 gt_int16 GrB_GT_INT16 lt_int16 GrB_LT_INT16 eq_int32 GrB_EQ_INT32 ne_int32 GrB_NE_INT32 gt_int32 GrB_GT_INT32 lt_int32 GrB_LT_INT32 eq_int64 GrB_EQ_INT64 ne_int64 GrB_NE_INT64 gt_int64 GrB_GT_INT64 lt_int64 GrB_LT_INT64 eq_uint8 GrB_EQ_UINT8 ne_uint8 GrB_NE_UINT8 gt_uint8 GrB_GT_UINT8 lt_uint8 GrB_LT_UINT8 eq_uint16 GrB_EQ_UINT16 ne_uint16 GrB_NE_UINT16 gt_uint16 GrB_GT_UINT16 lt_uint16 GrB_LT_UINT16 eq_uint32 GrB_EQ_UINT32 ne_uint32 GrB_NE_UINT32 gt_uint32 GrB_GT_UINT32 lt_uint32 GrB_LT_UINT32 eq_uint64 GrB_EQ_UINT64 ne_uint64 GrB_NE_UINT64 gt_uint64 GrB_GT_UINT64 lt_uint64 GrB_LT_UINT64 eq_fp32 GrB_EQ_FP32 ne_fp32 GrB_NE_FP32 gt_fp32 GrB_GT_FP32 lt_fp32 GrB_LT_FP32 eq_fp64 GrB_EQ_FP64 ne_fp64 GrB_NE_FP64 gt_fp64 GrB_GT_FP64 lt_fp64 GrB_LT_FP64 eq_fc32 GxB_EQ_FC32 ne_fc32 GxB_NE_FC32 eq_fc64 GxB_EQ_FC64 ne_fc64 GxB_NE_FC64 ge_bool GrB_GE_BOOL le_bool GrB_LE_BOOL ge_int8 GrB_GE_INT8 le_int8 GrB_LE_INT8 ge_int16 GrB_GE_INT16 le_int16 GrB_LE_INT16 ge_int32 GrB_GE_INT32 le_int32 GrB_LE_INT32 ge_int64 GrB_GE_INT64 le_int64 GrB_LE_INT64 ge_uint8 GrB_GE_UINT8 le_uint8 GrB_LE_UINT8 ge_uint16 GrB_GE_UINT16 le_uint16 GrB_LE_UINT16 ge_uint32 GrB_GE_UINT32 le_uint32 GrB_LE_UINT32 ge_uint64 GrB_GE_UINT64 le_uint64 GrB_LE_UINT64 ge_fp32 GrB_GE_FP32 le_fp32 GrB_LE_FP32 ge_fp64 GrB_GE_FP64 le_fp64 GrB_LE_FP64 cmplx_fp32 GxB_CMPLX_FP32 cmplx_fp64 GxB_CMPLX_FP64 firsti_int32 GxB_FIRSTI_INT32 firsti_int64 GxB_FIRSTI_INT64 firsti1_int32 GxB_FIRSTI1_INT32 firsti1_int64 GxB_FIRSTI1_INT64 firstj_int32 GxB_FIRSTJ_INT32 firstj_int64 GxB_FIRSTJ_INT64 firstj1_int32 GxB_FIRSTJ1_INT32 firstj1_int64 GxB_FIRSTJ1_INT64 secondi_int32 GxB_SECONDI_INT32 secondi_int64 GxB_SECONDI_INT64 secondi1_int32 GxB_SECONDI1_INT32 secondi1_int64 GxB_SECONDI1_INT64 secondj_int32 GxB_SECONDJ_INT32 secondj_int64 GxB_SECONDJ_INT64 secondj1_int32 GxB_SECONDJ1_INT32 secondj1_int64 GxB_SECONDJ1_INT64 ignore_dup GxB_IGNORE_DUP"},{"location":"test_descriptor_header/","title":"Descriptor","text":"<p>Descriptors control specific details of GraphBLAS operations.</p> OneSparse Name SuiteSparse Name t1 GrB_DESC_T1 t0 GrB_DESC_T0 t0t1 GrB_DESC_T0T1 c GrB_DESC_C ct1 GrB_DESC_CT1 ct0 GrB_DESC_CT0 ct0t1 GrB_DESC_CT0T1 s GrB_DESC_S st1 GrB_DESC_ST1 st0 GrB_DESC_ST0 st0t1 GrB_DESC_ST0T1 sc GrB_DESC_SC sct1 GrB_DESC_SCT1 sct0 GrB_DESC_SCT0 sct0t1 GrB_DESC_SCT0T1 r GrB_DESC_R rt1 GrB_DESC_RT1 rt0 GrB_DESC_RT0 rt0t1 GrB_DESC_RT0T1 rc GrB_DESC_RC rct1 GrB_DESC_RCT1 rct0 GrB_DESC_RCT0 rct0t1 GrB_DESC_RCT0T1 rs GrB_DESC_RS rst1 GrB_DESC_RST1 rst0 GrB_DESC_RST0 rst0t1 GrB_DESC_RST0T1 rsc GrB_DESC_RSC rsct1 GrB_DESC_RSCT1 rsct0 GrB_DESC_RSCT0 rsct0t1 GrB_DESC_RSCT0T1"},{"location":"test_examples_header/","title":"Examples Coming Soon","text":"<p>OneSparse is a early alpha prototype, so these examples are likely to change as bugs are fixed and new approaches are tried: <pre><code>psql:demo/fixtures.sql:1: NOTICE:  extension \"onesparse\" already exists, skipping\npsql:demo/fixtures.sql:2: NOTICE:  table \"ostest\" does not exist, skipping\npsql:demo/fixtures.sql:21: NOTICE:  table \"karate\" does not exist, skipping\npsql:demo/fixtures.sql:29: NOTICE:  table \"mbeacxc\" does not exist, skipping\npsql:demo/fixtures.sql:41: NOTICE:  table \"bcsstk01\" does not exist, skipping\npsql:demo/fixtures.sql:49: ERROR:  extra data after last expected column\nCONTEXT:  COPY bcsstk01, line 1: \"0 0  2.83226851852e+06\"\npsql:demo/fixtures.sql:51: NOTICE:  table \"ash219\" does not exist, skipping\npsql:demo/fixtures.sql:62: NOTICE:  table \"fs_183_1\" does not exist, skipping\npsql:demo/fixtures.sql:79: NOTICE:  table \"test_graphs\" does not exist, skipping\n</code></pre> The examples below will use the <code>karate</code> graph the demo test fixtures:</p> %3 1 1 2 2 1--2 3 3 1--3 4 4 1--4 5 5 1--5 6 6 1--6 7 7 1--7 8 8 1--8 9 9 1--9 11 11 1--11 12 12 1--12 13 13 1--13 14 14 1--14 18 18 1--18 20 20 1--20 22 22 1--22 32 32 1--32 2--3 2--4 2--8 2--14 2--18 2--20 2--22 31 31 2--31 3--4 3--8 3--9 3--14 10 10 3--10 28 28 3--28 29 29 3--29 33 33 3--33 4--8 4--13 4--14 5--7 5--11 6--7 6--11 17 17 6--17 7--17 9--31 9--33 34 34 9--34 14--34 20--34 32--33 32--34 31--33 31--34 10--34 28--34 29--32 29--34 33--34 15 15 15--33 15--34 16 16 16--33 16--34 19 19 19--33 19--34 21 21 21--33 21--34 23 23 23--33 23--34 24 24 24--28 24--33 24--34 26 26 24--26 30 30 24--30 26--32 30--33 30--34 25 25 25--32 25--28 25--26 27 27 27--34 27--30"},{"location":"test_examples_header/#bfs","title":"BFS","text":"<p>Min Parent BFS returns \"node:min parent node\" vector: <pre><code>CREATE OR REPLACE FUNCTION bfs(graph matrix, start_node bigint)\n    RETURNS vector LANGUAGE plpgsql AS\n    $$\n    DECLARE\n    bfs_vector vector = vector('int32');\n    next_vector vector = vector('int32');\n    BEGIN\n        bfs_vector = set_element(bfs_vector, start_node, 1);\n        WHILE bfs_vector != next_vector LOOP\n            next_vector = dup(bfs_vector);\n            bfs_vector = vxm(bfs_vector, graph, 'any_secondi_int32',\n                             w=&gt;bfs_vector, accum=&gt;'min_int32');\n        END LOOP;\n    RETURN bfs_vector;\n    end;\n    $$;\n</code></pre></p> %3 1 1 2 1 1--2 3 1 1--3 4 1 1--4 5 1 1--5 6 1 1--6 7 1 1--7 9 1 1--9 14 1 1--14 20 1 1--20 32 1 1--32 8 8 1--8 11 11 1--11 12 12 1--12 13 13 1--13 18 18 1--18 22 22 1--22 2--3 2--4 2--14 2--20 31 9 2--31 2--8 2--18 2--22 3--4 3--9 10 3 3--10 3--14 28 3 3--28 29 32 3--29 33 32 3--33 3--8 4--14 4--8 4--13 5--7 5--11 6--7 6--11 17 17 6--17 7--17 9--31 9--33 34 34 9--34 10--34 14--34 15 34 15--33 15--34 16 34 16--33 16--34 19 34 19--33 19--34 20--34 21 34 21--33 21--34 23 34 23--33 23--34 24 34 26 32 24--26 24--28 30 34 24--30 24--33 24--34 25 32 25--26 25--28 25--32 26--32 27 34 27--30 27--34 28--34 29--32 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34"},{"location":"test_examples_header/#sssp","title":"SSSP","text":"<pre><code>CREATE OR REPLACE FUNCTION sssp(graph matrix, start_node bigint)\n    RETURNS vector LANGUAGE plpgsql AS\n    $$\n    DECLARE\n    sssp_vector vector = vector(type(graph));\n    next_vector vector = vector(type(graph));\n    BEGIN\n        sssp_vector = set_element(sssp_vector, start_node, 1);\n        WHILE sssp_vector != next_vector LOOP\n            next_vector = dup(sssp_vector);\n            sssp_vector = sssp_vector @&lt;+&lt; graph;\n        END LOOP;\n    RETURN sssp_vector;\n    end;\n    $$;\n</code></pre> %3 1 1 2 2 1--2 3 2 1--3 4 2 1--4 5 2 1--5 6 2 1--6 7 2 1--7 9 2 1--9 14 2 1--14 20 2 1--20 32 2 1--32 8 8 1--8 11 11 1--11 12 12 1--12 13 13 1--13 18 18 1--18 22 22 1--22 2--3 2--4 2--14 2--20 31 3 2--31 2--8 2--18 2--22 3--4 3--9 10 3 3--10 3--14 28 3 3--28 29 3 3--29 33 3 3--33 3--8 4--14 4--8 4--13 5--7 5--11 6--7 6--11 17 17 6--17 7--17 9--31 9--33 34 34 9--34 10--34 14--34 15 4 15--33 15--34 16 4 16--33 16--34 19 4 19--33 19--34 20--34 21 4 21--33 21--34 23 4 23--33 23--34 24 4 26 3 24--26 24--28 30 4 24--30 24--33 24--34 25 3 25--26 25--28 25--32 26--32 27 4 27--30 27--34 28--34 29--32 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34"},{"location":"test_examples_header/#triangle-centrality","title":"Triangle Centrality","text":"<p>https://arxiv.org/abs/2105.00110</p> <pre><code>CREATE OR REPLACE FUNCTION tc(a matrix)\n    RETURNS vector LANGUAGE plpgsql AS\n    $$\n    DECLARE\n    m matrix;\n    t matrix;\n    y vector;\n    k scalar;\n    BEGIN\n        m = tril(a, -1);\n        t = mxm(a, a, 'plus_pair_int32', mask=&gt;m, descr=&gt;'st1');\n        y = reduce_cols(t) |+ reduce_rows(t);\n        k = reduce_scalar(y);\n        RETURN 3 * ((a @ y) |- 2 * (one(t) @ y) |+ y) / k;\n    END;\n    $$;\n</code></pre> %3 1 1.888889 2 0.733333 1--2 3 0.511111 1--3 4 -0.400000 1--4 5 -0.244444 1--5 6 -0.200000 1--6 7 -0.422222 1--7 9 0.155556 1--9 14 -0.666667 1--14 20 -0.311111 1--20 32 1.022222 1--32 8 8 1--8 11 11 1--11 12 12 1--12 13 13 1--13 18 18 1--18 22 22 1--22 2--3 2--4 2--14 2--20 31 0.844444 2--31 2--8 2--18 2--22 3--4 3--9 10 0.577778 3--10 3--14 28 0.533333 3--28 29 0.666667 3--29 33 -0.155556 3--33 3--8 4--14 4--8 4--13 5--7 5--11 6--7 6--11 17 17 6--17 7--17 9--31 9--33 34 34 9--34 10--34 14--34 15 0.644444 15--33 15--34 16 0.644444 16--33 16--34 19 0.644444 19--33 19--34 20--34 21 0.644444 21--33 21--34 23 0.644444 23--33 23--34 24 0.844444 26 0.155556 24--26 24--28 30 0.600000 24--30 24--33 24--34 25 0.133333 25--26 25--28 25--32 26--32 27 0.444444 27--30 27--34 28--34 29--32 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34"},{"location":"test_examples_header/#page-rank-todo","title":"Page Rank TODO","text":""},{"location":"test_indexunaryop_header/","title":"IndexUnaryOp","text":"<p>IndexUnaryOps apply a function to a positional element, returning an element.</p> OneSparse Name SuiteSparse Name rowindex_int32 GrB_ROWINDEX_INT32 rowindex_int64 GrB_ROWINDEX_INT64 colindex_int32 GrB_COLINDEX_INT32 colindex_int64 GrB_COLINDEX_INT64 diagindex_int32 GrB_DIAGINDEX_INT32 diagindex_int64 GrB_DIAGINDEX_INT64 tril GrB_TRIL triu GrB_TRIU diag GrB_DIAG offdiag GrB_OFFDIAG colle GrB_COLLE colgt GrB_COLGT rowle GrB_ROWLE rowgt GrB_ROWGT valueeq_int8 GrB_VALUEEQ_INT8 valueeq_uint8 GrB_VALUEEQ_UINT8 valueeq_fp32 GrB_VALUEEQ_FP32 valueeq_bool GrB_VALUEEQ_BOOL valueeq_int16 GrB_VALUEEQ_INT16 valueeq_uint16 GrB_VALUEEQ_UINT16 valueeq_fp64 GrB_VALUEEQ_FP64 valueeq_int32 GrB_VALUEEQ_INT32 valueeq_uint32 GrB_VALUEEQ_UINT32 valueeq_fc32 GxB_VALUEEQ_FC32 valueeq_int64 GrB_VALUEEQ_INT64 valueeq_uint64 GrB_VALUEEQ_UINT64 valueeq_fc64 GxB_VALUEEQ_FC64 valuene_int8 GrB_VALUENE_INT8 valuene_uint8 GrB_VALUENE_UINT8 valuene_fp32 GrB_VALUENE_FP32 valuene_bool GrB_VALUENE_BOOL valuene_int16 GrB_VALUENE_INT16 valuene_uint16 GrB_VALUENE_UINT16 valuene_fp64 GrB_VALUENE_FP64 valuene_int32 GrB_VALUENE_INT32 valuene_uint32 GrB_VALUENE_UINT32 valuene_fc32 GxB_VALUENE_FC32 valuene_int64 GrB_VALUENE_INT64 valuene_uint64 GrB_VALUENE_UINT64 valuene_fc64 GxB_VALUENE_FC64 valuelt_int8 GrB_VALUELT_INT8 valuelt_uint8 GrB_VALUELT_UINT8 valuelt_fp32 GrB_VALUELT_FP32 valuelt_bool GrB_VALUELT_BOOL valuelt_int16 GrB_VALUELT_INT16 valuelt_uint16 GrB_VALUELT_UINT16 valuelt_fp64 GrB_VALUELT_FP64 valuelt_int32 GrB_VALUELT_INT32 valuelt_uint32 GrB_VALUELT_UINT32 valuelt_int64 GrB_VALUELT_INT64 valuelt_uint64 GrB_VALUELT_UINT64 valuele_int8 GrB_VALUELE_INT8 valuele_uint8 GrB_VALUELE_UINT8 valuele_fp32 GrB_VALUELE_FP32 valuele_bool GrB_VALUELE_BOOL valuele_int16 GrB_VALUELE_INT16 valuele_uint16 GrB_VALUELE_UINT16 valuele_fp64 GrB_VALUELE_FP64 valuele_int32 GrB_VALUELE_INT32 valuele_uint32 GrB_VALUELE_UINT32 valuele_int64 GrB_VALUELE_INT64 valuele_uint64 GrB_VALUELE_UINT64 valuegt_int8 GrB_VALUEGT_INT8 valuegt_uint8 GrB_VALUEGT_UINT8 valuegt_fp32 GrB_VALUEGT_FP32 valuegt_bool GrB_VALUEGT_BOOL valuegt_int16 GrB_VALUEGT_INT16 valuegt_uint16 GrB_VALUEGT_UINT16 valuegt_fp64 GrB_VALUEGT_FP64 valuegt_int32 GrB_VALUEGT_INT32 valuegt_uint32 GrB_VALUEGT_UINT32 valuegt_int64 GrB_VALUEGT_INT64 valuegt_uint64 GrB_VALUEGT_UINT64 valuege_int8 GrB_VALUEGE_INT8 valuege_uint8 GrB_VALUEGE_UINT8 valuege_fp32 GrB_VALUEGE_FP32 valuege_bool GrB_VALUEGE_BOOL valuege_int16 GrB_VALUEGE_INT16 valuege_uint16 GrB_VALUEGE_UINT16 valuege_fp64 GrB_VALUEGE_FP64 valuege_int32 GrB_VALUEGE_INT32 valuege_uint32 GrB_VALUEGE_UINT32 valuege_int64 GrB_VALUEGE_INT64 valuege_uint64 GrB_VALUEGE_UINT64"},{"location":"test_matrix_header/","title":"Matrix","text":"<p>This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres.</p> <p>Some setup to make sure the extension is installed. <pre><code>create extension if not exists onesparse;\n</code></pre> OneSparse wraps the SuiteSparse:GraphBLAS library and extends Postgres by adding new types and functions that allow you to do sparse and dense linear algebra in Postgres.  This is similar to functionality packages like <code>numpy</code> and <code>scipy.sparse</code> bring to Python.</p> <p>While a full grasp of the GraphBLAS API is not necessary to follow along with this guide there are many details that are not spelled out in great details here.  For complete details on the API and expected behaviors, see the SuiteSparse:GraphBLAS User Guide.</p> <p>The most fundamenteal object in OneSparse is a Matrix.  A Matrix is a two dimensional array of data with a certain number of rows m and columns n.  Typically matrices are very memory hungry data structures, requiring <code>m * n</code> memory to hold all of the elements.</p> <p>This limits traditional matrix libraries, because many problems in linear algebra are sparse.  Not every element is used in the problem or even definable.  Traditional linear algebra libraries usually encode sparse matrices into dense matrices by using the number zero to indicate \"nothing\", but this approach does not solve the memory problem.  For matrices with a large number of rows and columns this means vast areas of memories filled with zeros that end up being multiplied away, which also wastes time and energy.</p> <p>OneSparse matrices however are smart, and can adapt to the number of actually useful elements in a Matrix.  They can be dense or sparse, the SuiteSparse library will adapt to choose the right backend format.</p>"},{"location":"test_matrix_header/#matrices-and-graphs","title":"Matrices and Graphs","text":"<p>Every matrix is a graph, whether you think of it that way or not. And every graph has a corresponding matrix.  A lot of data that you put into postgres tables can also describe a graph, and thus a matrix.  These three different ways of thinking about tables, graphs, and matrices is one of the core concepts of OneSparse:</p> <p></p> <p>While SuiteSparse is optimized for processing sparse matrices and vectors, it also supports optimized kernels for dense objects.  A dense matrix is just a sparse matrix with all its elements.  In this case SuiteSparse will automatically store it in a dense optimal format and use CPUs or GPUs appropriately to process them.</p>"},{"location":"test_matrix_header/#getting-started","title":"Getting Started","text":"<p>The examples below are all what you would see typing the exact queries out in <code>psql</code>.  The GraphBLAS API is large, so onesparse is always contained in the <code>onesparse</code> postgres schema.  For the sake of brevity, let's set the <code>search_path</code> so that we can just type <code>matrix</code> instead of <code>onesparse.matrix</code> everywhere. <pre><code>SET search_path TO public,onesparse;\n</code></pre> If the matrix has bounds, it can be printed to the console if they are reasonable size, this is useful for debugging and experimentation:</p> <p><pre><code>select print('int32(4:4)'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       print        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502                \u2502\n\u2502  1\u2502                \u2502\n\u2502  2\u2502                \u2502\n\u2502  3\u2502                \u2502\n\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Note that this matrix is empty, it's not filled with \"zeros\", it contains no elements.  The memory needed to hold the matrix contains only stored elements, if there isn't a value stored at a given row or column position, no memory is consumed.  This is the \"sparse\" in sparse matrix.  This is how it's possible to create an unbounded row by unbounded column matrix without exhausting memory trying to allocate <code>2^120</code> entries.</p>"},{"location":"test_matrix_header/#drawing-matrices-and-vectors","title":"Drawing Matrices and Vectors","text":"<p>The <code>draw()</code> function turns a matrix into the Graphviz DOT language that is used to draw graph diagrams: <pre><code>select draw('int32(4:4)[1:2:1 2:3:2 3:1:3]'::matrix) as draw;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        draw        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 digraph {          \u2502\n\u2502 1 -&gt; 2 [label=\"1\"] \u2502\n\u2502 2 -&gt; 3 [label=\"2\"] \u2502\n\u2502 3 -&gt; 1 [label=\"3\"] \u2502\n\u2502 }                  \u2502\n\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Will generate the following diagram:</p> %3 1 1 2 2 1-&gt;2 1 3 3 2-&gt;3 2 3-&gt;1 3 <p>Let's look at our cast of test objects for the remaining examples. These objects from the <code>onesparse.test_fixture</code> table. <pre><code>select * from test_fixture;\n\u250c\u2500[ RECORD 1 ]\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 t            \u2502 int32                                                                                                       \u2502\n\u2502 a            \u2502 int32(4:4)[0:2:0 0:3:3 1:0:2 1:2:1 1:3:0 2:0:2 2:1:2 3:0:2 3:2:1]                                           \u2502\n\u2502 b            \u2502 int32(4:4)[0:3:4 1:2:3 1:3:1 2:1:2 2:3:4 3:1:0 3:2:2]                                                       \u2502\n\u2502 d            \u2502 int32(4:4)[0:0:1 0:1:1 0:2:1 0:3:1 1:0:1 1:1:1 1:2:1 1:3:1 2:0:1 2:1:1 2:2:1 2:3:1 3:0:1 3:1:1 3:2:1 3:3:1] \u2502\n\u2502 s            \u2502 int32(2:2)[0:0:1 0:1:1 1:1:1]                                                                               \u2502\n\u2502 u            \u2502 int32(4)[1:2]                                                                                               \u2502\n\u2502 v            \u2502 int32(4)[1:3 2:3]                                                                                           \u2502\n\u2502 unaryop      \u2502 ainv_int32                                                                                                  \u2502\n\u2502 indexunaryop \u2502 valuegt_int32                                                                                               \u2502\n\u2502 binaryop     \u2502 times_int32                                                                                                 \u2502\n\u2502 monoid       \u2502 plus_monoid_int32                                                                                           \u2502\n\u2502 semiring     \u2502 plus_times_int32                                                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Here are a couple of sparse matrices from the test_fixture table. We'll call them <code>a</code> and <code>b</code> in these docs:</p> <pre><code>select print(a) as a, print(b) as b from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502         b          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502  0\u2502           4    \u2502\n\u2502  1\u2502  2     1  0    \u2502  1\u2502        3  1    \u2502\n\u2502  2\u2502  2  2          \u2502  2\u2502     2     4    \u2502\n\u2502  3\u2502  2     1       \u2502  3\u2502     0  2       \u2502\n\u2502                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 %3 0 0 3 3 0-&gt;3 4 1 1 3-&gt;1 0 2 2 3-&gt;2 2 1-&gt;3 1 1-&gt;2 3 2-&gt;3 4 2-&gt;1 2 <p>Here are some sparse test vectors, they will be used for some of the examples below:</p> <pre><code>select print(u) as u, print(v) as v from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     u     \u2502     v     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502           \u2502\n\u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502       \u2502  0\u2502       \u2502\n\u2502  1\u2502  2    \u2502  1\u2502  3    \u2502\n\u2502  2\u2502       \u2502  2\u2502  3    \u2502\n\u2502  3\u2502       \u2502  3\u2502       \u2502\n\u2502           \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> vector cluster_vector node0 node1 1:2 node2 node3 vector cluster_vector node0 node1 1:3 node2 2:3 node3 <p>There is also an example \"dense\" matrix named 'd':</p> <p><pre><code>select print(d) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       print        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502  1  1  1  1    \u2502\n\u2502  1\u2502  1  1  1  1    \u2502\n\u2502  2\u2502  1  1  1  1    \u2502\n\u2502  3\u2502  1  1  1  1    \u2502\n\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> One way of thinking about a \"dense\" matrix is a fully connected graph, these can be constructed with the <code>dense_matrix()</code> function:</p> %3 0 0 0-&gt;0 1 1 1 0-&gt;1 1 2 2 0-&gt;2 1 3 3 0-&gt;3 1 1-&gt;0 1 1-&gt;1 1 1-&gt;2 1 1-&gt;3 1 2-&gt;0 1 2-&gt;1 1 2-&gt;2 1 2-&gt;3 1 3-&gt;0 1 3-&gt;1 1 3-&gt;2 1 3-&gt;3 1 <p>And another matrix named 's' which is a Sierpinsky Graph, which we'll show off a bit later.</p> <pre><code>select print(s) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    print     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502  1  1    \u2502\n\u2502  1\u2502     1    \u2502\n\u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre>"},{"location":"test_matrix_header/#random-matrices","title":"Random Matrices","text":"<p><code>random_matrix</code> will generate a random matrix provided the type, number of rows, number of columns, and the number of (approximate) values, an optional max value, and an optional random seed for deterministic generation: <pre><code>select print(random_matrix(8, 8, 16, seed=&gt;0.42, max=&gt;42)) as random_matrix;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         random_matrix          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3  4  5  6  7    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502              6 31          \u2502\n\u2502  1\u2502                   12       \u2502\n\u2502  2\u2502    26                      \u2502\n\u2502  3\u2502                40          \u2502\n\u2502  4\u2502    11    15           7    \u2502\n\u2502  5\u2502 20 12    22        1       \u2502\n\u2502  6\u2502              1             \u2502\n\u2502  7\u2502       17                   \u2502\n\u2502                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> This random matrix is also a random graph:</p> %3 0 0 4 4 0-&gt;4 6 5 5 0-&gt;5 31 1 1 4-&gt;1 11 3 3 4-&gt;3 15 7 7 4-&gt;7 7 5-&gt;0 20 5-&gt;1 12 6 6 5-&gt;6 1 5-&gt;3 22 1-&gt;6 12 6-&gt;4 1 2 2 2-&gt;1 26 3-&gt;5 40 7-&gt;2 17"},{"location":"test_matrix_header/#empty-matrices","title":"Empty Matrices","text":"<p>The <code>matrix</code> data type wraps a SuiteSparse GrB_Matrix handle and delegates functions from SQL to the library through instances of this type.</p> <p>An empty matrix can be constructed many ways, but one of the simplest is casting a type code to the matrix type.  In this case <code>int32</code> means the SuiteSparse type <code>GrB_INT32</code>. <pre><code>select 'int32'::matrix;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 matrix \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Another way to create an empty matrix is to use the <code>matrix()</code> constructor function: <pre><code>select matrix('int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 matrix \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#matrix-dimensions","title":"Matrix dimensions","text":"<p>The above matrices are \"unbounded\", they do not have a fixed number of rows and/or columns.  The default possible number of rows and columns is defined by the SuiteSparse library to be <code>GrB_INDEX_MAX</code> which is <code>2^60</code> power indexes.  For the purposes of this documentation this will be referred to as <code>INDEX_MAX</code> and matrices and vector dimensions that are <code>INDEX_MAX</code> in size are reffered to as \"unbounded\".</p> <p>For matrices with known dimensions, the dimensions can be provided in parentesis after the type code.  Here a 4 row by 4 column matrix is created: <pre><code>select 'int32(4:4)'::matrix;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   matrix   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(4:4) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Another way to make a new matrix is with the <code>matrix</code> constructor function. <pre><code>select matrix('int32', 4, 4);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   matrix   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(4:4) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Either dimension can be ommited, this creates a 4 row by unbounded column matrix. <pre><code>select 'int32(4:)'::matrix;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  matrix   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(4:) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> This creates a unbounded row by 4 column matrix. <pre><code>select 'int32(:4)'::matrix;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  matrix   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(:4) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> All graphblas operations are exposed by a series of functions and operators.  Here we see three very common operations, returning the number of rows, the number of columns, and the number of store values. <pre><code>select nrows('int32'::matrix),\n       ncols('int32'::matrix),\n       nvals('int32'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        nrows        \u2502        ncols        \u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502 1152921504606846976 \u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Above you can see the matrix has unbounded rows and columns (the very large number is the number of possible entries).  And the number of stored values is zero.  These matrices are empty, they contain no elements.</p> <p>Values can be specified after the <code>type(dimension)</code> prefix as an array of elements between square brackets.  Empty brackets imply no elements, so empty square brackets are the same as no square brackets as above: <pre><code>select nrows('int32[]'::matrix),\n       ncols('int32[]'::matrix),\n       nvals('int32[]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        nrows        \u2502        ncols        \u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502 1152921504606846976 \u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Elements are specified between square brackets are coordinates of 'row_id:column_id:value' separated by spaces: <pre><code>select 'int32[1:2:1 2:3:2 3:1:3]'::matrix,\n       'int32(4:)[1:2:1 2:3:2 3:1:3]'::matrix,\n       'int32(:4)[1:2:1 2:3:2 3:3:1]'::matrix;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          matrix          \u2502            matrix            \u2502            matrix            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[1:2:1 2:3:2 3:1:3] \u2502 int32(4:)[1:2:1 2:3:2 3:1:3] \u2502 int32(:4)[1:2:1 2:3:2 3:3:1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#elements","title":"Elements","text":"<p>All the elements in a matrix can be iterated with the <code>elements()</code> function: <pre><code>select * from elements((select a from test_fixture));\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 i \u2502 j \u2502    v    \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0 \u2502 2 \u2502 int32:0 \u2502\n\u2502 0 \u2502 3 \u2502 int32:3 \u2502\n\u2502 1 \u2502 0 \u2502 int32:2 \u2502\n\u2502 1 \u2502 2 \u2502 int32:1 \u2502\n\u2502 1 \u2502 3 \u2502 int32:0 \u2502\n\u2502 2 \u2502 0 \u2502 int32:2 \u2502\n\u2502 2 \u2502 1 \u2502 int32:2 \u2502\n\u2502 3 \u2502 0 \u2502 int32:2 \u2502\n\u2502 3 \u2502 2 \u2502 int32:1 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(9 rows)\n</code></pre> The inverse operation of constructing matrices from rows can be done with <code>matrix_agg()</code>: <pre><code>select matrix_agg(i, i, i) as unbound_matrix from generate_series(0, 10) as i;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                               unbound_matrix                                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[0:0:0 1:1:1 2:2:2 3:3:3 4:4:4 5:5:5 6:6:6 7:7:7 8:8:8 9:9:9 10:10:10] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Aggregate matrices are always unbounded so use <code>resize()</code> to bound the matrix: <pre><code>select print(resize(matrix_agg(i, i, i), 10, 10)) as bound_matrix from generate_series(0, 10) as i;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             bound_matrix             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3  4  5  6  7  8  9    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502  0                               \u2502\n\u2502  1\u2502     1                            \u2502\n\u2502  2\u2502        2                         \u2502\n\u2502  3\u2502           3                      \u2502\n\u2502  4\u2502              4                   \u2502\n\u2502  5\u2502                 5                \u2502\n\u2502  6\u2502                    6             \u2502\n\u2502  7\u2502                       7          \u2502\n\u2502  8\u2502                          8       \u2502\n\u2502  9\u2502                             9    \u2502\n\u2502                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#equality","title":"Equality","text":"<p>Two matrices can be compared for equality with the '=' and '!=' operators: <pre><code>select a != b as \"a != b\", a = b as \"a = b\", b = a as \"b = a\", b = b as \"b = b\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a != b \u2502 a = b \u2502 b = a \u2502 b = b \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 t      \u2502 f     \u2502 f     \u2502 t     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#setting-and-getting-individual-elements","title":"Setting and Getting individual Elements","text":"<p>Elements can be set individually with <code>set_element</code>, the modified input is returned: <pre><code>select print(set_element(a, 1, 1, 1)) as set_element from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    set_element     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502\n\u2502  1\u2502  2  1  1  0    \u2502\n\u2502  2\u2502  2  2          \u2502\n\u2502  3\u2502  2     1       \u2502\n\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Scalar elements can be extracted individually with <code>get_element</code> <pre><code>select get_element(a, 3, 2) as get_element from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 get_element \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32:1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> If an element does exist <code>get_element</code> will return an \"empty\" scalar: <pre><code>select get_element(a, 3, 3) as get_element from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 get_element \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#elementwise-addition","title":"Elementwise Addition","text":"<p>The GraphBLAS API has elementwise operations on matrices that operate pairs of matrices.  <code>eadd</code> computes the element-wise \u201caddition\u201d of two matrices a and b, element-wise using any binary operator.  The \"add\" in the name means that the union of both graphs is taken; elements present on both sides of the operation are included in the result. <pre><code>select print(a) as a, binaryop, print(b) as b, print(eadd(a, b, binaryop)) as \"eadd(a, b, binaryop)\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502  binaryop   \u2502         b          \u2502 eadd(a, b, binaryop) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 times_int32 \u2502      0  1  2  3    \u2502      0  1  2  3      \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u2502\n\u2502  0\u2502        0  3    \u2502             \u2502  0\u2502           4    \u2502  0\u2502        0 12      \u2502\n\u2502  1\u2502  2     1  0    \u2502             \u2502  1\u2502        3  1    \u2502  1\u2502  2     3  0      \u2502\n\u2502  2\u2502  2  2          \u2502             \u2502  2\u2502     2     4    \u2502  2\u2502  2  4     4      \u2502\n\u2502  3\u2502  2     1       \u2502             \u2502  3\u2502     0  2       \u2502  3\u2502  2  0  2         \u2502\n\u2502                    \u2502             \u2502                    \u2502                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Eadd can also be accomplished with binary operators specific to OneSparse.  Different binaryops are passed to eadd to do different elementwise operations: <pre><code>select print(a |+ b) as \"a |+ b\", print(a |- b) as \"a |- b\", print(a |* b) as \"a |* b\", print(a |/ b) as \"a |/ b\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       a |+ b       \u2502       a |- b       \u2502       a |* b       \u2502       a |/ b       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  7    \u2502  0\u2502        0 -1    \u2502  0\u2502        0 12    \u2502  0\u2502        0  0    \u2502\n\u2502  1\u2502  2     4  1    \u2502  1\u2502  2    -2 -1    \u2502  1\u2502  2     3  0    \u2502  1\u2502  2     0  0    \u2502\n\u2502  2\u2502  2  4     4    \u2502  2\u2502  2  0     4    \u2502  2\u2502  2  4     4    \u2502  2\u2502  2  1     4    \u2502\n\u2502  3\u2502  2  0  3       \u2502  3\u2502  2  0 -1       \u2502  3\u2502  2  0  2       \u2502  3\u2502  2  0  0       \u2502\n\u2502                    \u2502                    \u2502                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> From a graph standpoint, elementwise addition can be seen as the merging (\"union\") of two graphs, such that the result has edges from both graphs.  Any edges that occur in both graphs are merged with the provided binary operator.</p> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 op %3 0 0 3 3 0-&gt;3 4 1 1 3-&gt;1 0 2 2 3-&gt;2 2 1-&gt;3 1 1-&gt;2 3 2-&gt;3 4 2-&gt;1 2 = %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 12 2-&gt;0 2 2-&gt;3 4 1 1 2-&gt;1 4 3-&gt;0 2 3-&gt;2 2 3-&gt;1 0 1-&gt;0 2 1-&gt;2 3 1-&gt;3 0"},{"location":"test_matrix_header/#elementwise-multiplication","title":"Elementwise Multiplication","text":"<p><code>emult</code> multiplies elements of two matrices, taking only the intersection of common elements in both matrices, if an element is missing from either the left or right side, it is ommited from the result: <pre><code>select print(a) as a, binaryop, print(b) as b, print(emult(a, b, binaryop)) as \"emult(a, b, binaryop)\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502  binaryop   \u2502         b          \u2502 emult(a, b, binaryop) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 times_int32 \u2502      0  1  2  3    \u2502      0  1  2  3       \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500       \u2502\n\u2502  0\u2502        0  3    \u2502             \u2502  0\u2502           4    \u2502  0\u2502          12       \u2502\n\u2502  1\u2502  2     1  0    \u2502             \u2502  1\u2502        3  1    \u2502  1\u2502        3  0       \u2502\n\u2502  2\u2502  2  2          \u2502             \u2502  2\u2502     2     4    \u2502  2\u2502     4             \u2502\n\u2502  3\u2502  2     1       \u2502             \u2502  3\u2502     0  2       \u2502  3\u2502        2          \u2502\n\u2502                    \u2502             \u2502                    \u2502                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Emult can also be accomplished with binary operators specific to OneSparse.  Different binaryops are passed to emult to do different elementwise operations: <pre><code>select print(a &amp;+ b) as \"a &amp;+ b\", print(a &amp;- b) as \"a &amp;- b\", print(a &amp;* b) as \"a &amp;* b\", print(a &amp;/ b) as \"a &amp;/ b\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       a &amp;+ b       \u2502       a &amp;- b       \u2502       a &amp;* b       \u2502       a &amp;/ b       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502           7    \u2502  0\u2502          -1    \u2502  0\u2502          12    \u2502  0\u2502           0    \u2502\n\u2502  1\u2502        4  1    \u2502  1\u2502       -2 -1    \u2502  1\u2502        3  0    \u2502  1\u2502        0  0    \u2502\n\u2502  2\u2502     4          \u2502  2\u2502     0          \u2502  2\u2502     4          \u2502  2\u2502     1          \u2502\n\u2502  3\u2502        3       \u2502  3\u2502       -1       \u2502  3\u2502        2       \u2502  3\u2502        0       \u2502\n\u2502                    \u2502                    \u2502                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> From a graph standpoint, elementwise multiplication can be seen as the intersection of two graphs, such that the result has edges that are only present in both graphs.  The edges are combined with the provided binary operator.</p> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 op %3 0 0 3 3 0-&gt;3 4 1 1 3-&gt;1 0 2 2 3-&gt;2 2 1-&gt;3 1 1-&gt;2 3 2-&gt;3 4 2-&gt;1 2 = %3 0 0 3 3 0-&gt;3 12 2 2 3-&gt;2 2 1 1 1-&gt;3 0 1-&gt;2 3 2-&gt;1 4"},{"location":"test_matrix_header/#elementwise-union","title":"Elementwise Union","text":"<p><code>eunion</code> is like <code>eadd</code> but differs in how the binary op is applied. A pair of scalars, <code>alpha</code> and <code>beta</code> define the inputs to the operator when entries are present in one matrix but not the other. <pre><code>select print(a) as a, binaryop, print(b) as b, print(eunion(a, 3::scalar, b, 4::scalar, binaryop)) as \"eunion(a, 3::scalar, b, 4::scalar, binaryop)\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502  binaryop   \u2502         b          \u2502 eunion(a, 3::scalar, b, 4::scalar, binaryop) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 times_int32 \u2502      0  1  2  3    \u2502      0  1  2  3                              \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500                              \u2502\n\u2502  0\u2502        0  3    \u2502             \u2502  0\u2502           4    \u2502  0\u2502        0 12                              \u2502\n\u2502  1\u2502  2     1  0    \u2502             \u2502  1\u2502        3  1    \u2502  1\u2502  8     3  0                              \u2502\n\u2502  2\u2502  2  2          \u2502             \u2502  2\u2502     2     4    \u2502  2\u2502  8  4    12                              \u2502\n\u2502  3\u2502  2     1       \u2502             \u2502  3\u2502     0  2       \u2502  3\u2502  8  0  2                                 \u2502\n\u2502                    \u2502             \u2502                    \u2502                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> From a graph standpoint, elementwise union is very similar to <code>eadd()</code>, and can be seen as the merging (\"union\") of two graphs, such that the result has edges from both graphs.  Any edges that occur in both graphs are merged with the provided binary operator. If an edge occurs in a but not in b, it is combined with the scalar <code>alpha</code>, if the edge occurs in the b but not in a, then the edge is combined with scalar <code>beta</code>.</p> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 op %3 0 0 3 3 0-&gt;3 4 1 1 3-&gt;1 0 2 2 3-&gt;2 2 1-&gt;3 1 1-&gt;2 3 2-&gt;3 4 2-&gt;1 2 = %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 12 2-&gt;0 8 2-&gt;3 12 1 1 2-&gt;1 4 3-&gt;0 8 3-&gt;2 2 3-&gt;1 0 1-&gt;0 8 1-&gt;2 3 1-&gt;3 0"},{"location":"test_matrix_header/#reduction","title":"Reduction","text":"<p>The entire matrix can be reduced to a scalar value: <pre><code>select print(a) as a, 'plus_monoid_int32' as monoid, reduce_scalar(a) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502      monoid       \u2502 reduce_scalar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 plus_monoid_int32 \u2502 int32:13      \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502                   \u2502               \u2502\n\u2502  0\u2502        0  3    \u2502                   \u2502               \u2502\n\u2502  1\u2502  2     1  0    \u2502                   \u2502               \u2502\n\u2502  2\u2502  2  2          \u2502                   \u2502               \u2502\n\u2502  3\u2502  2     1       \u2502                   \u2502               \u2502\n\u2502                    \u2502                   \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> The entire matrix can be reduced to a scalar value with a provided monoid that changes the reduction operation: <pre><code>select print(a) as a, 'min_monoid_int32' as monoid, reduce_scalar(a, 'min_monoid_int32') from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502      monoid      \u2502 reduce_scalar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 min_monoid_int32 \u2502 int32:0       \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502                  \u2502               \u2502\n\u2502  0\u2502        0  3    \u2502                  \u2502               \u2502\n\u2502  1\u2502  2     1  0    \u2502                  \u2502               \u2502\n\u2502  2\u2502  2  2          \u2502                  \u2502               \u2502\n\u2502  3\u2502  2     1       \u2502                  \u2502               \u2502\n\u2502                    \u2502                  \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> The matrix can also be reduced to a column vector: <pre><code>select print(a) as a, 'plus_monoid_int32' as monoid, print(reduce_cols(a)) as reduce_cols from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502      monoid       \u2502 reduce_cols \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 plus_monoid_int32 \u2502             \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502                   \u2502    \u2500\u2500\u2500      \u2502\n\u2502  0\u2502        0  3    \u2502                   \u2502  0\u2502  3      \u2502\n\u2502  1\u2502  2     1  0    \u2502                   \u2502  1\u2502  3      \u2502\n\u2502  2\u2502  2  2          \u2502                   \u2502  2\u2502  4      \u2502\n\u2502  3\u2502  2     1       \u2502                   \u2502  3\u2502  3      \u2502\n\u2502                    \u2502                   \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> To reduce a row vector: <pre><code>select print(a) as a, 'plus_monoid_int32' as monoid, print(reduce_rows(a)) as reduce_rows from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502      monoid       \u2502 reduce_rows \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 plus_monoid_int32 \u2502             \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502                   \u2502    \u2500\u2500\u2500      \u2502\n\u2502  0\u2502        0  3    \u2502                   \u2502  0\u2502  6      \u2502\n\u2502  1\u2502  2     1  0    \u2502                   \u2502  1\u2502  2      \u2502\n\u2502  2\u2502  2  2          \u2502                   \u2502  2\u2502  2      \u2502\n\u2502  3\u2502  2     1       \u2502                   \u2502  3\u2502  3      \u2502\n\u2502                    \u2502                   \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#matrix-matrix-multiplication","title":"Matrix Matrix Multiplication","text":"<p>Matrix Multiplication is the heart of linear algebra.  All matrix multiplication happens over a semiring.  For the most common form of matrix multiplication, the outer opperation is to multiply coresponding elements with the \"times\" operator and then reduce those products with the \"plus\" operator.  This is called the <code>plus_times</code> semiring: <pre><code>select print(a) as a, semiring, print(b) as b, print(mxm(a, b)) as \"mxm(a, b)\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502     semiring     \u2502         b          \u2502     mxm(a, b)      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 plus_times_int32 \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502                  \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502                  \u2502  0\u2502           4    \u2502  0\u2502     0  6  0    \u2502\n\u2502  1\u2502  2     1  0    \u2502                  \u2502  1\u2502        3  1    \u2502  1\u2502     2  0 12    \u2502\n\u2502  2\u2502  2  2          \u2502                  \u2502  2\u2502     2     4    \u2502  2\u2502        6 10    \u2502\n\u2502  3\u2502  2     1       \u2502                  \u2502  3\u2502     0  2       \u2502  3\u2502     2    12    \u2502\n\u2502                    \u2502                  \u2502                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 op %3 0 0 3 3 0-&gt;3 4 1 1 3-&gt;1 0 2 2 3-&gt;2 2 1-&gt;3 1 1-&gt;2 3 2-&gt;3 4 2-&gt;1 2 = %3 0 0 1 1 0-&gt;1 0 2 2 0-&gt;2 6 3 3 0-&gt;3 0 1-&gt;1 2 1-&gt;2 0 1-&gt;3 12 2-&gt;2 6 2-&gt;3 10 3-&gt;1 2 3-&gt;3 12 <p>AxB can also be done with the <code>@</code> operator, mimicking the Python syntax.  The default semiring for numeric types is <code>plus_times</code>. <pre><code>select print(a) as a, '@' as \"@\", print(b) as b, print(a @ b) as \"a @ b\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502 @ \u2502         b          \u2502       a @ b        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 @ \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502   \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502   \u2502  0\u2502           4    \u2502  0\u2502     0  6  0    \u2502\n\u2502  1\u2502  2     1  0    \u2502   \u2502  1\u2502        3  1    \u2502  1\u2502     2  0 12    \u2502\n\u2502  2\u2502  2  2          \u2502   \u2502  2\u2502     2     4    \u2502  2\u2502        6 10    \u2502\n\u2502  3\u2502  2     1       \u2502   \u2502  3\u2502     0  2       \u2502  3\u2502     2    12    \u2502\n\u2502                    \u2502   \u2502                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#matrix-vector-multiplication","title":"Matrix Vector Multiplication","text":"<p>Matrices can be multipled by vectors on the right taking the linear combination of the matrices columns using the vectors elements as coefficients: <pre><code>select print(a) as a, '@' as \"@\", semiring, print(u) as u, print(mxv(a, u)) as \"mxv(a, u)\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502 @ \u2502     semiring     \u2502     u     \u2502 mxv(a, u) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 @ \u2502 plus_times_int32 \u2502           \u2502           \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502   \u2502                  \u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502   \u2502                  \u2502  0\u2502       \u2502  0\u2502       \u2502\n\u2502  1\u2502  2     1  0    \u2502   \u2502                  \u2502  1\u2502  2    \u2502  1\u2502       \u2502\n\u2502  2\u2502  2  2          \u2502   \u2502                  \u2502  2\u2502       \u2502  2\u2502  4    \u2502\n\u2502  3\u2502  2     1       \u2502   \u2502                  \u2502  3\u2502       \u2502  3\u2502       \u2502\n\u2502                    \u2502   \u2502                  \u2502           \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> From a graph standpoint, matrix vector multiplication is used to \"pull\" back to adjacent nodes from their incoming edges.  When iterated, it forms the basis for working back along incoming links.</p> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 op vector cluster_vector node0 node1 1:2 node2 node3 = vector cluster_vector node0 node1 node2 2:4 node3 <p>'mxv' is also supported by the <code>@</code> operator: <pre><code>select print(a) as a, '@' as \"@\", print(u) as u, print(a @ u) as \"a @ u\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502 @ \u2502     u     \u2502   a @ u   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 @ \u2502           \u2502           \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502   \u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502   \u2502  0\u2502       \u2502  0\u2502       \u2502\n\u2502  1\u2502  2     1  0    \u2502   \u2502  1\u2502  2    \u2502  1\u2502       \u2502\n\u2502  2\u2502  2  2          \u2502   \u2502  2\u2502       \u2502  2\u2502  4    \u2502\n\u2502  3\u2502  2     1       \u2502   \u2502  3\u2502       \u2502  3\u2502       \u2502\n\u2502                    \u2502   \u2502           \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#vector-matrix-multiplication","title":"Vector Matrix Multiplication","text":"<p>Matrices can be multipled by vectors on the right taking the linear combination of the matrices rows using the vectors elements as coefficients: <pre><code>select print(v) as v, semiring, print(b) as b, print(vxm(v, b, semiring)) as \"vxm(v, b, semiring)\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     v     \u2502     semiring     \u2502         b          \u2502 vxm(v, b, semiring) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502 plus_times_int32 \u2502      0  1  2  3    \u2502                     \u2502\n\u2502    \u2500\u2500\u2500    \u2502                  \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500              \u2502\n\u2502  0\u2502       \u2502                  \u2502  0\u2502           4    \u2502  0\u2502                 \u2502\n\u2502  1\u2502  3    \u2502                  \u2502  1\u2502        3  1    \u2502  1\u2502  6              \u2502\n\u2502  2\u2502  3    \u2502                  \u2502  2\u2502     2     4    \u2502  2\u2502  9              \u2502\n\u2502  3\u2502       \u2502                  \u2502  3\u2502     0  2       \u2502  3\u2502 15              \u2502\n\u2502           \u2502                  \u2502                    \u2502                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> From a graph standpoint, vector matrix multiplication is used to \"push\" forward to adjacent nodes from their outgoing edges.  When iterated, it forms the basis for working forward along outgoing edges.</p> vector cluster_vector node0 node1 1:3 node2 2:3 node3 op %3 0 0 3 3 0-&gt;3 4 1 1 3-&gt;1 0 2 2 3-&gt;2 2 1-&gt;3 1 1-&gt;2 3 2-&gt;3 4 2-&gt;1 2 = vector cluster_vector node0 node1 1:6 node2 2:9 node3 3:15 <p>'vxm' is also supported by the <code>@</code> operator: <pre><code>select print(v) as v, '@' as \"@\", print(b) as b, print(v @ b) as \"v @ b\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     v     \u2502 @ \u2502         b          \u2502   v @ b   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502 @ \u2502      0  1  2  3    \u2502           \u2502\n\u2502    \u2500\u2500\u2500    \u2502   \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502       \u2502   \u2502  0\u2502           4    \u2502  0\u2502       \u2502\n\u2502  1\u2502  3    \u2502   \u2502  1\u2502        3  1    \u2502  1\u2502  6    \u2502\n\u2502  2\u2502  3    \u2502   \u2502  2\u2502     2     4    \u2502  2\u2502  9    \u2502\n\u2502  3\u2502       \u2502   \u2502  3\u2502     0  2       \u2502  3\u2502 15    \u2502\n\u2502           \u2502   \u2502                    \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#choosing-elements","title":"Choosing Elements","text":"<p>The <code>choose</code> method calls the <code>GrB_select()</code> API function.  The name <code>choose</code> was chosen not to conflict with the SQL keyword <code>select</code>.  Selection provides a conditional operator called an <code>indexunaryop</code> and a parameter for the operator to use to compare elements in the matrix.  Below, all elements with values greater than 1 are returned: <pre><code>select print(a) as a, indexunaryop, print(choose(a, indexunaryop, 1)) as selected from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502 indexunaryop  \u2502      selected      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 valuegt_int32 \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502               \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502               \u2502  0\u2502           3    \u2502\n\u2502  1\u2502  2     1  0    \u2502               \u2502  1\u2502  2             \u2502\n\u2502  2\u2502  2  2          \u2502               \u2502  2\u2502  2  2          \u2502\n\u2502  3\u2502  2     1       \u2502               \u2502  3\u2502  2             \u2502\n\u2502                    \u2502               \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p> %3 0 0 2 2 0-&gt;2 0 3 3 0-&gt;3 3 2-&gt;0 2 1 1 2-&gt;1 2 3-&gt;0 2 3-&gt;2 1 1-&gt;0 2 1-&gt;2 1 1-&gt;3 0 op %3 0 0 3 3 0-&gt;3 3 3-&gt;0 2 1 1 1-&gt;0 2 2 2 2-&gt;0 2 2-&gt;1 2"},{"location":"test_matrix_header/#choosing-operators","title":"Choosing Operators","text":"<p>Selection can also be done with scalars and operators:p <pre><code>select print(a &gt; 1) as \"a &gt; 1\", print(a &gt;= 1) as \"a &gt;= 1\", print(a &lt; 1) as \"a &lt; 1\", print(a &lt;= 1) as \"a &lt;= 1\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       a &gt; 1        \u2502       a &gt;= 1       \u2502       a &lt; 1        \u2502       a &lt;= 1       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502           3    \u2502  0\u2502           3    \u2502  0\u2502        0       \u2502  0\u2502        0       \u2502\n\u2502  1\u2502  2             \u2502  1\u2502  2     1       \u2502  1\u2502           0    \u2502  1\u2502        1  0    \u2502\n\u2502  2\u2502  2  2          \u2502  2\u2502  2  2          \u2502  2\u2502                \u2502  2\u2502                \u2502\n\u2502  3\u2502  2             \u2502  3\u2502  2     1       \u2502  3\u2502                \u2502  3\u2502        1       \u2502\n\u2502                    \u2502                    \u2502                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> A useful select operator is <code>triu</code>, it select only upper triangular values, this turns your graph into a direct acyclic graph (DAG) by removing all the links \"back\" from higher number nodes to lower. <pre><code>select print(random_matrix(8, 8, 16, seed=&gt;0.42, max=&gt;42)) as matrix,\n       print(choose(random_matrix(8, 8, 16, seed=&gt;0.42, max=&gt;42), 'triu', 0)) as triu from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             matrix             \u2502              triu              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3  4  5  6  7    \u2502      0  1  2  3  4  5  6  7    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502              6 31          \u2502  0\u2502              6 31          \u2502\n\u2502  1\u2502                   12       \u2502  1\u2502                   12       \u2502\n\u2502  2\u2502    26                      \u2502  2\u2502                            \u2502\n\u2502  3\u2502                40          \u2502  3\u2502                40          \u2502\n\u2502  4\u2502    11    15           7    \u2502  4\u2502                       7    \u2502\n\u2502  5\u2502 20 12    22        1       \u2502  5\u2502                    1       \u2502\n\u2502  6\u2502              1             \u2502  6\u2502                            \u2502\n\u2502  7\u2502       17                   \u2502  7\u2502                            \u2502\n\u2502                                \u2502                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect draw(random_matrix(8, 8, 16, seed=&gt;0.42, max=&gt;42)) as uop_a_source,\n       draw(choose(random_matrix(8, 8, 16, seed=&gt;0.42, max=&gt;42), 'triu', 0)) as uop_b_source\n</code></pre></p> %3 0 0 4 4 0-&gt;4 6 5 5 0-&gt;5 31 1 1 4-&gt;1 11 3 3 4-&gt;3 15 7 7 4-&gt;7 7 5-&gt;0 20 5-&gt;1 12 6 6 5-&gt;6 1 5-&gt;3 22 1-&gt;6 12 6-&gt;4 1 2 2 2-&gt;1 26 3-&gt;5 40 7-&gt;2 17 op %3 0 0 4 4 0-&gt;4 6 5 5 0-&gt;5 31 7 7 4-&gt;7 7 6 6 5-&gt;6 1 1 1 1-&gt;6 12 3 3 3-&gt;5 40"},{"location":"test_matrix_header/#kronecker","title":"Kronecker","text":"<p>The <code>kronecker()</code> function takes two input matrices, and replaces every element in the second matrix with a new submatrix of the first.  This \"expands\" the matrix exponentially.  This is useful for constructing synthetic graphs with specific power law distributions.</p> <pre><code>select print(s) as s, semiring, print(s) as s, print(kronecker(s, s, semiring)) as kronecker from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      s       \u2502     semiring     \u2502      s       \u2502     kronecker      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1    \u2502 plus_times_int32 \u2502      0  1    \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500    \u2502                  \u2502    \u2500\u2500\u2500\u2500\u2500\u2500    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502  1  1    \u2502                  \u2502  0\u2502  1  1    \u2502  0\u2502  1  1  1  1    \u2502\n\u2502  1\u2502     1    \u2502                  \u2502  1\u2502     1    \u2502  1\u2502     1     1    \u2502\n\u2502              \u2502                  \u2502              \u2502  2\u2502        1  1    \u2502\n\u2502              \u2502                  \u2502              \u2502  3\u2502           1    \u2502\n\u2502              \u2502                  \u2502              \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> %3 0 0 0-&gt;0 1 1 1 0-&gt;1 1 1-&gt;1 1 op %3 0 0 0-&gt;0 1 1 1 0-&gt;1 1 1-&gt;1 1 = %3 0 0 0-&gt;0 1 1 1 0-&gt;1 1 2 2 0-&gt;2 1 3 3 0-&gt;3 1 1-&gt;1 1 1-&gt;3 1 2-&gt;2 1 2-&gt;3 1 3-&gt;3 1"},{"location":"test_matrix_header/#kronecker-power","title":"Kronecker Power","text":"<p>There's a special function for exponentiating a matrix to itself a certain number of times, <code>kronpower</code>: <pre><code>select print(kronpower(s, 2)) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         print                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1    \u2502\n\u2502  1\u2502     1     1     1     1     1     1     1     1    \u2502\n\u2502  2\u2502        1  1        1  1        1  1        1  1    \u2502\n\u2502  3\u2502           1           1           1           1    \u2502\n\u2502  4\u2502              1  1  1  1              1  1  1  1    \u2502\n\u2502  5\u2502                 1     1                 1     1    \u2502\n\u2502  6\u2502                    1  1                    1  1    \u2502\n\u2502  7\u2502                       1                       1    \u2502\n\u2502  8\u2502                          1  1  1  1  1  1  1  1    \u2502\n\u2502  9\u2502                             1     1     1     1    \u2502\n\u2502 10\u2502                                1  1        1  1    \u2502\n\u2502 11\u2502                                   1           1    \u2502\n\u2502 12\u2502                                      1  1  1  1    \u2502\n\u2502 13\u2502                                         1     1    \u2502\n\u2502 14\u2502                                            1  1    \u2502\n\u2502 15\u2502                                               1    \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Kronecker products can very quickly make huge graphs with power law distributions.  These are handy synthetic graphs to mimic certain statistical edge distributions common in sparse graph problems: <pre><code>select nvals(kronpower(s, 4)) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  nvals   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 43046721 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#transpose","title":"Transpose","text":"<p>A matrix can be transposed with the <code>transpose()</code> function: <pre><code>select print(transpose(a)) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       print        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502     2  2  2    \u2502\n\u2502  1\u2502        2       \u2502\n\u2502  2\u2502  0  1     1    \u2502\n\u2502  3\u2502  3  0          \u2502\n\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#apply","title":"Apply","text":"<p><code>apply</code> takes an operator of type <code>unaryop</code> and applies it to every element of the matrix.  The 'ainv_int32' returned the additive inverse (the negative value for integers) of every element: <pre><code>select print(a) as a, unaryop, print(apply(a, unaryop)) as applied from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         a          \u2502  unaryop   \u2502      applied       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      0  1  2  3    \u2502 ainv_int32 \u2502      0  1  2  3    \u2502\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502            \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500    \u2502\n\u2502  0\u2502        0  3    \u2502            \u2502  0\u2502        0 -3    \u2502\n\u2502  1\u2502  2     1  0    \u2502            \u2502  1\u2502 -2    -1  0    \u2502\n\u2502  2\u2502  2  2          \u2502            \u2502  2\u2502 -2 -2          \u2502\n\u2502  3\u2502  2     1       \u2502            \u2502  3\u2502 -2    -1       \u2502\n\u2502                    \u2502            \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#suitesparse-info","title":"SuiteSparse Info","text":"<p>The <code>info</code> function returns a descripton of the matrix from SuiteSparse. <pre><code>select info(a) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     info                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                               \u2502\n\u2502   4x4 GraphBLAS int32_t matrix, bitmap by row \u2502\n\u2502   A-&gt;matrix, 9 entries, memory: 312 bytes     \u2502\n\u2502                                               \u2502\n\u2502                                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#matrix-duplication","title":"Matrix Duplication","text":"<p>The <code>dup</code> function duplicates a matrix returning a new matrix object with the same values: <pre><code>select dup(a) from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                dup                                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(4:4)[0:2:0 0:3:3 1:0:2 1:2:1 1:3:0 2:0:2 2:1:2 3:0:2 3:2:1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_matrix_header/#work-completion","title":"Work Completion","text":"<p>The <code>wait</code> method is used to \"complete\" a matrix, which may have pending operations waiting to be performed when using the default SuiteSparse non-blocking mode.  As a side effect, wait will sort the elements of the input: <pre><code>select wait('int32[2:2:2 3:3:3 1:1:1]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           wait           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[1:1:1 2:2:2 3:3:3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> The <code>clear</code> function clears the matrix of all elements and returns the same object, but empty.  The dimensions do not change:</p>"},{"location":"test_matrix_header/#clearing-matrices","title":"Clearing Matrices","text":"<pre><code>select clear('int32[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 clear \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre>"},{"location":"test_matrix_header/#extra-tests","title":"Extra tests","text":"<p>This documentation also forms the basis for the onesparse tests, These tests run the documentation against a live server, all the above results are automatically generated. <pre><code>select nrows('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrows \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect ncols('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        ncols        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32(10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nrows('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrows \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect ncols('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        ncols        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32(10:)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nrows('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        nrows        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect ncols('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ncols \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32(:10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nrows('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrows \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect ncols('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ncols \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32(10:10)[1:1:1 2:2:2 3:3:3]'::matrix);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"},{"location":"test_monoid_header/","title":"Monoid","text":"<p>Monoids apply a BinaryOp and an identity value to two elements, returning an element.</p> OneSparse Name SuiteSparse Name min_int8_monoid GxB_MIN_INT8_MONOID min_int16_monoid GxB_MIN_INT16_MONOID min_int32_monoid GxB_MIN_INT32_MONOID min_int64_monoid GxB_MIN_INT64_MONOID min_uint8_monoid GxB_MIN_UINT8_MONOID min_uint16_monoid GxB_MIN_UINT16_MONOID min_uint32_monoid GxB_MIN_UINT32_MONOID min_uint64_monoid GxB_MIN_UINT64_MONOID min_fp32_monoid GxB_MIN_FP32_MONOID min_fp64_monoid GxB_MIN_FP64_MONOID min_monoid_int8 GrB_MIN_MONOID_INT8 min_monoid_int16 GrB_MIN_MONOID_INT16 min_monoid_int32 GrB_MIN_MONOID_INT32 min_monoid_int64 GrB_MIN_MONOID_INT64 min_monoid_uint8 GrB_MIN_MONOID_UINT8 min_monoid_uint16 GrB_MIN_MONOID_UINT16 min_monoid_uint32 GrB_MIN_MONOID_UINT32 min_monoid_uint64 GrB_MIN_MONOID_UINT64 min_monoid_fp32 GrB_MIN_MONOID_FP32 min_monoid_fp64 GrB_MIN_MONOID_FP64 max_int8_monoid GxB_MAX_INT8_MONOID max_int16_monoid GxB_MAX_INT16_MONOID max_int32_monoid GxB_MAX_INT32_MONOID max_int64_monoid GxB_MAX_INT64_MONOID max_uint8_monoid GxB_MAX_UINT8_MONOID max_uint16_monoid GxB_MAX_UINT16_MONOID max_uint32_monoid GxB_MAX_UINT32_MONOID max_uint64_monoid GxB_MAX_UINT64_MONOID max_fp32_monoid GxB_MAX_FP32_MONOID max_fp64_monoid GxB_MAX_FP64_MONOID max_monoid_int8 GrB_MAX_MONOID_INT8 max_monoid_int16 GrB_MAX_MONOID_INT16 max_monoid_int32 GrB_MAX_MONOID_INT32 max_monoid_int64 GrB_MAX_MONOID_INT64 max_monoid_uint8 GrB_MAX_MONOID_UINT8 max_monoid_uint16 GrB_MAX_MONOID_UINT16 max_monoid_uint32 GrB_MAX_MONOID_UINT32 max_monoid_uint64 GrB_MAX_MONOID_UINT64 max_monoid_fp32 GrB_MAX_MONOID_FP32 max_monoid_fp64 GrB_MAX_MONOID_FP64 plus_int8_monoid GxB_PLUS_INT8_MONOID plus_int16_monoid GxB_PLUS_INT16_MONOID plus_int32_monoid GxB_PLUS_INT32_MONOID plus_int64_monoid GxB_PLUS_INT64_MONOID plus_uint8_monoid GxB_PLUS_UINT8_MONOID plus_uint16_monoid GxB_PLUS_UINT16_MONOID plus_uint32_monoid GxB_PLUS_UINT32_MONOID plus_uint64_monoid GxB_PLUS_UINT64_MONOID plus_fp32_monoid GxB_PLUS_FP32_MONOID plus_fp64_monoid GxB_PLUS_FP64_MONOID plus_monoid_int8 GrB_PLUS_MONOID_INT8 plus_monoid_int16 GrB_PLUS_MONOID_INT16 plus_monoid_int32 GrB_PLUS_MONOID_INT32 plus_monoid_int64 GrB_PLUS_MONOID_INT64 plus_monoid_uint8 GrB_PLUS_MONOID_UINT8 plus_monoid_uint16 GrB_PLUS_MONOID_UINT16 plus_monoid_uint32 GrB_PLUS_MONOID_UINT32 plus_monoid_uint64 GrB_PLUS_MONOID_UINT64 plus_monoid_fp32 GrB_PLUS_MONOID_FP32 plus_monoid_fp64 GrB_PLUS_MONOID_FP64 plus_fc32_monoid GxB_PLUS_FC32_MONOID plus_fc64_monoid GxB_PLUS_FC64_MONOID times_int8_monoid GxB_TIMES_INT8_MONOID times_int16_monoid GxB_TIMES_INT16_MONOID times_int32_monoid GxB_TIMES_INT32_MONOID times_int64_monoid GxB_TIMES_INT64_MONOID times_uint8_monoid GxB_TIMES_UINT8_MONOID times_uint16_monoid GxB_TIMES_UINT16_MONOID times_uint32_monoid GxB_TIMES_UINT32_MONOID times_uint64_monoid GxB_TIMES_UINT64_MONOID times_fp32_monoid GxB_TIMES_FP32_MONOID times_fp64_monoid GxB_TIMES_FP64_MONOID times_monoid_int8 GrB_TIMES_MONOID_INT8 times_monoid_int16 GrB_TIMES_MONOID_INT16 times_monoid_int32 GrB_TIMES_MONOID_INT32 times_monoid_int64 GrB_TIMES_MONOID_INT64 times_monoid_uint8 GrB_TIMES_MONOID_UINT8 times_monoid_uint16 GrB_TIMES_MONOID_UINT16 times_monoid_uint32 GrB_TIMES_MONOID_UINT32 times_monoid_uint64 GrB_TIMES_MONOID_UINT64 times_monoid_fp32 GrB_TIMES_MONOID_FP32 times_monoid_fp64 GrB_TIMES_MONOID_FP64 times_fc32_monoid GxB_TIMES_FC32_MONOID times_fc64_monoid GxB_TIMES_FC64_MONOID any_bool_monoid GxB_ANY_BOOL_MONOID any_int8_monoid GxB_ANY_INT8_MONOID any_int16_monoid GxB_ANY_INT16_MONOID any_int32_monoid GxB_ANY_INT32_MONOID any_int64_monoid GxB_ANY_INT64_MONOID any_uint8_monoid GxB_ANY_UINT8_MONOID any_uint16_monoid GxB_ANY_UINT16_MONOID any_uint32_monoid GxB_ANY_UINT32_MONOID any_uint64_monoid GxB_ANY_UINT64_MONOID any_fp32_monoid GxB_ANY_FP32_MONOID any_fp64_monoid GxB_ANY_FP64_MONOID any_fc32_monoid GxB_ANY_FC32_MONOID any_fc64_monoid GxB_ANY_FC64_MONOID lor_bool_monoid GxB_LOR_BOOL_MONOID land_bool_monoid GxB_LAND_BOOL_MONOID lxor_bool_monoid GxB_LXOR_BOOL_MONOID lxnor_bool_monoid GxB_LXNOR_BOOL_MONOID eq_bool_monoid GxB_EQ_BOOL_MONOID lor_monoid_bool GrB_LOR_MONOID_BOOL land_monoid_bool GrB_LAND_MONOID_BOOL lxor_monoid_bool GrB_LXOR_MONOID_BOOL lxnor_monoid_bool GrB_LXNOR_MONOID_BOOL bor_uint8_monoid GxB_BOR_UINT8_MONOID bor_uint16_monoid GxB_BOR_UINT16_MONOID bor_uint32_monoid GxB_BOR_UINT32_MONOID bor_uint64_monoid GxB_BOR_UINT64_MONOID band_uint8_monoid GxB_BAND_UINT8_MONOID band_uint16_monoid GxB_BAND_UINT16_MONOID band_uint32_monoid GxB_BAND_UINT32_MONOID band_uint64_monoid GxB_BAND_UINT64_MONOID bxor_uint8_monoid GxB_BXOR_UINT8_MONOID bxor_uint16_monoid GxB_BXOR_UINT16_MONOID bxor_uint32_monoid GxB_BXOR_UINT32_MONOID bxor_uint64_monoid GxB_BXOR_UINT64_MONOID bxnor_uint8_monoid GxB_BXNOR_UINT8_MONOID bxnor_uint16_monoid GxB_BXNOR_UINT16_MONOID bxnor_uint32_monoid GxB_BXNOR_UINT32_MONOID bxnor_uint64_monoid GxB_BXNOR_UINT64_MONOID"},{"location":"test_scalar_header/","title":"Scalar","text":"<p>This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres.</p> <p>Some setup to make sure warnings are shown, and that the extension is installed. <pre><code>set client_min_messages = 'WARNING';\ncreate extension if not exists onesparse;\n</code></pre> Describe the scalar type <pre><code>                                                      List of data types\n  Schema   |  Name  | Internal name | Size | Elements |  Owner   | Access privileges |               Description               \n-----------+--------+---------------+------+----------+----------+-------------------+-----------------------------------------\n onesparse | scalar | scalar        | var  |          | postgres |                   | Scalars hold individual element values.\n(1 row)\n</code></pre> print a scalar, this renders the value with no prefix <pre><code>select print('int32:42'::scalar);\n print \n-------\n 42\n(1 row)\n</code></pre> Duplicate a scalar <pre><code>select dup('int32:42'::scalar);\n   dup    \n----------\n int32:42\n(1 row)\n</code></pre> Wait for a scalar to complete in non-blocking mode <pre><code>select wait('int32:42'::scalar);\n   wait   \n----------\n int32:42\n(1 row)\n</code></pre> Clear a scalar, deleting its stored element. <pre><code>select clear('int32:42'::scalar);\n clear \n-------\n int\n(1 row)\n</code></pre></p>"},{"location":"test_scalar_op/","title":"Test scalar op","text":""},{"location":"test_scalar_op/#scalar-bigint","title":"Scalar <code>bigint</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::bigint)::scalar + -1::bigint;\nselect 1::bigint + (-1::bigint)::scalar;\nselect (1::bigint)::scalar - 1::bigint;\nselect 1::bigint - (1::bigint)::scalar;\nselect (1::bigint)::scalar * -1::bigint;\nselect 1::bigint * (-1::bigint)::scalar;\nselect (1::bigint)::scalar / 1::bigint;\nselect 1::bigint / (1::bigint)::scalar;\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::bigint::scalar;\nselect '0'::bigint::scalar;\nselect '1'::bigint::scalar;\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::bigint::scalar, 2);\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_bigint((-1)::bigint);\nselect scalar_bigint((0)::bigint);\nselect scalar_bigint((1)::bigint);\nselect bigint_scalar((-1)::bigint::scalar);\nselect bigint_scalar((0)::bigint::scalar);\nselect bigint_scalar((1)::bigint::scalar);\n</code></pre> These casting functions cast the Postgres type <code>bigint</code> to the GraphBLAS scalar type <code>GrB_INT64</code>. <pre><code>select cast(-1::bigint as scalar);\nselect cast(0::bigint as scalar);\nselect cast(1::bigint as scalar);\n</code></pre> These tests cast back from the scalar type <code>GrB_INT64</code> to the Postgres type <code>bigint</code> <pre><code>select cast((-1::bigint)::scalar as bigint);\nselect cast((0::bigint)::scalar as  bigint);\nselect cast((1::bigint)::scalar as scalar);\n</code></pre></p>"},{"location":"test_scalar_op/#scalar-integer","title":"Scalar <code>integer</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::integer)::scalar + -1::integer;\nselect 1::integer + (-1::integer)::scalar;\nselect (1::integer)::scalar - 1::integer;\nselect 1::integer - (1::integer)::scalar;\nselect (1::integer)::scalar * -1::integer;\nselect 1::integer * (-1::integer)::scalar;\nselect (1::integer)::scalar / 1::integer;\nselect 1::integer / (1::integer)::scalar;\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::integer::scalar;\nselect '0'::integer::scalar;\nselect '1'::integer::scalar;\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::integer::scalar, 2);\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_integer((-1)::integer);\nselect scalar_integer((0)::integer);\nselect scalar_integer((1)::integer);\nselect integer_scalar((-1)::integer::scalar);\nselect integer_scalar((0)::integer::scalar);\nselect integer_scalar((1)::integer::scalar);\n</code></pre> These casting functions cast the Postgres type <code>integer</code> to the GraphBLAS scalar type <code>GrB_INT32</code>. <pre><code>select cast(-1::integer as scalar);\nselect cast(0::integer as scalar);\nselect cast(1::integer as scalar);\n</code></pre> These tests cast back from the scalar type <code>GrB_INT32</code> to the Postgres type <code>integer</code> <pre><code>select cast((-1::integer)::scalar as integer);\nselect cast((0::integer)::scalar as  integer);\nselect cast((1::integer)::scalar as scalar);\n</code></pre></p>"},{"location":"test_scalar_op/#scalar-smallint","title":"Scalar <code>smallint</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::smallint)::scalar + -1::smallint;\nselect 1::smallint + (-1::smallint)::scalar;\nselect (1::smallint)::scalar - 1::smallint;\nselect 1::smallint - (1::smallint)::scalar;\nselect (1::smallint)::scalar * -1::smallint;\nselect 1::smallint * (-1::smallint)::scalar;\nselect (1::smallint)::scalar / 1::smallint;\nselect 1::smallint / (1::smallint)::scalar;\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::smallint::scalar;\nselect '0'::smallint::scalar;\nselect '1'::smallint::scalar;\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::smallint::scalar, 2);\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_smallint((-1)::smallint);\nselect scalar_smallint((0)::smallint);\nselect scalar_smallint((1)::smallint);\nselect smallint_scalar((-1)::smallint::scalar);\nselect smallint_scalar((0)::smallint::scalar);\nselect smallint_scalar((1)::smallint::scalar);\n</code></pre> These casting functions cast the Postgres type <code>smallint</code> to the GraphBLAS scalar type <code>GrB_INT16</code>. <pre><code>select cast(-1::smallint as scalar);\nselect cast(0::smallint as scalar);\nselect cast(1::smallint as scalar);\n</code></pre> These tests cast back from the scalar type <code>GrB_INT16</code> to the Postgres type <code>smallint</code> <pre><code>select cast((-1::smallint)::scalar as smallint);\nselect cast((0::smallint)::scalar as  smallint);\nselect cast((1::smallint)::scalar as scalar);\n</code></pre></p>"},{"location":"test_scalar_op/#scalar-float4","title":"Scalar <code>float4</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::float4)::scalar + -1::float4;\nselect 1::float4 + (-1::float4)::scalar;\nselect (1::float4)::scalar - 1::float4;\nselect 1::float4 - (1::float4)::scalar;\nselect (1::float4)::scalar * -1::float4;\nselect 1::float4 * (-1::float4)::scalar;\nselect (1::float4)::scalar / 1::float4;\nselect 1::float4 / (1::float4)::scalar;\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::float4::scalar;\nselect '0'::float4::scalar;\nselect '1'::float4::scalar;\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::float4::scalar, 2);\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_float4((-1)::float4);\nselect scalar_float4((0)::float4);\nselect scalar_float4((1)::float4);\nselect float4_scalar((-1)::float4::scalar);\nselect float4_scalar((0)::float4::scalar);\nselect float4_scalar((1)::float4::scalar);\n</code></pre> These casting functions cast the Postgres type <code>float4</code> to the GraphBLAS scalar type <code>GrB_INT32</code>. <pre><code>select cast(-1::float4 as scalar);\nselect cast(0::float4 as scalar);\nselect cast(1::float4 as scalar);\n</code></pre> These tests cast back from the scalar type <code>GrB_INT32</code> to the Postgres type <code>float4</code> <pre><code>select cast((-1::float4)::scalar as float4);\nselect cast((0::float4)::scalar as  float4);\nselect cast((1::float4)::scalar as scalar);\n</code></pre></p>"},{"location":"test_scalar_op/#scalar-float8","title":"Scalar <code>float8</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::float8)::scalar + -1::float8;\nselect 1::float8 + (-1::float8)::scalar;\nselect (1::float8)::scalar - 1::float8;\nselect 1::float8 - (1::float8)::scalar;\nselect (1::float8)::scalar * -1::float8;\nselect 1::float8 * (-1::float8)::scalar;\nselect (1::float8)::scalar / 1::float8;\nselect 1::float8 / (1::float8)::scalar;\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::float8::scalar;\nselect '0'::float8::scalar;\nselect '1'::float8::scalar;\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::float8::scalar, 2);\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_float8((-1)::float8);\nselect scalar_float8((0)::float8);\nselect scalar_float8((1)::float8);\nselect float8_scalar((-1)::float8::scalar);\nselect float8_scalar((0)::float8::scalar);\nselect float8_scalar((1)::float8::scalar);\n</code></pre> These casting functions cast the Postgres type <code>float8</code> to the GraphBLAS scalar type <code>GrB_INT64</code>. <pre><code>select cast(-1::float8 as scalar);\nselect cast(0::float8 as scalar);\nselect cast(1::float8 as scalar);\n</code></pre> These tests cast back from the scalar type <code>GrB_INT64</code> to the Postgres type <code>float8</code> <pre><code>select cast((-1::float8)::scalar as float8);\nselect cast((0::float8)::scalar as  float8);\nselect cast((1::float8)::scalar as scalar);\n</code></pre></p>"},{"location":"test_scalar_op_f4/","title":"Test scalar op f4","text":""},{"location":"test_scalar_op_f4/#scalar-float4","title":"Scalar <code>float4</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::float4)::scalar + -1::float4;\n   ?column?    \n---------------\n fp32:0.000000\n(1 row)\n\nselect 1::float4 + (-1::float4)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::float4)::scalar - 1::float4;\n   ?column?    \n---------------\n fp32:0.000000\n(1 row)\n\nselect 1::float4 - (1::float4)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::float4)::scalar * -1::float4;\n    ?column?    \n----------------\n fp32:-1.000000\n(1 row)\n\nselect 1::float4 * (-1::float4)::scalar;\n ?column? \n----------\n       -1\n(1 row)\n\nselect (1::float4)::scalar / 1::float4;\n   ?column?    \n---------------\n fp32:1.000000\n(1 row)\n\nselect 1::float4 / (1::float4)::scalar;\n ?column? \n----------\n        1\n(1 row)\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::float4::scalar;\n     scalar     \n----------------\n fp32:-1.000000\n(1 row)\n\nselect '0'::float4::scalar;\n    scalar     \n---------------\n fp32:0.000000\n(1 row)\n\nselect '1'::float4::scalar;\n    scalar     \n---------------\n fp32:1.000000\n(1 row)\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::float4::scalar, 2);\n      set      \n---------------\n fp32:2.000000\n(1 row)\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_float4((-1)::float4);\n scalar_float4  \n----------------\n fp32:-1.000000\n(1 row)\n\nselect scalar_float4((0)::float4);\n scalar_float4 \n---------------\n fp32:0.000000\n(1 row)\n\nselect scalar_float4((1)::float4);\n scalar_float4 \n---------------\n fp32:1.000000\n(1 row)\n\nselect float4_scalar((-1)::float4::scalar);\n float4_scalar \n---------------\n            -1\n(1 row)\n\nselect float4_scalar((0)::float4::scalar);\n float4_scalar \n---------------\n             0\n(1 row)\n\nselect float4_scalar((1)::float4::scalar);\n float4_scalar \n---------------\n             1\n(1 row)\n</code></pre> These casting functions cast the Postgres type <code>float4</code> to the GraphBLAS scalar type <code>GrB_INT32</code>. <pre><code>select cast(-1::float4 as scalar);\n     scalar     \n----------------\n fp32:-1.000000\n(1 row)\n\nselect cast(0::float4 as scalar);\n    scalar     \n---------------\n fp32:0.000000\n(1 row)\n\nselect cast(1::float4 as scalar);\n    scalar     \n---------------\n fp32:1.000000\n(1 row)\n</code></pre> These tests cast back from the scalar type <code>GrB_INT32</code> to the Postgres type <code>float4</code> <pre><code>select cast((-1::float4)::scalar as float4);\n float4 \n--------\n     -1\n(1 row)\n\nselect cast((0::float4)::scalar as  float4);\n float4 \n--------\n      0\n(1 row)\n\nselect cast((1::float4)::scalar as scalar);\n    scalar     \n---------------\n fp32:1.000000\n(1 row)\n</code></pre></p>"},{"location":"test_scalar_op_f8/","title":"Test scalar op f8","text":""},{"location":"test_scalar_op_f8/#scalar-float8","title":"Scalar <code>float8</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::float8)::scalar + -1::float8;\n   ?column?    \n---------------\n fp64:0.000000\n(1 row)\n\nselect 1::float8 + (-1::float8)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::float8)::scalar - 1::float8;\n   ?column?    \n---------------\n fp64:0.000000\n(1 row)\n\nselect 1::float8 - (1::float8)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::float8)::scalar * -1::float8;\n    ?column?    \n----------------\n fp64:-1.000000\n(1 row)\n\nselect 1::float8 * (-1::float8)::scalar;\n ?column? \n----------\n       -1\n(1 row)\n\nselect (1::float8)::scalar / 1::float8;\n   ?column?    \n---------------\n fp64:1.000000\n(1 row)\n\nselect 1::float8 / (1::float8)::scalar;\n ?column? \n----------\n        1\n(1 row)\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::float8::scalar;\n     scalar     \n----------------\n fp64:-1.000000\n(1 row)\n\nselect '0'::float8::scalar;\n    scalar     \n---------------\n fp64:0.000000\n(1 row)\n\nselect '1'::float8::scalar;\n    scalar     \n---------------\n fp64:1.000000\n(1 row)\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::float8::scalar, 2);\n      set      \n---------------\n fp64:2.000000\n(1 row)\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_float8((-1)::float8);\n scalar_float8  \n----------------\n fp64:-1.000000\n(1 row)\n\nselect scalar_float8((0)::float8);\n scalar_float8 \n---------------\n fp64:0.000000\n(1 row)\n\nselect scalar_float8((1)::float8);\n scalar_float8 \n---------------\n fp64:1.000000\n(1 row)\n\nselect float8_scalar((-1)::float8::scalar);\n float8_scalar \n---------------\n            -1\n(1 row)\n\nselect float8_scalar((0)::float8::scalar);\n float8_scalar \n---------------\n             0\n(1 row)\n\nselect float8_scalar((1)::float8::scalar);\n float8_scalar \n---------------\n             1\n(1 row)\n</code></pre> These casting functions cast the Postgres type <code>float8</code> to the GraphBLAS scalar type <code>GrB_INT64</code>. <pre><code>select cast(-1::float8 as scalar);\n     scalar     \n----------------\n fp64:-1.000000\n(1 row)\n\nselect cast(0::float8 as scalar);\n    scalar     \n---------------\n fp64:0.000000\n(1 row)\n\nselect cast(1::float8 as scalar);\n    scalar     \n---------------\n fp64:1.000000\n(1 row)\n</code></pre> These tests cast back from the scalar type <code>GrB_INT64</code> to the Postgres type <code>float8</code> <pre><code>select cast((-1::float8)::scalar as float8);\n float8 \n--------\n     -1\n(1 row)\n\nselect cast((0::float8)::scalar as  float8);\n float8 \n--------\n      0\n(1 row)\n\nselect cast((1::float8)::scalar as scalar);\n    scalar     \n---------------\n fp64:1.000000\n(1 row)\n</code></pre></p>"},{"location":"test_scalar_op_i2/","title":"Test scalar op i2","text":""},{"location":"test_scalar_op_i2/#scalar-smallint","title":"Scalar <code>smallint</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::smallint)::scalar + -1::smallint;\n ?column? \n----------\n int16:0\n(1 row)\n\nselect 1::smallint + (-1::smallint)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::smallint)::scalar - 1::smallint;\n ?column? \n----------\n int16:0\n(1 row)\n\nselect 1::smallint - (1::smallint)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::smallint)::scalar * -1::smallint;\n ?column? \n----------\n int16:-1\n(1 row)\n\nselect 1::smallint * (-1::smallint)::scalar;\n ?column? \n----------\n       -1\n(1 row)\n\nselect (1::smallint)::scalar / 1::smallint;\n ?column? \n----------\n int16:1\n(1 row)\n\nselect 1::smallint / (1::smallint)::scalar;\n ?column? \n----------\n        1\n(1 row)\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::smallint::scalar;\n  scalar  \n----------\n int16:-1\n(1 row)\n\nselect '0'::smallint::scalar;\n scalar  \n---------\n int16:0\n(1 row)\n\nselect '1'::smallint::scalar;\n scalar  \n---------\n int16:1\n(1 row)\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::smallint::scalar, 2);\n   set   \n---------\n int16:2\n(1 row)\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_smallint((-1)::smallint);\n scalar_smallint \n-----------------\n int16:-1\n(1 row)\n\nselect scalar_smallint((0)::smallint);\n scalar_smallint \n-----------------\n int16:0\n(1 row)\n\nselect scalar_smallint((1)::smallint);\n scalar_smallint \n-----------------\n int16:1\n(1 row)\n\nselect smallint_scalar((-1)::smallint::scalar);\n smallint_scalar \n-----------------\n              -1\n(1 row)\n\nselect smallint_scalar((0)::smallint::scalar);\n smallint_scalar \n-----------------\n               0\n(1 row)\n\nselect smallint_scalar((1)::smallint::scalar);\n smallint_scalar \n-----------------\n               1\n(1 row)\n</code></pre> These casting functions cast the Postgres type <code>smallint</code> to the GraphBLAS scalar type <code>GrB_INT16</code>. <pre><code>select cast(-1::smallint as scalar);\n  scalar  \n----------\n int16:-1\n(1 row)\n\nselect cast(0::smallint as scalar);\n scalar  \n---------\n int16:0\n(1 row)\n\nselect cast(1::smallint as scalar);\n scalar  \n---------\n int16:1\n(1 row)\n</code></pre> These tests cast back from the scalar type <code>GrB_INT16</code> to the Postgres type <code>smallint</code> <pre><code>select cast((-1::smallint)::scalar as smallint);\n int2 \n------\n   -1\n(1 row)\n\nselect cast((0::smallint)::scalar as  smallint);\n int2 \n------\n    0\n(1 row)\n\nselect cast((1::smallint)::scalar as scalar);\n scalar  \n---------\n int16:1\n(1 row)\n</code></pre></p>"},{"location":"test_scalar_op_i4/","title":"Test scalar op i4","text":""},{"location":"test_scalar_op_i4/#scalar-integer","title":"Scalar <code>integer</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::integer)::scalar + -1::integer;\n ?column? \n----------\n int32:0\n(1 row)\n\nselect 1::integer + (-1::integer)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::integer)::scalar - 1::integer;\n ?column? \n----------\n int32:0\n(1 row)\n\nselect 1::integer - (1::integer)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::integer)::scalar * -1::integer;\n ?column? \n----------\n int32:-1\n(1 row)\n\nselect 1::integer * (-1::integer)::scalar;\n ?column? \n----------\n       -1\n(1 row)\n\nselect (1::integer)::scalar / 1::integer;\n ?column? \n----------\n int32:1\n(1 row)\n\nselect 1::integer / (1::integer)::scalar;\n ?column? \n----------\n        1\n(1 row)\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::integer::scalar;\n  scalar  \n----------\n int32:-1\n(1 row)\n\nselect '0'::integer::scalar;\n scalar  \n---------\n int32:0\n(1 row)\n\nselect '1'::integer::scalar;\n scalar  \n---------\n int32:1\n(1 row)\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::integer::scalar, 2);\n   set   \n---------\n int32:2\n(1 row)\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_integer((-1)::integer);\n scalar_integer \n----------------\n int32:-1\n(1 row)\n\nselect scalar_integer((0)::integer);\n scalar_integer \n----------------\n int32:0\n(1 row)\n\nselect scalar_integer((1)::integer);\n scalar_integer \n----------------\n int32:1\n(1 row)\n\nselect integer_scalar((-1)::integer::scalar);\n integer_scalar \n----------------\n             -1\n(1 row)\n\nselect integer_scalar((0)::integer::scalar);\n integer_scalar \n----------------\n              0\n(1 row)\n\nselect integer_scalar((1)::integer::scalar);\n integer_scalar \n----------------\n              1\n(1 row)\n</code></pre> These casting functions cast the Postgres type <code>integer</code> to the GraphBLAS scalar type <code>GrB_INT32</code>. <pre><code>select cast(-1::integer as scalar);\n  scalar  \n----------\n int32:-1\n(1 row)\n\nselect cast(0::integer as scalar);\n scalar  \n---------\n int32:0\n(1 row)\n\nselect cast(1::integer as scalar);\n scalar  \n---------\n int32:1\n(1 row)\n</code></pre> These tests cast back from the scalar type <code>GrB_INT32</code> to the Postgres type <code>integer</code> <pre><code>select cast((-1::integer)::scalar as integer);\n int4 \n------\n   -1\n(1 row)\n\nselect cast((0::integer)::scalar as  integer);\n int4 \n------\n    0\n(1 row)\n\nselect cast((1::integer)::scalar as scalar);\n scalar  \n---------\n int32:1\n(1 row)\n</code></pre></p>"},{"location":"test_scalar_op_i8/","title":"Test scalar op i8","text":""},{"location":"test_scalar_op_i8/#scalar-bigint","title":"Scalar <code>bigint</code>","text":"<p>Test various scalar math operations with native Postgres types <pre><code>select (1::bigint)::scalar + -1::bigint;\n ?column? \n----------\n int64:0\n(1 row)\n\nselect 1::bigint + (-1::bigint)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::bigint)::scalar - 1::bigint;\n ?column? \n----------\n int64:0\n(1 row)\n\nselect 1::bigint - (1::bigint)::scalar;\n ?column? \n----------\n        0\n(1 row)\n\nselect (1::bigint)::scalar * -1::bigint;\n ?column? \n----------\n int64:-1\n(1 row)\n\nselect 1::bigint * (-1::bigint)::scalar;\n ?column? \n----------\n       -1\n(1 row)\n\nselect (1::bigint)::scalar / 1::bigint;\n ?column? \n----------\n int64:1\n(1 row)\n\nselect 1::bigint / (1::bigint)::scalar;\n ?column? \n----------\n        1\n(1 row)\n</code></pre> Test construction of min, zero and max values: <pre><code>select '-1'::bigint::scalar;\n  scalar  \n----------\n int64:-1\n(1 row)\n\nselect '0'::bigint::scalar;\n scalar  \n---------\n int64:0\n(1 row)\n\nselect '1'::bigint::scalar;\n scalar  \n---------\n int64:1\n(1 row)\n</code></pre> Test setting a scalar value from max to 2 <pre><code>select set('1'::bigint::scalar, 2);\n   set   \n---------\n int64:2\n(1 row)\n</code></pre> Test various casting functions used by the CREATE CAST machinery: <pre><code>select scalar_bigint((-1)::bigint);\n scalar_bigint \n---------------\n int64:-1\n(1 row)\n\nselect scalar_bigint((0)::bigint);\n scalar_bigint \n---------------\n int64:0\n(1 row)\n\nselect scalar_bigint((1)::bigint);\n scalar_bigint \n---------------\n int64:1\n(1 row)\n\nselect bigint_scalar((-1)::bigint::scalar);\n bigint_scalar \n---------------\n            -1\n(1 row)\n\nselect bigint_scalar((0)::bigint::scalar);\n bigint_scalar \n---------------\n             0\n(1 row)\n\nselect bigint_scalar((1)::bigint::scalar);\n bigint_scalar \n---------------\n             1\n(1 row)\n</code></pre> These casting functions cast the Postgres type <code>bigint</code> to the GraphBLAS scalar type <code>GrB_INT64</code>. <pre><code>select cast(-1::bigint as scalar);\n  scalar  \n----------\n int64:-1\n(1 row)\n\nselect cast(0::bigint as scalar);\n scalar  \n---------\n int64:0\n(1 row)\n\nselect cast(1::bigint as scalar);\n scalar  \n---------\n int64:1\n(1 row)\n</code></pre> These tests cast back from the scalar type <code>GrB_INT64</code> to the Postgres type <code>bigint</code> <pre><code>select cast((-1::bigint)::scalar as bigint);\n int8 \n------\n   -1\n(1 row)\n\nselect cast((0::bigint)::scalar as  bigint);\n int8 \n------\n    0\n(1 row)\n\nselect cast((1::bigint)::scalar as scalar);\n scalar  \n---------\n int64:1\n(1 row)\n</code></pre></p>"},{"location":"test_semiring_header/","title":"Semiring","text":"<p>Semirings associate additive and multiplicative operators for matrix multiplication.</p> OneSparse Name SuiteSparse Name min_first_int8 GxB_MIN_FIRST_INT8 max_first_int8 GxB_MAX_FIRST_INT8 plus_first_int8 GxB_PLUS_FIRST_INT8 times_first_int8 GxB_TIMES_FIRST_INT8 any_first_int8 GxB_ANY_FIRST_INT8 min_first_int16 GxB_MIN_FIRST_INT16 max_first_int16 GxB_MAX_FIRST_INT16 plus_first_int16 GxB_PLUS_FIRST_INT16 times_first_int16 GxB_TIMES_FIRST_INT16 any_first_int16 GxB_ANY_FIRST_INT16 min_first_int32 GxB_MIN_FIRST_INT32 max_first_int32 GxB_MAX_FIRST_INT32 plus_first_int32 GxB_PLUS_FIRST_INT32 times_first_int32 GxB_TIMES_FIRST_INT32 any_first_int32 GxB_ANY_FIRST_INT32 min_first_int64 GxB_MIN_FIRST_INT64 max_first_int64 GxB_MAX_FIRST_INT64 plus_first_int64 GxB_PLUS_FIRST_INT64 times_first_int64 GxB_TIMES_FIRST_INT64 any_first_int64 GxB_ANY_FIRST_INT64 min_first_uint8 GxB_MIN_FIRST_UINT8 max_first_uint8 GxB_MAX_FIRST_UINT8 plus_first_uint8 GxB_PLUS_FIRST_UINT8 times_first_uint8 GxB_TIMES_FIRST_UINT8 any_first_uint8 GxB_ANY_FIRST_UINT8 min_first_uint16 GxB_MIN_FIRST_UINT16 max_first_uint16 GxB_MAX_FIRST_UINT16 plus_first_uint16 GxB_PLUS_FIRST_UINT16 times_first_uint16 GxB_TIMES_FIRST_UINT16 any_first_uint16 GxB_ANY_FIRST_UINT16 min_first_uint32 GxB_MIN_FIRST_UINT32 max_first_uint32 GxB_MAX_FIRST_UINT32 plus_first_uint32 GxB_PLUS_FIRST_UINT32 times_first_uint32 GxB_TIMES_FIRST_UINT32 any_first_uint32 GxB_ANY_FIRST_UINT32 min_first_uint64 GxB_MIN_FIRST_UINT64 max_first_uint64 GxB_MAX_FIRST_UINT64 plus_first_uint64 GxB_PLUS_FIRST_UINT64 times_first_uint64 GxB_TIMES_FIRST_UINT64 any_first_uint64 GxB_ANY_FIRST_UINT64 min_first_fp32 GxB_MIN_FIRST_FP32 max_first_fp32 GxB_MAX_FIRST_FP32 plus_first_fp32 GxB_PLUS_FIRST_FP32 times_first_fp32 GxB_TIMES_FIRST_FP32 any_first_fp32 GxB_ANY_FIRST_FP32 min_first_fp64 GxB_MIN_FIRST_FP64 max_first_fp64 GxB_MAX_FIRST_FP64 plus_first_fp64 GxB_PLUS_FIRST_FP64 times_first_fp64 GxB_TIMES_FIRST_FP64 any_first_fp64 GxB_ANY_FIRST_FP64 min_second_int8 GxB_MIN_SECOND_INT8 max_second_int8 GxB_MAX_SECOND_INT8 plus_second_int8 GxB_PLUS_SECOND_INT8 times_second_int8 GxB_TIMES_SECOND_INT8 any_second_int8 GxB_ANY_SECOND_INT8 min_second_int16 GxB_MIN_SECOND_INT16 max_second_int16 GxB_MAX_SECOND_INT16 plus_second_int16 GxB_PLUS_SECOND_INT16 times_second_int16 GxB_TIMES_SECOND_INT16 any_second_int16 GxB_ANY_SECOND_INT16 min_second_int32 GxB_MIN_SECOND_INT32 max_second_int32 GxB_MAX_SECOND_INT32 plus_second_int32 GxB_PLUS_SECOND_INT32 times_second_int32 GxB_TIMES_SECOND_INT32 any_second_int32 GxB_ANY_SECOND_INT32 min_second_int64 GxB_MIN_SECOND_INT64 max_second_int64 GxB_MAX_SECOND_INT64 plus_second_int64 GxB_PLUS_SECOND_INT64 times_second_int64 GxB_TIMES_SECOND_INT64 any_second_int64 GxB_ANY_SECOND_INT64 min_second_uint8 GxB_MIN_SECOND_UINT8 max_second_uint8 GxB_MAX_SECOND_UINT8 plus_second_uint8 GxB_PLUS_SECOND_UINT8 times_second_uint8 GxB_TIMES_SECOND_UINT8 any_second_uint8 GxB_ANY_SECOND_UINT8 min_second_uint16 GxB_MIN_SECOND_UINT16 max_second_uint16 GxB_MAX_SECOND_UINT16 plus_second_uint16 GxB_PLUS_SECOND_UINT16 times_second_uint16 GxB_TIMES_SECOND_UINT16 any_second_uint16 GxB_ANY_SECOND_UINT16 min_second_uint32 GxB_MIN_SECOND_UINT32 max_second_uint32 GxB_MAX_SECOND_UINT32 plus_second_uint32 GxB_PLUS_SECOND_UINT32 times_second_uint32 GxB_TIMES_SECOND_UINT32 any_second_uint32 GxB_ANY_SECOND_UINT32 min_second_uint64 GxB_MIN_SECOND_UINT64 max_second_uint64 GxB_MAX_SECOND_UINT64 plus_second_uint64 GxB_PLUS_SECOND_UINT64 times_second_uint64 GxB_TIMES_SECOND_UINT64 any_second_uint64 GxB_ANY_SECOND_UINT64 min_second_fp32 GxB_MIN_SECOND_FP32 max_second_fp32 GxB_MAX_SECOND_FP32 plus_second_fp32 GxB_PLUS_SECOND_FP32 times_second_fp32 GxB_TIMES_SECOND_FP32 any_second_fp32 GxB_ANY_SECOND_FP32 min_second_fp64 GxB_MIN_SECOND_FP64 max_second_fp64 GxB_MAX_SECOND_FP64 plus_second_fp64 GxB_PLUS_SECOND_FP64 times_second_fp64 GxB_TIMES_SECOND_FP64 any_second_fp64 GxB_ANY_SECOND_FP64 min_pair_int8 GxB_MIN_PAIR_INT8 max_pair_int8 GxB_MAX_PAIR_INT8 plus_pair_int8 GxB_PLUS_PAIR_INT8 times_pair_int8 GxB_TIMES_PAIR_INT8 any_pair_int8 GxB_ANY_PAIR_INT8 min_pair_int16 GxB_MIN_PAIR_INT16 max_pair_int16 GxB_MAX_PAIR_INT16 plus_pair_int16 GxB_PLUS_PAIR_INT16 times_pair_int16 GxB_TIMES_PAIR_INT16 any_pair_int16 GxB_ANY_PAIR_INT16 min_pair_int32 GxB_MIN_PAIR_INT32 max_pair_int32 GxB_MAX_PAIR_INT32 plus_pair_int32 GxB_PLUS_PAIR_INT32 times_pair_int32 GxB_TIMES_PAIR_INT32 any_pair_int32 GxB_ANY_PAIR_INT32 min_pair_int64 GxB_MIN_PAIR_INT64 max_pair_int64 GxB_MAX_PAIR_INT64 plus_pair_int64 GxB_PLUS_PAIR_INT64 times_pair_int64 GxB_TIMES_PAIR_INT64 any_pair_int64 GxB_ANY_PAIR_INT64 min_pair_uint8 GxB_MIN_PAIR_UINT8 max_pair_uint8 GxB_MAX_PAIR_UINT8 plus_pair_uint8 GxB_PLUS_PAIR_UINT8 times_pair_uint8 GxB_TIMES_PAIR_UINT8 any_pair_uint8 GxB_ANY_PAIR_UINT8 min_pair_uint16 GxB_MIN_PAIR_UINT16 max_pair_uint16 GxB_MAX_PAIR_UINT16 plus_pair_uint16 GxB_PLUS_PAIR_UINT16 times_pair_uint16 GxB_TIMES_PAIR_UINT16 any_pair_uint16 GxB_ANY_PAIR_UINT16 min_pair_uint32 GxB_MIN_PAIR_UINT32 max_pair_uint32 GxB_MAX_PAIR_UINT32 plus_pair_uint32 GxB_PLUS_PAIR_UINT32 times_pair_uint32 GxB_TIMES_PAIR_UINT32 any_pair_uint32 GxB_ANY_PAIR_UINT32 min_pair_uint64 GxB_MIN_PAIR_UINT64 max_pair_uint64 GxB_MAX_PAIR_UINT64 plus_pair_uint64 GxB_PLUS_PAIR_UINT64 times_pair_uint64 GxB_TIMES_PAIR_UINT64 any_pair_uint64 GxB_ANY_PAIR_UINT64 min_pair_fp32 GxB_MIN_PAIR_FP32 max_pair_fp32 GxB_MAX_PAIR_FP32 plus_pair_fp32 GxB_PLUS_PAIR_FP32 times_pair_fp32 GxB_TIMES_PAIR_FP32 any_pair_fp32 GxB_ANY_PAIR_FP32 min_pair_fp64 GxB_MIN_PAIR_FP64 max_pair_fp64 GxB_MAX_PAIR_FP64 plus_pair_fp64 GxB_PLUS_PAIR_FP64 times_pair_fp64 GxB_TIMES_PAIR_FP64 any_pair_fp64 GxB_ANY_PAIR_FP64 min_min_int8 GxB_MIN_MIN_INT8 max_min_int8 GxB_MAX_MIN_INT8 plus_min_int8 GxB_PLUS_MIN_INT8 times_min_int8 GxB_TIMES_MIN_INT8 any_min_int8 GxB_ANY_MIN_INT8 min_min_int16 GxB_MIN_MIN_INT16 max_min_int16 GxB_MAX_MIN_INT16 plus_min_int16 GxB_PLUS_MIN_INT16 times_min_int16 GxB_TIMES_MIN_INT16 any_min_int16 GxB_ANY_MIN_INT16 min_min_int32 GxB_MIN_MIN_INT32 max_min_int32 GxB_MAX_MIN_INT32 plus_min_int32 GxB_PLUS_MIN_INT32 times_min_int32 GxB_TIMES_MIN_INT32 any_min_int32 GxB_ANY_MIN_INT32 min_min_int64 GxB_MIN_MIN_INT64 max_min_int64 GxB_MAX_MIN_INT64 plus_min_int64 GxB_PLUS_MIN_INT64 times_min_int64 GxB_TIMES_MIN_INT64 any_min_int64 GxB_ANY_MIN_INT64 min_min_uint8 GxB_MIN_MIN_UINT8 max_min_uint8 GxB_MAX_MIN_UINT8 plus_min_uint8 GxB_PLUS_MIN_UINT8 times_min_uint8 GxB_TIMES_MIN_UINT8 any_min_uint8 GxB_ANY_MIN_UINT8 min_min_uint16 GxB_MIN_MIN_UINT16 max_min_uint16 GxB_MAX_MIN_UINT16 plus_min_uint16 GxB_PLUS_MIN_UINT16 times_min_uint16 GxB_TIMES_MIN_UINT16 any_min_uint16 GxB_ANY_MIN_UINT16 min_min_uint32 GxB_MIN_MIN_UINT32 max_min_uint32 GxB_MAX_MIN_UINT32 plus_min_uint32 GxB_PLUS_MIN_UINT32 times_min_uint32 GxB_TIMES_MIN_UINT32 any_min_uint32 GxB_ANY_MIN_UINT32 min_min_uint64 GxB_MIN_MIN_UINT64 max_min_uint64 GxB_MAX_MIN_UINT64 plus_min_uint64 GxB_PLUS_MIN_UINT64 times_min_uint64 GxB_TIMES_MIN_UINT64 any_min_uint64 GxB_ANY_MIN_UINT64 min_min_fp32 GxB_MIN_MIN_FP32 max_min_fp32 GxB_MAX_MIN_FP32 plus_min_fp32 GxB_PLUS_MIN_FP32 times_min_fp32 GxB_TIMES_MIN_FP32 any_min_fp32 GxB_ANY_MIN_FP32 min_min_fp64 GxB_MIN_MIN_FP64 max_min_fp64 GxB_MAX_MIN_FP64 plus_min_fp64 GxB_PLUS_MIN_FP64 times_min_fp64 GxB_TIMES_MIN_FP64 any_min_fp64 GxB_ANY_MIN_FP64 min_max_int8 GxB_MIN_MAX_INT8 max_max_int8 GxB_MAX_MAX_INT8 plus_max_int8 GxB_PLUS_MAX_INT8 times_max_int8 GxB_TIMES_MAX_INT8 any_max_int8 GxB_ANY_MAX_INT8 min_max_int16 GxB_MIN_MAX_INT16 max_max_int16 GxB_MAX_MAX_INT16 plus_max_int16 GxB_PLUS_MAX_INT16 times_max_int16 GxB_TIMES_MAX_INT16 any_max_int16 GxB_ANY_MAX_INT16 min_max_int32 GxB_MIN_MAX_INT32 max_max_int32 GxB_MAX_MAX_INT32 plus_max_int32 GxB_PLUS_MAX_INT32 times_max_int32 GxB_TIMES_MAX_INT32 any_max_int32 GxB_ANY_MAX_INT32 min_max_int64 GxB_MIN_MAX_INT64 max_max_int64 GxB_MAX_MAX_INT64 plus_max_int64 GxB_PLUS_MAX_INT64 times_max_int64 GxB_TIMES_MAX_INT64 any_max_int64 GxB_ANY_MAX_INT64 min_max_uint8 GxB_MIN_MAX_UINT8 max_max_uint8 GxB_MAX_MAX_UINT8 plus_max_uint8 GxB_PLUS_MAX_UINT8 times_max_uint8 GxB_TIMES_MAX_UINT8 any_max_uint8 GxB_ANY_MAX_UINT8 min_max_uint16 GxB_MIN_MAX_UINT16 max_max_uint16 GxB_MAX_MAX_UINT16 plus_max_uint16 GxB_PLUS_MAX_UINT16 times_max_uint16 GxB_TIMES_MAX_UINT16 any_max_uint16 GxB_ANY_MAX_UINT16 min_max_uint32 GxB_MIN_MAX_UINT32 max_max_uint32 GxB_MAX_MAX_UINT32 plus_max_uint32 GxB_PLUS_MAX_UINT32 times_max_uint32 GxB_TIMES_MAX_UINT32 any_max_uint32 GxB_ANY_MAX_UINT32 min_max_uint64 GxB_MIN_MAX_UINT64 max_max_uint64 GxB_MAX_MAX_UINT64 plus_max_uint64 GxB_PLUS_MAX_UINT64 times_max_uint64 GxB_TIMES_MAX_UINT64 any_max_uint64 GxB_ANY_MAX_UINT64 min_max_fp32 GxB_MIN_MAX_FP32 max_max_fp32 GxB_MAX_MAX_FP32 plus_max_fp32 GxB_PLUS_MAX_FP32 times_max_fp32 GxB_TIMES_MAX_FP32 any_max_fp32 GxB_ANY_MAX_FP32 min_max_fp64 GxB_MIN_MAX_FP64 max_max_fp64 GxB_MAX_MAX_FP64 plus_max_fp64 GxB_PLUS_MAX_FP64 times_max_fp64 GxB_TIMES_MAX_FP64 any_max_fp64 GxB_ANY_MAX_FP64 min_plus_int8 GxB_MIN_PLUS_INT8 max_plus_int8 GxB_MAX_PLUS_INT8 plus_plus_int8 GxB_PLUS_PLUS_INT8 times_plus_int8 GxB_TIMES_PLUS_INT8 any_plus_int8 GxB_ANY_PLUS_INT8 min_plus_int16 GxB_MIN_PLUS_INT16 max_plus_int16 GxB_MAX_PLUS_INT16 plus_plus_int16 GxB_PLUS_PLUS_INT16 times_plus_int16 GxB_TIMES_PLUS_INT16 any_plus_int16 GxB_ANY_PLUS_INT16 min_plus_int32 GxB_MIN_PLUS_INT32 max_plus_int32 GxB_MAX_PLUS_INT32 plus_plus_int32 GxB_PLUS_PLUS_INT32 times_plus_int32 GxB_TIMES_PLUS_INT32 any_plus_int32 GxB_ANY_PLUS_INT32 min_plus_int64 GxB_MIN_PLUS_INT64 max_plus_int64 GxB_MAX_PLUS_INT64 plus_plus_int64 GxB_PLUS_PLUS_INT64 times_plus_int64 GxB_TIMES_PLUS_INT64 any_plus_int64 GxB_ANY_PLUS_INT64 min_plus_uint8 GxB_MIN_PLUS_UINT8 max_plus_uint8 GxB_MAX_PLUS_UINT8 plus_plus_uint8 GxB_PLUS_PLUS_UINT8 times_plus_uint8 GxB_TIMES_PLUS_UINT8 any_plus_uint8 GxB_ANY_PLUS_UINT8 min_plus_uint16 GxB_MIN_PLUS_UINT16 max_plus_uint16 GxB_MAX_PLUS_UINT16 plus_plus_uint16 GxB_PLUS_PLUS_UINT16 times_plus_uint16 GxB_TIMES_PLUS_UINT16 any_plus_uint16 GxB_ANY_PLUS_UINT16 min_plus_uint32 GxB_MIN_PLUS_UINT32 max_plus_uint32 GxB_MAX_PLUS_UINT32 plus_plus_uint32 GxB_PLUS_PLUS_UINT32 times_plus_uint32 GxB_TIMES_PLUS_UINT32 any_plus_uint32 GxB_ANY_PLUS_UINT32 min_plus_uint64 GxB_MIN_PLUS_UINT64 max_plus_uint64 GxB_MAX_PLUS_UINT64 plus_plus_uint64 GxB_PLUS_PLUS_UINT64 times_plus_uint64 GxB_TIMES_PLUS_UINT64 any_plus_uint64 GxB_ANY_PLUS_UINT64 min_plus_fp32 GxB_MIN_PLUS_FP32 max_plus_fp32 GxB_MAX_PLUS_FP32 plus_plus_fp32 GxB_PLUS_PLUS_FP32 times_plus_fp32 GxB_TIMES_PLUS_FP32 any_plus_fp32 GxB_ANY_PLUS_FP32 min_plus_fp64 GxB_MIN_PLUS_FP64 max_plus_fp64 GxB_MAX_PLUS_FP64 plus_plus_fp64 GxB_PLUS_PLUS_FP64 times_plus_fp64 GxB_TIMES_PLUS_FP64 any_plus_fp64 GxB_ANY_PLUS_FP64 min_minus_int8 GxB_MIN_MINUS_INT8 max_minus_int8 GxB_MAX_MINUS_INT8 plus_minus_int8 GxB_PLUS_MINUS_INT8 times_minus_int8 GxB_TIMES_MINUS_INT8 any_minus_int8 GxB_ANY_MINUS_INT8 min_minus_int16 GxB_MIN_MINUS_INT16 max_minus_int16 GxB_MAX_MINUS_INT16 plus_minus_int16 GxB_PLUS_MINUS_INT16 times_minus_int16 GxB_TIMES_MINUS_INT16 any_minus_int16 GxB_ANY_MINUS_INT16 min_minus_int32 GxB_MIN_MINUS_INT32 max_minus_int32 GxB_MAX_MINUS_INT32 plus_minus_int32 GxB_PLUS_MINUS_INT32 times_minus_int32 GxB_TIMES_MINUS_INT32 any_minus_int32 GxB_ANY_MINUS_INT32 min_minus_int64 GxB_MIN_MINUS_INT64 max_minus_int64 GxB_MAX_MINUS_INT64 plus_minus_int64 GxB_PLUS_MINUS_INT64 times_minus_int64 GxB_TIMES_MINUS_INT64 any_minus_int64 GxB_ANY_MINUS_INT64 min_minus_uint8 GxB_MIN_MINUS_UINT8 max_minus_uint8 GxB_MAX_MINUS_UINT8 plus_minus_uint8 GxB_PLUS_MINUS_UINT8 times_minus_uint8 GxB_TIMES_MINUS_UINT8 any_minus_uint8 GxB_ANY_MINUS_UINT8 min_minus_uint16 GxB_MIN_MINUS_UINT16 max_minus_uint16 GxB_MAX_MINUS_UINT16 plus_minus_uint16 GxB_PLUS_MINUS_UINT16 times_minus_uint16 GxB_TIMES_MINUS_UINT16 any_minus_uint16 GxB_ANY_MINUS_UINT16 min_minus_uint32 GxB_MIN_MINUS_UINT32 max_minus_uint32 GxB_MAX_MINUS_UINT32 plus_minus_uint32 GxB_PLUS_MINUS_UINT32 times_minus_uint32 GxB_TIMES_MINUS_UINT32 any_minus_uint32 GxB_ANY_MINUS_UINT32 min_minus_uint64 GxB_MIN_MINUS_UINT64 max_minus_uint64 GxB_MAX_MINUS_UINT64 plus_minus_uint64 GxB_PLUS_MINUS_UINT64 times_minus_uint64 GxB_TIMES_MINUS_UINT64 any_minus_uint64 GxB_ANY_MINUS_UINT64 min_minus_fp32 GxB_MIN_MINUS_FP32 max_minus_fp32 GxB_MAX_MINUS_FP32 plus_minus_fp32 GxB_PLUS_MINUS_FP32 times_minus_fp32 GxB_TIMES_MINUS_FP32 any_minus_fp32 GxB_ANY_MINUS_FP32 min_minus_fp64 GxB_MIN_MINUS_FP64 max_minus_fp64 GxB_MAX_MINUS_FP64 plus_minus_fp64 GxB_PLUS_MINUS_FP64 times_minus_fp64 GxB_TIMES_MINUS_FP64 any_minus_fp64 GxB_ANY_MINUS_FP64 min_times_int8 GxB_MIN_TIMES_INT8 max_times_int8 GxB_MAX_TIMES_INT8 plus_times_int8 GxB_PLUS_TIMES_INT8 times_times_int8 GxB_TIMES_TIMES_INT8 any_times_int8 GxB_ANY_TIMES_INT8 min_times_int16 GxB_MIN_TIMES_INT16 max_times_int16 GxB_MAX_TIMES_INT16 plus_times_int16 GxB_PLUS_TIMES_INT16 times_times_int16 GxB_TIMES_TIMES_INT16 any_times_int16 GxB_ANY_TIMES_INT16 min_times_int32 GxB_MIN_TIMES_INT32 max_times_int32 GxB_MAX_TIMES_INT32 plus_times_int32 GxB_PLUS_TIMES_INT32 times_times_int32 GxB_TIMES_TIMES_INT32 any_times_int32 GxB_ANY_TIMES_INT32 min_times_int64 GxB_MIN_TIMES_INT64 max_times_int64 GxB_MAX_TIMES_INT64 plus_times_int64 GxB_PLUS_TIMES_INT64 times_times_int64 GxB_TIMES_TIMES_INT64 any_times_int64 GxB_ANY_TIMES_INT64 min_times_uint8 GxB_MIN_TIMES_UINT8 max_times_uint8 GxB_MAX_TIMES_UINT8 plus_times_uint8 GxB_PLUS_TIMES_UINT8 times_times_uint8 GxB_TIMES_TIMES_UINT8 any_times_uint8 GxB_ANY_TIMES_UINT8 min_times_uint16 GxB_MIN_TIMES_UINT16 max_times_uint16 GxB_MAX_TIMES_UINT16 plus_times_uint16 GxB_PLUS_TIMES_UINT16 times_times_uint16 GxB_TIMES_TIMES_UINT16 any_times_uint16 GxB_ANY_TIMES_UINT16 min_times_uint32 GxB_MIN_TIMES_UINT32 max_times_uint32 GxB_MAX_TIMES_UINT32 plus_times_uint32 GxB_PLUS_TIMES_UINT32 times_times_uint32 GxB_TIMES_TIMES_UINT32 any_times_uint32 GxB_ANY_TIMES_UINT32 min_times_uint64 GxB_MIN_TIMES_UINT64 max_times_uint64 GxB_MAX_TIMES_UINT64 plus_times_uint64 GxB_PLUS_TIMES_UINT64 times_times_uint64 GxB_TIMES_TIMES_UINT64 any_times_uint64 GxB_ANY_TIMES_UINT64 min_times_fp32 GxB_MIN_TIMES_FP32 max_times_fp32 GxB_MAX_TIMES_FP32 plus_times_fp32 GxB_PLUS_TIMES_FP32 times_times_fp32 GxB_TIMES_TIMES_FP32 any_times_fp32 GxB_ANY_TIMES_FP32 min_times_fp64 GxB_MIN_TIMES_FP64 max_times_fp64 GxB_MAX_TIMES_FP64 plus_times_fp64 GxB_PLUS_TIMES_FP64 times_times_fp64 GxB_TIMES_TIMES_FP64 any_times_fp64 GxB_ANY_TIMES_FP64 min_div_int8 GxB_MIN_DIV_INT8 max_div_int8 GxB_MAX_DIV_INT8 plus_div_int8 GxB_PLUS_DIV_INT8 times_div_int8 GxB_TIMES_DIV_INT8 any_div_int8 GxB_ANY_DIV_INT8 min_div_int16 GxB_MIN_DIV_INT16 max_div_int16 GxB_MAX_DIV_INT16 plus_div_int16 GxB_PLUS_DIV_INT16 times_div_int16 GxB_TIMES_DIV_INT16 any_div_int16 GxB_ANY_DIV_INT16 min_div_int32 GxB_MIN_DIV_INT32 max_div_int32 GxB_MAX_DIV_INT32 plus_div_int32 GxB_PLUS_DIV_INT32 times_div_int32 GxB_TIMES_DIV_INT32 any_div_int32 GxB_ANY_DIV_INT32 min_div_int64 GxB_MIN_DIV_INT64 max_div_int64 GxB_MAX_DIV_INT64 plus_div_int64 GxB_PLUS_DIV_INT64 times_div_int64 GxB_TIMES_DIV_INT64 any_div_int64 GxB_ANY_DIV_INT64 min_div_uint8 GxB_MIN_DIV_UINT8 max_div_uint8 GxB_MAX_DIV_UINT8 plus_div_uint8 GxB_PLUS_DIV_UINT8 times_div_uint8 GxB_TIMES_DIV_UINT8 any_div_uint8 GxB_ANY_DIV_UINT8 min_div_uint16 GxB_MIN_DIV_UINT16 max_div_uint16 GxB_MAX_DIV_UINT16 plus_div_uint16 GxB_PLUS_DIV_UINT16 times_div_uint16 GxB_TIMES_DIV_UINT16 any_div_uint16 GxB_ANY_DIV_UINT16 min_div_uint32 GxB_MIN_DIV_UINT32 max_div_uint32 GxB_MAX_DIV_UINT32 plus_div_uint32 GxB_PLUS_DIV_UINT32 times_div_uint32 GxB_TIMES_DIV_UINT32 any_div_uint32 GxB_ANY_DIV_UINT32 min_div_uint64 GxB_MIN_DIV_UINT64 max_div_uint64 GxB_MAX_DIV_UINT64 plus_div_uint64 GxB_PLUS_DIV_UINT64 times_div_uint64 GxB_TIMES_DIV_UINT64 any_div_uint64 GxB_ANY_DIV_UINT64 min_div_fp32 GxB_MIN_DIV_FP32 max_div_fp32 GxB_MAX_DIV_FP32 plus_div_fp32 GxB_PLUS_DIV_FP32 times_div_fp32 GxB_TIMES_DIV_FP32 any_div_fp32 GxB_ANY_DIV_FP32 min_div_fp64 GxB_MIN_DIV_FP64 max_div_fp64 GxB_MAX_DIV_FP64 plus_div_fp64 GxB_PLUS_DIV_FP64 times_div_fp64 GxB_TIMES_DIV_FP64 any_div_fp64 GxB_ANY_DIV_FP64 min_rdiv_int8 GxB_MIN_RDIV_INT8 max_rdiv_int8 GxB_MAX_RDIV_INT8 plus_rdiv_int8 GxB_PLUS_RDIV_INT8 times_rdiv_int8 GxB_TIMES_RDIV_INT8 any_rdiv_int8 GxB_ANY_RDIV_INT8 min_rdiv_int16 GxB_MIN_RDIV_INT16 max_rdiv_int16 GxB_MAX_RDIV_INT16 plus_rdiv_int16 GxB_PLUS_RDIV_INT16 times_rdiv_int16 GxB_TIMES_RDIV_INT16 any_rdiv_int16 GxB_ANY_RDIV_INT16 min_rdiv_int32 GxB_MIN_RDIV_INT32 max_rdiv_int32 GxB_MAX_RDIV_INT32 plus_rdiv_int32 GxB_PLUS_RDIV_INT32 times_rdiv_int32 GxB_TIMES_RDIV_INT32 any_rdiv_int32 GxB_ANY_RDIV_INT32 min_rdiv_int64 GxB_MIN_RDIV_INT64 max_rdiv_int64 GxB_MAX_RDIV_INT64 plus_rdiv_int64 GxB_PLUS_RDIV_INT64 times_rdiv_int64 GxB_TIMES_RDIV_INT64 any_rdiv_int64 GxB_ANY_RDIV_INT64 min_rdiv_uint8 GxB_MIN_RDIV_UINT8 max_rdiv_uint8 GxB_MAX_RDIV_UINT8 plus_rdiv_uint8 GxB_PLUS_RDIV_UINT8 times_rdiv_uint8 GxB_TIMES_RDIV_UINT8 any_rdiv_uint8 GxB_ANY_RDIV_UINT8 min_rdiv_uint16 GxB_MIN_RDIV_UINT16 max_rdiv_uint16 GxB_MAX_RDIV_UINT16 plus_rdiv_uint16 GxB_PLUS_RDIV_UINT16 times_rdiv_uint16 GxB_TIMES_RDIV_UINT16 any_rdiv_uint16 GxB_ANY_RDIV_UINT16 min_rdiv_uint32 GxB_MIN_RDIV_UINT32 max_rdiv_uint32 GxB_MAX_RDIV_UINT32 plus_rdiv_uint32 GxB_PLUS_RDIV_UINT32 times_rdiv_uint32 GxB_TIMES_RDIV_UINT32 any_rdiv_uint32 GxB_ANY_RDIV_UINT32 min_rdiv_uint64 GxB_MIN_RDIV_UINT64 max_rdiv_uint64 GxB_MAX_RDIV_UINT64 plus_rdiv_uint64 GxB_PLUS_RDIV_UINT64 times_rdiv_uint64 GxB_TIMES_RDIV_UINT64 any_rdiv_uint64 GxB_ANY_RDIV_UINT64 min_rdiv_fp32 GxB_MIN_RDIV_FP32 max_rdiv_fp32 GxB_MAX_RDIV_FP32 plus_rdiv_fp32 GxB_PLUS_RDIV_FP32 times_rdiv_fp32 GxB_TIMES_RDIV_FP32 any_rdiv_fp32 GxB_ANY_RDIV_FP32 min_rdiv_fp64 GxB_MIN_RDIV_FP64 max_rdiv_fp64 GxB_MAX_RDIV_FP64 plus_rdiv_fp64 GxB_PLUS_RDIV_FP64 times_rdiv_fp64 GxB_TIMES_RDIV_FP64 any_rdiv_fp64 GxB_ANY_RDIV_FP64 min_rminus_int8 GxB_MIN_RMINUS_INT8 max_rminus_int8 GxB_MAX_RMINUS_INT8 plus_rminus_int8 GxB_PLUS_RMINUS_INT8 times_rminus_int8 GxB_TIMES_RMINUS_INT8 any_rminus_int8 GxB_ANY_RMINUS_INT8 min_rminus_int16 GxB_MIN_RMINUS_INT16 max_rminus_int16 GxB_MAX_RMINUS_INT16 plus_rminus_int16 GxB_PLUS_RMINUS_INT16 times_rminus_int16 GxB_TIMES_RMINUS_INT16 any_rminus_int16 GxB_ANY_RMINUS_INT16 min_rminus_int32 GxB_MIN_RMINUS_INT32 max_rminus_int32 GxB_MAX_RMINUS_INT32 plus_rminus_int32 GxB_PLUS_RMINUS_INT32 times_rminus_int32 GxB_TIMES_RMINUS_INT32 any_rminus_int32 GxB_ANY_RMINUS_INT32 min_rminus_int64 GxB_MIN_RMINUS_INT64 max_rminus_int64 GxB_MAX_RMINUS_INT64 plus_rminus_int64 GxB_PLUS_RMINUS_INT64 times_rminus_int64 GxB_TIMES_RMINUS_INT64 any_rminus_int64 GxB_ANY_RMINUS_INT64 min_rminus_uint8 GxB_MIN_RMINUS_UINT8 max_rminus_uint8 GxB_MAX_RMINUS_UINT8 plus_rminus_uint8 GxB_PLUS_RMINUS_UINT8 times_rminus_uint8 GxB_TIMES_RMINUS_UINT8 any_rminus_uint8 GxB_ANY_RMINUS_UINT8 min_rminus_uint16 GxB_MIN_RMINUS_UINT16 max_rminus_uint16 GxB_MAX_RMINUS_UINT16 plus_rminus_uint16 GxB_PLUS_RMINUS_UINT16 times_rminus_uint16 GxB_TIMES_RMINUS_UINT16 any_rminus_uint16 GxB_ANY_RMINUS_UINT16 min_rminus_uint32 GxB_MIN_RMINUS_UINT32 max_rminus_uint32 GxB_MAX_RMINUS_UINT32 plus_rminus_uint32 GxB_PLUS_RMINUS_UINT32 times_rminus_uint32 GxB_TIMES_RMINUS_UINT32 any_rminus_uint32 GxB_ANY_RMINUS_UINT32 min_rminus_uint64 GxB_MIN_RMINUS_UINT64 max_rminus_uint64 GxB_MAX_RMINUS_UINT64 plus_rminus_uint64 GxB_PLUS_RMINUS_UINT64 times_rminus_uint64 GxB_TIMES_RMINUS_UINT64 any_rminus_uint64 GxB_ANY_RMINUS_UINT64 min_rminus_fp32 GxB_MIN_RMINUS_FP32 max_rminus_fp32 GxB_MAX_RMINUS_FP32 plus_rminus_fp32 GxB_PLUS_RMINUS_FP32 times_rminus_fp32 GxB_TIMES_RMINUS_FP32 any_rminus_fp32 GxB_ANY_RMINUS_FP32 min_rminus_fp64 GxB_MIN_RMINUS_FP64 max_rminus_fp64 GxB_MAX_RMINUS_FP64 plus_rminus_fp64 GxB_PLUS_RMINUS_FP64 times_rminus_fp64 GxB_TIMES_RMINUS_FP64 any_rminus_fp64 GxB_ANY_RMINUS_FP64 min_iseq_int8 GxB_MIN_ISEQ_INT8 max_iseq_int8 GxB_MAX_ISEQ_INT8 plus_iseq_int8 GxB_PLUS_ISEQ_INT8 times_iseq_int8 GxB_TIMES_ISEQ_INT8 any_iseq_int8 GxB_ANY_ISEQ_INT8 min_iseq_int16 GxB_MIN_ISEQ_INT16 max_iseq_int16 GxB_MAX_ISEQ_INT16 plus_iseq_int16 GxB_PLUS_ISEQ_INT16 times_iseq_int16 GxB_TIMES_ISEQ_INT16 any_iseq_int16 GxB_ANY_ISEQ_INT16 min_iseq_int32 GxB_MIN_ISEQ_INT32 max_iseq_int32 GxB_MAX_ISEQ_INT32 plus_iseq_int32 GxB_PLUS_ISEQ_INT32 times_iseq_int32 GxB_TIMES_ISEQ_INT32 any_iseq_int32 GxB_ANY_ISEQ_INT32 min_iseq_int64 GxB_MIN_ISEQ_INT64 max_iseq_int64 GxB_MAX_ISEQ_INT64 plus_iseq_int64 GxB_PLUS_ISEQ_INT64 times_iseq_int64 GxB_TIMES_ISEQ_INT64 any_iseq_int64 GxB_ANY_ISEQ_INT64 min_iseq_uint8 GxB_MIN_ISEQ_UINT8 max_iseq_uint8 GxB_MAX_ISEQ_UINT8 plus_iseq_uint8 GxB_PLUS_ISEQ_UINT8 times_iseq_uint8 GxB_TIMES_ISEQ_UINT8 any_iseq_uint8 GxB_ANY_ISEQ_UINT8 min_iseq_uint16 GxB_MIN_ISEQ_UINT16 max_iseq_uint16 GxB_MAX_ISEQ_UINT16 plus_iseq_uint16 GxB_PLUS_ISEQ_UINT16 times_iseq_uint16 GxB_TIMES_ISEQ_UINT16 any_iseq_uint16 GxB_ANY_ISEQ_UINT16 min_iseq_uint32 GxB_MIN_ISEQ_UINT32 max_iseq_uint32 GxB_MAX_ISEQ_UINT32 plus_iseq_uint32 GxB_PLUS_ISEQ_UINT32 times_iseq_uint32 GxB_TIMES_ISEQ_UINT32 any_iseq_uint32 GxB_ANY_ISEQ_UINT32 min_iseq_uint64 GxB_MIN_ISEQ_UINT64 max_iseq_uint64 GxB_MAX_ISEQ_UINT64 plus_iseq_uint64 GxB_PLUS_ISEQ_UINT64 times_iseq_uint64 GxB_TIMES_ISEQ_UINT64 any_iseq_uint64 GxB_ANY_ISEQ_UINT64 min_iseq_fp32 GxB_MIN_ISEQ_FP32 max_iseq_fp32 GxB_MAX_ISEQ_FP32 plus_iseq_fp32 GxB_PLUS_ISEQ_FP32 times_iseq_fp32 GxB_TIMES_ISEQ_FP32 any_iseq_fp32 GxB_ANY_ISEQ_FP32 min_iseq_fp64 GxB_MIN_ISEQ_FP64 max_iseq_fp64 GxB_MAX_ISEQ_FP64 plus_iseq_fp64 GxB_PLUS_ISEQ_FP64 times_iseq_fp64 GxB_TIMES_ISEQ_FP64 any_iseq_fp64 GxB_ANY_ISEQ_FP64 min_isne_int8 GxB_MIN_ISNE_INT8 max_isne_int8 GxB_MAX_ISNE_INT8 plus_isne_int8 GxB_PLUS_ISNE_INT8 times_isne_int8 GxB_TIMES_ISNE_INT8 any_isne_int8 GxB_ANY_ISNE_INT8 min_isne_int16 GxB_MIN_ISNE_INT16 max_isne_int16 GxB_MAX_ISNE_INT16 plus_isne_int16 GxB_PLUS_ISNE_INT16 times_isne_int16 GxB_TIMES_ISNE_INT16 any_isne_int16 GxB_ANY_ISNE_INT16 min_isne_int32 GxB_MIN_ISNE_INT32 max_isne_int32 GxB_MAX_ISNE_INT32 plus_isne_int32 GxB_PLUS_ISNE_INT32 times_isne_int32 GxB_TIMES_ISNE_INT32 any_isne_int32 GxB_ANY_ISNE_INT32 min_isne_int64 GxB_MIN_ISNE_INT64 max_isne_int64 GxB_MAX_ISNE_INT64 plus_isne_int64 GxB_PLUS_ISNE_INT64 times_isne_int64 GxB_TIMES_ISNE_INT64 any_isne_int64 GxB_ANY_ISNE_INT64 min_isne_uint8 GxB_MIN_ISNE_UINT8 max_isne_uint8 GxB_MAX_ISNE_UINT8 plus_isne_uint8 GxB_PLUS_ISNE_UINT8 times_isne_uint8 GxB_TIMES_ISNE_UINT8 any_isne_uint8 GxB_ANY_ISNE_UINT8 min_isne_uint16 GxB_MIN_ISNE_UINT16 max_isne_uint16 GxB_MAX_ISNE_UINT16 plus_isne_uint16 GxB_PLUS_ISNE_UINT16 times_isne_uint16 GxB_TIMES_ISNE_UINT16 any_isne_uint16 GxB_ANY_ISNE_UINT16 min_isne_uint32 GxB_MIN_ISNE_UINT32 max_isne_uint32 GxB_MAX_ISNE_UINT32 plus_isne_uint32 GxB_PLUS_ISNE_UINT32 times_isne_uint32 GxB_TIMES_ISNE_UINT32 any_isne_uint32 GxB_ANY_ISNE_UINT32 min_isne_uint64 GxB_MIN_ISNE_UINT64 max_isne_uint64 GxB_MAX_ISNE_UINT64 plus_isne_uint64 GxB_PLUS_ISNE_UINT64 times_isne_uint64 GxB_TIMES_ISNE_UINT64 any_isne_uint64 GxB_ANY_ISNE_UINT64 min_isne_fp32 GxB_MIN_ISNE_FP32 max_isne_fp32 GxB_MAX_ISNE_FP32 plus_isne_fp32 GxB_PLUS_ISNE_FP32 times_isne_fp32 GxB_TIMES_ISNE_FP32 any_isne_fp32 GxB_ANY_ISNE_FP32 min_isne_fp64 GxB_MIN_ISNE_FP64 max_isne_fp64 GxB_MAX_ISNE_FP64 plus_isne_fp64 GxB_PLUS_ISNE_FP64 times_isne_fp64 GxB_TIMES_ISNE_FP64 any_isne_fp64 GxB_ANY_ISNE_FP64 min_isgt_int8 GxB_MIN_ISGT_INT8 max_isgt_int8 GxB_MAX_ISGT_INT8 plus_isgt_int8 GxB_PLUS_ISGT_INT8 times_isgt_int8 GxB_TIMES_ISGT_INT8 any_isgt_int8 GxB_ANY_ISGT_INT8 min_isgt_int16 GxB_MIN_ISGT_INT16 max_isgt_int16 GxB_MAX_ISGT_INT16 plus_isgt_int16 GxB_PLUS_ISGT_INT16 times_isgt_int16 GxB_TIMES_ISGT_INT16 any_isgt_int16 GxB_ANY_ISGT_INT16 min_isgt_int32 GxB_MIN_ISGT_INT32 max_isgt_int32 GxB_MAX_ISGT_INT32 plus_isgt_int32 GxB_PLUS_ISGT_INT32 times_isgt_int32 GxB_TIMES_ISGT_INT32 any_isgt_int32 GxB_ANY_ISGT_INT32 min_isgt_int64 GxB_MIN_ISGT_INT64 max_isgt_int64 GxB_MAX_ISGT_INT64 plus_isgt_int64 GxB_PLUS_ISGT_INT64 times_isgt_int64 GxB_TIMES_ISGT_INT64 any_isgt_int64 GxB_ANY_ISGT_INT64 min_isgt_uint8 GxB_MIN_ISGT_UINT8 max_isgt_uint8 GxB_MAX_ISGT_UINT8 plus_isgt_uint8 GxB_PLUS_ISGT_UINT8 times_isgt_uint8 GxB_TIMES_ISGT_UINT8 any_isgt_uint8 GxB_ANY_ISGT_UINT8 min_isgt_uint16 GxB_MIN_ISGT_UINT16 max_isgt_uint16 GxB_MAX_ISGT_UINT16 plus_isgt_uint16 GxB_PLUS_ISGT_UINT16 times_isgt_uint16 GxB_TIMES_ISGT_UINT16 any_isgt_uint16 GxB_ANY_ISGT_UINT16 min_isgt_uint32 GxB_MIN_ISGT_UINT32 max_isgt_uint32 GxB_MAX_ISGT_UINT32 plus_isgt_uint32 GxB_PLUS_ISGT_UINT32 times_isgt_uint32 GxB_TIMES_ISGT_UINT32 any_isgt_uint32 GxB_ANY_ISGT_UINT32 min_isgt_uint64 GxB_MIN_ISGT_UINT64 max_isgt_uint64 GxB_MAX_ISGT_UINT64 plus_isgt_uint64 GxB_PLUS_ISGT_UINT64 times_isgt_uint64 GxB_TIMES_ISGT_UINT64 any_isgt_uint64 GxB_ANY_ISGT_UINT64 min_isgt_fp32 GxB_MIN_ISGT_FP32 max_isgt_fp32 GxB_MAX_ISGT_FP32 plus_isgt_fp32 GxB_PLUS_ISGT_FP32 times_isgt_fp32 GxB_TIMES_ISGT_FP32 any_isgt_fp32 GxB_ANY_ISGT_FP32 min_isgt_fp64 GxB_MIN_ISGT_FP64 max_isgt_fp64 GxB_MAX_ISGT_FP64 plus_isgt_fp64 GxB_PLUS_ISGT_FP64 times_isgt_fp64 GxB_TIMES_ISGT_FP64 any_isgt_fp64 GxB_ANY_ISGT_FP64 min_islt_int8 GxB_MIN_ISLT_INT8 max_islt_int8 GxB_MAX_ISLT_INT8 plus_islt_int8 GxB_PLUS_ISLT_INT8 times_islt_int8 GxB_TIMES_ISLT_INT8 any_islt_int8 GxB_ANY_ISLT_INT8 min_islt_int16 GxB_MIN_ISLT_INT16 max_islt_int16 GxB_MAX_ISLT_INT16 plus_islt_int16 GxB_PLUS_ISLT_INT16 times_islt_int16 GxB_TIMES_ISLT_INT16 any_islt_int16 GxB_ANY_ISLT_INT16 min_islt_int32 GxB_MIN_ISLT_INT32 max_islt_int32 GxB_MAX_ISLT_INT32 plus_islt_int32 GxB_PLUS_ISLT_INT32 times_islt_int32 GxB_TIMES_ISLT_INT32 any_islt_int32 GxB_ANY_ISLT_INT32 min_islt_int64 GxB_MIN_ISLT_INT64 max_islt_int64 GxB_MAX_ISLT_INT64 plus_islt_int64 GxB_PLUS_ISLT_INT64 times_islt_int64 GxB_TIMES_ISLT_INT64 any_islt_int64 GxB_ANY_ISLT_INT64 min_islt_uint8 GxB_MIN_ISLT_UINT8 max_islt_uint8 GxB_MAX_ISLT_UINT8 plus_islt_uint8 GxB_PLUS_ISLT_UINT8 times_islt_uint8 GxB_TIMES_ISLT_UINT8 any_islt_uint8 GxB_ANY_ISLT_UINT8 min_islt_uint16 GxB_MIN_ISLT_UINT16 max_islt_uint16 GxB_MAX_ISLT_UINT16 plus_islt_uint16 GxB_PLUS_ISLT_UINT16 times_islt_uint16 GxB_TIMES_ISLT_UINT16 any_islt_uint16 GxB_ANY_ISLT_UINT16 min_islt_uint32 GxB_MIN_ISLT_UINT32 max_islt_uint32 GxB_MAX_ISLT_UINT32 plus_islt_uint32 GxB_PLUS_ISLT_UINT32 times_islt_uint32 GxB_TIMES_ISLT_UINT32 any_islt_uint32 GxB_ANY_ISLT_UINT32 min_islt_uint64 GxB_MIN_ISLT_UINT64 max_islt_uint64 GxB_MAX_ISLT_UINT64 plus_islt_uint64 GxB_PLUS_ISLT_UINT64 times_islt_uint64 GxB_TIMES_ISLT_UINT64 any_islt_uint64 GxB_ANY_ISLT_UINT64 min_islt_fp32 GxB_MIN_ISLT_FP32 max_islt_fp32 GxB_MAX_ISLT_FP32 plus_islt_fp32 GxB_PLUS_ISLT_FP32 times_islt_fp32 GxB_TIMES_ISLT_FP32 any_islt_fp32 GxB_ANY_ISLT_FP32 min_islt_fp64 GxB_MIN_ISLT_FP64 max_islt_fp64 GxB_MAX_ISLT_FP64 plus_islt_fp64 GxB_PLUS_ISLT_FP64 times_islt_fp64 GxB_TIMES_ISLT_FP64 any_islt_fp64 GxB_ANY_ISLT_FP64 min_isge_int8 GxB_MIN_ISGE_INT8 max_isge_int8 GxB_MAX_ISGE_INT8 plus_isge_int8 GxB_PLUS_ISGE_INT8 times_isge_int8 GxB_TIMES_ISGE_INT8 any_isge_int8 GxB_ANY_ISGE_INT8 min_isge_int16 GxB_MIN_ISGE_INT16 max_isge_int16 GxB_MAX_ISGE_INT16 plus_isge_int16 GxB_PLUS_ISGE_INT16 times_isge_int16 GxB_TIMES_ISGE_INT16 any_isge_int16 GxB_ANY_ISGE_INT16 min_isge_int32 GxB_MIN_ISGE_INT32 max_isge_int32 GxB_MAX_ISGE_INT32 plus_isge_int32 GxB_PLUS_ISGE_INT32 times_isge_int32 GxB_TIMES_ISGE_INT32 any_isge_int32 GxB_ANY_ISGE_INT32 min_isge_int64 GxB_MIN_ISGE_INT64 max_isge_int64 GxB_MAX_ISGE_INT64 plus_isge_int64 GxB_PLUS_ISGE_INT64 times_isge_int64 GxB_TIMES_ISGE_INT64 any_isge_int64 GxB_ANY_ISGE_INT64 min_isge_uint8 GxB_MIN_ISGE_UINT8 max_isge_uint8 GxB_MAX_ISGE_UINT8 plus_isge_uint8 GxB_PLUS_ISGE_UINT8 times_isge_uint8 GxB_TIMES_ISGE_UINT8 any_isge_uint8 GxB_ANY_ISGE_UINT8 min_isge_uint16 GxB_MIN_ISGE_UINT16 max_isge_uint16 GxB_MAX_ISGE_UINT16 plus_isge_uint16 GxB_PLUS_ISGE_UINT16 times_isge_uint16 GxB_TIMES_ISGE_UINT16 any_isge_uint16 GxB_ANY_ISGE_UINT16 min_isge_uint32 GxB_MIN_ISGE_UINT32 max_isge_uint32 GxB_MAX_ISGE_UINT32 plus_isge_uint32 GxB_PLUS_ISGE_UINT32 times_isge_uint32 GxB_TIMES_ISGE_UINT32 any_isge_uint32 GxB_ANY_ISGE_UINT32 min_isge_uint64 GxB_MIN_ISGE_UINT64 max_isge_uint64 GxB_MAX_ISGE_UINT64 plus_isge_uint64 GxB_PLUS_ISGE_UINT64 times_isge_uint64 GxB_TIMES_ISGE_UINT64 any_isge_uint64 GxB_ANY_ISGE_UINT64 min_isge_fp32 GxB_MIN_ISGE_FP32 max_isge_fp32 GxB_MAX_ISGE_FP32 plus_isge_fp32 GxB_PLUS_ISGE_FP32 times_isge_fp32 GxB_TIMES_ISGE_FP32 any_isge_fp32 GxB_ANY_ISGE_FP32 min_isge_fp64 GxB_MIN_ISGE_FP64 max_isge_fp64 GxB_MAX_ISGE_FP64 plus_isge_fp64 GxB_PLUS_ISGE_FP64 times_isge_fp64 GxB_TIMES_ISGE_FP64 any_isge_fp64 GxB_ANY_ISGE_FP64 min_isle_int8 GxB_MIN_ISLE_INT8 max_isle_int8 GxB_MAX_ISLE_INT8 plus_isle_int8 GxB_PLUS_ISLE_INT8 times_isle_int8 GxB_TIMES_ISLE_INT8 any_isle_int8 GxB_ANY_ISLE_INT8 min_isle_int16 GxB_MIN_ISLE_INT16 max_isle_int16 GxB_MAX_ISLE_INT16 plus_isle_int16 GxB_PLUS_ISLE_INT16 times_isle_int16 GxB_TIMES_ISLE_INT16 any_isle_int16 GxB_ANY_ISLE_INT16 min_isle_int32 GxB_MIN_ISLE_INT32 max_isle_int32 GxB_MAX_ISLE_INT32 plus_isle_int32 GxB_PLUS_ISLE_INT32 times_isle_int32 GxB_TIMES_ISLE_INT32 any_isle_int32 GxB_ANY_ISLE_INT32 min_isle_int64 GxB_MIN_ISLE_INT64 max_isle_int64 GxB_MAX_ISLE_INT64 plus_isle_int64 GxB_PLUS_ISLE_INT64 times_isle_int64 GxB_TIMES_ISLE_INT64 any_isle_int64 GxB_ANY_ISLE_INT64 min_isle_uint8 GxB_MIN_ISLE_UINT8 max_isle_uint8 GxB_MAX_ISLE_UINT8 plus_isle_uint8 GxB_PLUS_ISLE_UINT8 times_isle_uint8 GxB_TIMES_ISLE_UINT8 any_isle_uint8 GxB_ANY_ISLE_UINT8 min_isle_uint16 GxB_MIN_ISLE_UINT16 max_isle_uint16 GxB_MAX_ISLE_UINT16 plus_isle_uint16 GxB_PLUS_ISLE_UINT16 times_isle_uint16 GxB_TIMES_ISLE_UINT16 any_isle_uint16 GxB_ANY_ISLE_UINT16 min_isle_uint32 GxB_MIN_ISLE_UINT32 max_isle_uint32 GxB_MAX_ISLE_UINT32 plus_isle_uint32 GxB_PLUS_ISLE_UINT32 times_isle_uint32 GxB_TIMES_ISLE_UINT32 any_isle_uint32 GxB_ANY_ISLE_UINT32 min_isle_uint64 GxB_MIN_ISLE_UINT64 max_isle_uint64 GxB_MAX_ISLE_UINT64 plus_isle_uint64 GxB_PLUS_ISLE_UINT64 times_isle_uint64 GxB_TIMES_ISLE_UINT64 any_isle_uint64 GxB_ANY_ISLE_UINT64 min_isle_fp32 GxB_MIN_ISLE_FP32 max_isle_fp32 GxB_MAX_ISLE_FP32 plus_isle_fp32 GxB_PLUS_ISLE_FP32 times_isle_fp32 GxB_TIMES_ISLE_FP32 any_isle_fp32 GxB_ANY_ISLE_FP32 min_isle_fp64 GxB_MIN_ISLE_FP64 max_isle_fp64 GxB_MAX_ISLE_FP64 plus_isle_fp64 GxB_PLUS_ISLE_FP64 times_isle_fp64 GxB_TIMES_ISLE_FP64 any_isle_fp64 GxB_ANY_ISLE_FP64 min_lor_int8 GxB_MIN_LOR_INT8 max_lor_int8 GxB_MAX_LOR_INT8 plus_lor_int8 GxB_PLUS_LOR_INT8 times_lor_int8 GxB_TIMES_LOR_INT8 any_lor_int8 GxB_ANY_LOR_INT8 min_lor_int16 GxB_MIN_LOR_INT16 max_lor_int16 GxB_MAX_LOR_INT16 plus_lor_int16 GxB_PLUS_LOR_INT16 times_lor_int16 GxB_TIMES_LOR_INT16 any_lor_int16 GxB_ANY_LOR_INT16 min_lor_int32 GxB_MIN_LOR_INT32 max_lor_int32 GxB_MAX_LOR_INT32 plus_lor_int32 GxB_PLUS_LOR_INT32 times_lor_int32 GxB_TIMES_LOR_INT32 any_lor_int32 GxB_ANY_LOR_INT32 min_lor_int64 GxB_MIN_LOR_INT64 max_lor_int64 GxB_MAX_LOR_INT64 plus_lor_int64 GxB_PLUS_LOR_INT64 times_lor_int64 GxB_TIMES_LOR_INT64 any_lor_int64 GxB_ANY_LOR_INT64 min_lor_uint8 GxB_MIN_LOR_UINT8 max_lor_uint8 GxB_MAX_LOR_UINT8 plus_lor_uint8 GxB_PLUS_LOR_UINT8 times_lor_uint8 GxB_TIMES_LOR_UINT8 any_lor_uint8 GxB_ANY_LOR_UINT8 min_lor_uint16 GxB_MIN_LOR_UINT16 max_lor_uint16 GxB_MAX_LOR_UINT16 plus_lor_uint16 GxB_PLUS_LOR_UINT16 times_lor_uint16 GxB_TIMES_LOR_UINT16 any_lor_uint16 GxB_ANY_LOR_UINT16 min_lor_uint32 GxB_MIN_LOR_UINT32 max_lor_uint32 GxB_MAX_LOR_UINT32 plus_lor_uint32 GxB_PLUS_LOR_UINT32 times_lor_uint32 GxB_TIMES_LOR_UINT32 any_lor_uint32 GxB_ANY_LOR_UINT32 min_lor_uint64 GxB_MIN_LOR_UINT64 max_lor_uint64 GxB_MAX_LOR_UINT64 plus_lor_uint64 GxB_PLUS_LOR_UINT64 times_lor_uint64 GxB_TIMES_LOR_UINT64 any_lor_uint64 GxB_ANY_LOR_UINT64 min_lor_fp32 GxB_MIN_LOR_FP32 max_lor_fp32 GxB_MAX_LOR_FP32 plus_lor_fp32 GxB_PLUS_LOR_FP32 times_lor_fp32 GxB_TIMES_LOR_FP32 any_lor_fp32 GxB_ANY_LOR_FP32 min_lor_fp64 GxB_MIN_LOR_FP64 max_lor_fp64 GxB_MAX_LOR_FP64 plus_lor_fp64 GxB_PLUS_LOR_FP64 times_lor_fp64 GxB_TIMES_LOR_FP64 any_lor_fp64 GxB_ANY_LOR_FP64 min_land_int8 GxB_MIN_LAND_INT8 max_land_int8 GxB_MAX_LAND_INT8 plus_land_int8 GxB_PLUS_LAND_INT8 times_land_int8 GxB_TIMES_LAND_INT8 any_land_int8 GxB_ANY_LAND_INT8 min_land_int16 GxB_MIN_LAND_INT16 max_land_int16 GxB_MAX_LAND_INT16 plus_land_int16 GxB_PLUS_LAND_INT16 times_land_int16 GxB_TIMES_LAND_INT16 any_land_int16 GxB_ANY_LAND_INT16 min_land_int32 GxB_MIN_LAND_INT32 max_land_int32 GxB_MAX_LAND_INT32 plus_land_int32 GxB_PLUS_LAND_INT32 times_land_int32 GxB_TIMES_LAND_INT32 any_land_int32 GxB_ANY_LAND_INT32 min_land_int64 GxB_MIN_LAND_INT64 max_land_int64 GxB_MAX_LAND_INT64 plus_land_int64 GxB_PLUS_LAND_INT64 times_land_int64 GxB_TIMES_LAND_INT64 any_land_int64 GxB_ANY_LAND_INT64 min_land_uint8 GxB_MIN_LAND_UINT8 max_land_uint8 GxB_MAX_LAND_UINT8 plus_land_uint8 GxB_PLUS_LAND_UINT8 times_land_uint8 GxB_TIMES_LAND_UINT8 any_land_uint8 GxB_ANY_LAND_UINT8 min_land_uint16 GxB_MIN_LAND_UINT16 max_land_uint16 GxB_MAX_LAND_UINT16 plus_land_uint16 GxB_PLUS_LAND_UINT16 times_land_uint16 GxB_TIMES_LAND_UINT16 any_land_uint16 GxB_ANY_LAND_UINT16 min_land_uint32 GxB_MIN_LAND_UINT32 max_land_uint32 GxB_MAX_LAND_UINT32 plus_land_uint32 GxB_PLUS_LAND_UINT32 times_land_uint32 GxB_TIMES_LAND_UINT32 any_land_uint32 GxB_ANY_LAND_UINT32 min_land_uint64 GxB_MIN_LAND_UINT64 max_land_uint64 GxB_MAX_LAND_UINT64 plus_land_uint64 GxB_PLUS_LAND_UINT64 times_land_uint64 GxB_TIMES_LAND_UINT64 any_land_uint64 GxB_ANY_LAND_UINT64 min_land_fp32 GxB_MIN_LAND_FP32 max_land_fp32 GxB_MAX_LAND_FP32 plus_land_fp32 GxB_PLUS_LAND_FP32 times_land_fp32 GxB_TIMES_LAND_FP32 any_land_fp32 GxB_ANY_LAND_FP32 min_land_fp64 GxB_MIN_LAND_FP64 max_land_fp64 GxB_MAX_LAND_FP64 plus_land_fp64 GxB_PLUS_LAND_FP64 times_land_fp64 GxB_TIMES_LAND_FP64 any_land_fp64 GxB_ANY_LAND_FP64 min_lxor_int8 GxB_MIN_LXOR_INT8 max_lxor_int8 GxB_MAX_LXOR_INT8 plus_lxor_int8 GxB_PLUS_LXOR_INT8 times_lxor_int8 GxB_TIMES_LXOR_INT8 any_lxor_int8 GxB_ANY_LXOR_INT8 min_lxor_int16 GxB_MIN_LXOR_INT16 max_lxor_int16 GxB_MAX_LXOR_INT16 plus_lxor_int16 GxB_PLUS_LXOR_INT16 times_lxor_int16 GxB_TIMES_LXOR_INT16 any_lxor_int16 GxB_ANY_LXOR_INT16 min_lxor_int32 GxB_MIN_LXOR_INT32 max_lxor_int32 GxB_MAX_LXOR_INT32 plus_lxor_int32 GxB_PLUS_LXOR_INT32 times_lxor_int32 GxB_TIMES_LXOR_INT32 any_lxor_int32 GxB_ANY_LXOR_INT32 min_lxor_int64 GxB_MIN_LXOR_INT64 max_lxor_int64 GxB_MAX_LXOR_INT64 plus_lxor_int64 GxB_PLUS_LXOR_INT64 times_lxor_int64 GxB_TIMES_LXOR_INT64 any_lxor_int64 GxB_ANY_LXOR_INT64 min_lxor_uint8 GxB_MIN_LXOR_UINT8 max_lxor_uint8 GxB_MAX_LXOR_UINT8 plus_lxor_uint8 GxB_PLUS_LXOR_UINT8 times_lxor_uint8 GxB_TIMES_LXOR_UINT8 any_lxor_uint8 GxB_ANY_LXOR_UINT8 min_lxor_uint16 GxB_MIN_LXOR_UINT16 max_lxor_uint16 GxB_MAX_LXOR_UINT16 plus_lxor_uint16 GxB_PLUS_LXOR_UINT16 times_lxor_uint16 GxB_TIMES_LXOR_UINT16 any_lxor_uint16 GxB_ANY_LXOR_UINT16 min_lxor_uint32 GxB_MIN_LXOR_UINT32 max_lxor_uint32 GxB_MAX_LXOR_UINT32 plus_lxor_uint32 GxB_PLUS_LXOR_UINT32 times_lxor_uint32 GxB_TIMES_LXOR_UINT32 any_lxor_uint32 GxB_ANY_LXOR_UINT32 min_lxor_uint64 GxB_MIN_LXOR_UINT64 max_lxor_uint64 GxB_MAX_LXOR_UINT64 plus_lxor_uint64 GxB_PLUS_LXOR_UINT64 times_lxor_uint64 GxB_TIMES_LXOR_UINT64 any_lxor_uint64 GxB_ANY_LXOR_UINT64 min_lxor_fp32 GxB_MIN_LXOR_FP32 max_lxor_fp32 GxB_MAX_LXOR_FP32 plus_lxor_fp32 GxB_PLUS_LXOR_FP32 times_lxor_fp32 GxB_TIMES_LXOR_FP32 any_lxor_fp32 GxB_ANY_LXOR_FP32 min_lxor_fp64 GxB_MIN_LXOR_FP64 max_lxor_fp64 GxB_MAX_LXOR_FP64 plus_lxor_fp64 GxB_PLUS_LXOR_FP64 times_lxor_fp64 GxB_TIMES_LXOR_FP64 any_lxor_fp64 GxB_ANY_LXOR_FP64 lor_eq_int8 GxB_LOR_EQ_INT8 land_eq_int8 GxB_LAND_EQ_INT8 lxor_eq_int8 GxB_LXOR_EQ_INT8 eq_eq_int8 GxB_EQ_EQ_INT8 any_eq_int8 GxB_ANY_EQ_INT8 lor_eq_int16 GxB_LOR_EQ_INT16 land_eq_int16 GxB_LAND_EQ_INT16 lxor_eq_int16 GxB_LXOR_EQ_INT16 eq_eq_int16 GxB_EQ_EQ_INT16 any_eq_int16 GxB_ANY_EQ_INT16 lor_eq_int32 GxB_LOR_EQ_INT32 land_eq_int32 GxB_LAND_EQ_INT32 lxor_eq_int32 GxB_LXOR_EQ_INT32 eq_eq_int32 GxB_EQ_EQ_INT32 any_eq_int32 GxB_ANY_EQ_INT32 lor_eq_int64 GxB_LOR_EQ_INT64 land_eq_int64 GxB_LAND_EQ_INT64 lxor_eq_int64 GxB_LXOR_EQ_INT64 eq_eq_int64 GxB_EQ_EQ_INT64 any_eq_int64 GxB_ANY_EQ_INT64 lor_eq_uint8 GxB_LOR_EQ_UINT8 land_eq_uint8 GxB_LAND_EQ_UINT8 lxor_eq_uint8 GxB_LXOR_EQ_UINT8 eq_eq_uint8 GxB_EQ_EQ_UINT8 any_eq_uint8 GxB_ANY_EQ_UINT8 lor_eq_uint16 GxB_LOR_EQ_UINT16 land_eq_uint16 GxB_LAND_EQ_UINT16 lxor_eq_uint16 GxB_LXOR_EQ_UINT16 eq_eq_uint16 GxB_EQ_EQ_UINT16 any_eq_uint16 GxB_ANY_EQ_UINT16 lor_eq_uint32 GxB_LOR_EQ_UINT32 land_eq_uint32 GxB_LAND_EQ_UINT32 lxor_eq_uint32 GxB_LXOR_EQ_UINT32 eq_eq_uint32 GxB_EQ_EQ_UINT32 any_eq_uint32 GxB_ANY_EQ_UINT32 lor_eq_uint64 GxB_LOR_EQ_UINT64 land_eq_uint64 GxB_LAND_EQ_UINT64 lxor_eq_uint64 GxB_LXOR_EQ_UINT64 eq_eq_uint64 GxB_EQ_EQ_UINT64 any_eq_uint64 GxB_ANY_EQ_UINT64 lor_eq_fp32 GxB_LOR_EQ_FP32 land_eq_fp32 GxB_LAND_EQ_FP32 lxor_eq_fp32 GxB_LXOR_EQ_FP32 eq_eq_fp32 GxB_EQ_EQ_FP32 any_eq_fp32 GxB_ANY_EQ_FP32 lor_eq_fp64 GxB_LOR_EQ_FP64 land_eq_fp64 GxB_LAND_EQ_FP64 lxor_eq_fp64 GxB_LXOR_EQ_FP64 eq_eq_fp64 GxB_EQ_EQ_FP64 any_eq_fp64 GxB_ANY_EQ_FP64 lor_ne_int8 GxB_LOR_NE_INT8 land_ne_int8 GxB_LAND_NE_INT8 lxor_ne_int8 GxB_LXOR_NE_INT8 eq_ne_int8 GxB_EQ_NE_INT8 any_ne_int8 GxB_ANY_NE_INT8 lor_ne_int16 GxB_LOR_NE_INT16 land_ne_int16 GxB_LAND_NE_INT16 lxor_ne_int16 GxB_LXOR_NE_INT16 eq_ne_int16 GxB_EQ_NE_INT16 any_ne_int16 GxB_ANY_NE_INT16 lor_ne_int32 GxB_LOR_NE_INT32 land_ne_int32 GxB_LAND_NE_INT32 lxor_ne_int32 GxB_LXOR_NE_INT32 eq_ne_int32 GxB_EQ_NE_INT32 any_ne_int32 GxB_ANY_NE_INT32 lor_ne_int64 GxB_LOR_NE_INT64 land_ne_int64 GxB_LAND_NE_INT64 lxor_ne_int64 GxB_LXOR_NE_INT64 eq_ne_int64 GxB_EQ_NE_INT64 any_ne_int64 GxB_ANY_NE_INT64 lor_ne_uint8 GxB_LOR_NE_UINT8 land_ne_uint8 GxB_LAND_NE_UINT8 lxor_ne_uint8 GxB_LXOR_NE_UINT8 eq_ne_uint8 GxB_EQ_NE_UINT8 any_ne_uint8 GxB_ANY_NE_UINT8 lor_ne_uint16 GxB_LOR_NE_UINT16 land_ne_uint16 GxB_LAND_NE_UINT16 lxor_ne_uint16 GxB_LXOR_NE_UINT16 eq_ne_uint16 GxB_EQ_NE_UINT16 any_ne_uint16 GxB_ANY_NE_UINT16 lor_ne_uint32 GxB_LOR_NE_UINT32 land_ne_uint32 GxB_LAND_NE_UINT32 lxor_ne_uint32 GxB_LXOR_NE_UINT32 eq_ne_uint32 GxB_EQ_NE_UINT32 any_ne_uint32 GxB_ANY_NE_UINT32 lor_ne_uint64 GxB_LOR_NE_UINT64 land_ne_uint64 GxB_LAND_NE_UINT64 lxor_ne_uint64 GxB_LXOR_NE_UINT64 eq_ne_uint64 GxB_EQ_NE_UINT64 any_ne_uint64 GxB_ANY_NE_UINT64 lor_ne_fp32 GxB_LOR_NE_FP32 land_ne_fp32 GxB_LAND_NE_FP32 lxor_ne_fp32 GxB_LXOR_NE_FP32 eq_ne_fp32 GxB_EQ_NE_FP32 any_ne_fp32 GxB_ANY_NE_FP32 lor_ne_fp64 GxB_LOR_NE_FP64 land_ne_fp64 GxB_LAND_NE_FP64 lxor_ne_fp64 GxB_LXOR_NE_FP64 eq_ne_fp64 GxB_EQ_NE_FP64 any_ne_fp64 GxB_ANY_NE_FP64 lor_gt_int8 GxB_LOR_GT_INT8 land_gt_int8 GxB_LAND_GT_INT8 lxor_gt_int8 GxB_LXOR_GT_INT8 eq_gt_int8 GxB_EQ_GT_INT8 any_gt_int8 GxB_ANY_GT_INT8 lor_gt_int16 GxB_LOR_GT_INT16 land_gt_int16 GxB_LAND_GT_INT16 lxor_gt_int16 GxB_LXOR_GT_INT16 eq_gt_int16 GxB_EQ_GT_INT16 any_gt_int16 GxB_ANY_GT_INT16 lor_gt_int32 GxB_LOR_GT_INT32 land_gt_int32 GxB_LAND_GT_INT32 lxor_gt_int32 GxB_LXOR_GT_INT32 eq_gt_int32 GxB_EQ_GT_INT32 any_gt_int32 GxB_ANY_GT_INT32 lor_gt_int64 GxB_LOR_GT_INT64 land_gt_int64 GxB_LAND_GT_INT64 lxor_gt_int64 GxB_LXOR_GT_INT64 eq_gt_int64 GxB_EQ_GT_INT64 any_gt_int64 GxB_ANY_GT_INT64 lor_gt_uint8 GxB_LOR_GT_UINT8 land_gt_uint8 GxB_LAND_GT_UINT8 lxor_gt_uint8 GxB_LXOR_GT_UINT8 eq_gt_uint8 GxB_EQ_GT_UINT8 any_gt_uint8 GxB_ANY_GT_UINT8 lor_gt_uint16 GxB_LOR_GT_UINT16 land_gt_uint16 GxB_LAND_GT_UINT16 lxor_gt_uint16 GxB_LXOR_GT_UINT16 eq_gt_uint16 GxB_EQ_GT_UINT16 any_gt_uint16 GxB_ANY_GT_UINT16 lor_gt_uint32 GxB_LOR_GT_UINT32 land_gt_uint32 GxB_LAND_GT_UINT32 lxor_gt_uint32 GxB_LXOR_GT_UINT32 eq_gt_uint32 GxB_EQ_GT_UINT32 any_gt_uint32 GxB_ANY_GT_UINT32 lor_gt_uint64 GxB_LOR_GT_UINT64 land_gt_uint64 GxB_LAND_GT_UINT64 lxor_gt_uint64 GxB_LXOR_GT_UINT64 eq_gt_uint64 GxB_EQ_GT_UINT64 any_gt_uint64 GxB_ANY_GT_UINT64 lor_gt_fp32 GxB_LOR_GT_FP32 land_gt_fp32 GxB_LAND_GT_FP32 lxor_gt_fp32 GxB_LXOR_GT_FP32 eq_gt_fp32 GxB_EQ_GT_FP32 any_gt_fp32 GxB_ANY_GT_FP32 lor_gt_fp64 GxB_LOR_GT_FP64 land_gt_fp64 GxB_LAND_GT_FP64 lxor_gt_fp64 GxB_LXOR_GT_FP64 eq_gt_fp64 GxB_EQ_GT_FP64 any_gt_fp64 GxB_ANY_GT_FP64 lor_lt_int8 GxB_LOR_LT_INT8 land_lt_int8 GxB_LAND_LT_INT8 lxor_lt_int8 GxB_LXOR_LT_INT8 eq_lt_int8 GxB_EQ_LT_INT8 any_lt_int8 GxB_ANY_LT_INT8 lor_lt_int16 GxB_LOR_LT_INT16 land_lt_int16 GxB_LAND_LT_INT16 lxor_lt_int16 GxB_LXOR_LT_INT16 eq_lt_int16 GxB_EQ_LT_INT16 any_lt_int16 GxB_ANY_LT_INT16 lor_lt_int32 GxB_LOR_LT_INT32 land_lt_int32 GxB_LAND_LT_INT32 lxor_lt_int32 GxB_LXOR_LT_INT32 eq_lt_int32 GxB_EQ_LT_INT32 any_lt_int32 GxB_ANY_LT_INT32 lor_lt_int64 GxB_LOR_LT_INT64 land_lt_int64 GxB_LAND_LT_INT64 lxor_lt_int64 GxB_LXOR_LT_INT64 eq_lt_int64 GxB_EQ_LT_INT64 any_lt_int64 GxB_ANY_LT_INT64 lor_lt_uint8 GxB_LOR_LT_UINT8 land_lt_uint8 GxB_LAND_LT_UINT8 lxor_lt_uint8 GxB_LXOR_LT_UINT8 eq_lt_uint8 GxB_EQ_LT_UINT8 any_lt_uint8 GxB_ANY_LT_UINT8 lor_lt_uint16 GxB_LOR_LT_UINT16 land_lt_uint16 GxB_LAND_LT_UINT16 lxor_lt_uint16 GxB_LXOR_LT_UINT16 eq_lt_uint16 GxB_EQ_LT_UINT16 any_lt_uint16 GxB_ANY_LT_UINT16 lor_lt_uint32 GxB_LOR_LT_UINT32 land_lt_uint32 GxB_LAND_LT_UINT32 lxor_lt_uint32 GxB_LXOR_LT_UINT32 eq_lt_uint32 GxB_EQ_LT_UINT32 any_lt_uint32 GxB_ANY_LT_UINT32 lor_lt_uint64 GxB_LOR_LT_UINT64 land_lt_uint64 GxB_LAND_LT_UINT64 lxor_lt_uint64 GxB_LXOR_LT_UINT64 eq_lt_uint64 GxB_EQ_LT_UINT64 any_lt_uint64 GxB_ANY_LT_UINT64 lor_lt_fp32 GxB_LOR_LT_FP32 land_lt_fp32 GxB_LAND_LT_FP32 lxor_lt_fp32 GxB_LXOR_LT_FP32 eq_lt_fp32 GxB_EQ_LT_FP32 any_lt_fp32 GxB_ANY_LT_FP32 lor_lt_fp64 GxB_LOR_LT_FP64 land_lt_fp64 GxB_LAND_LT_FP64 lxor_lt_fp64 GxB_LXOR_LT_FP64 eq_lt_fp64 GxB_EQ_LT_FP64 any_lt_fp64 GxB_ANY_LT_FP64 lor_ge_int8 GxB_LOR_GE_INT8 land_ge_int8 GxB_LAND_GE_INT8 lxor_ge_int8 GxB_LXOR_GE_INT8 eq_ge_int8 GxB_EQ_GE_INT8 any_ge_int8 GxB_ANY_GE_INT8 lor_ge_int16 GxB_LOR_GE_INT16 land_ge_int16 GxB_LAND_GE_INT16 lxor_ge_int16 GxB_LXOR_GE_INT16 eq_ge_int16 GxB_EQ_GE_INT16 any_ge_int16 GxB_ANY_GE_INT16 lor_ge_int32 GxB_LOR_GE_INT32 land_ge_int32 GxB_LAND_GE_INT32 lxor_ge_int32 GxB_LXOR_GE_INT32 eq_ge_int32 GxB_EQ_GE_INT32 any_ge_int32 GxB_ANY_GE_INT32 lor_ge_int64 GxB_LOR_GE_INT64 land_ge_int64 GxB_LAND_GE_INT64 lxor_ge_int64 GxB_LXOR_GE_INT64 eq_ge_int64 GxB_EQ_GE_INT64 any_ge_int64 GxB_ANY_GE_INT64 lor_ge_uint8 GxB_LOR_GE_UINT8 land_ge_uint8 GxB_LAND_GE_UINT8 lxor_ge_uint8 GxB_LXOR_GE_UINT8 eq_ge_uint8 GxB_EQ_GE_UINT8 any_ge_uint8 GxB_ANY_GE_UINT8 lor_ge_uint16 GxB_LOR_GE_UINT16 land_ge_uint16 GxB_LAND_GE_UINT16 lxor_ge_uint16 GxB_LXOR_GE_UINT16 eq_ge_uint16 GxB_EQ_GE_UINT16 any_ge_uint16 GxB_ANY_GE_UINT16 lor_ge_uint32 GxB_LOR_GE_UINT32 land_ge_uint32 GxB_LAND_GE_UINT32 lxor_ge_uint32 GxB_LXOR_GE_UINT32 eq_ge_uint32 GxB_EQ_GE_UINT32 any_ge_uint32 GxB_ANY_GE_UINT32 lor_ge_uint64 GxB_LOR_GE_UINT64 land_ge_uint64 GxB_LAND_GE_UINT64 lxor_ge_uint64 GxB_LXOR_GE_UINT64 eq_ge_uint64 GxB_EQ_GE_UINT64 any_ge_uint64 GxB_ANY_GE_UINT64 lor_ge_fp32 GxB_LOR_GE_FP32 land_ge_fp32 GxB_LAND_GE_FP32 lxor_ge_fp32 GxB_LXOR_GE_FP32 eq_ge_fp32 GxB_EQ_GE_FP32 any_ge_fp32 GxB_ANY_GE_FP32 lor_ge_fp64 GxB_LOR_GE_FP64 land_ge_fp64 GxB_LAND_GE_FP64 lxor_ge_fp64 GxB_LXOR_GE_FP64 eq_ge_fp64 GxB_EQ_GE_FP64 any_ge_fp64 GxB_ANY_GE_FP64 lor_le_int8 GxB_LOR_LE_INT8 land_le_int8 GxB_LAND_LE_INT8 lxor_le_int8 GxB_LXOR_LE_INT8 eq_le_int8 GxB_EQ_LE_INT8 any_le_int8 GxB_ANY_LE_INT8 lor_le_int16 GxB_LOR_LE_INT16 land_le_int16 GxB_LAND_LE_INT16 lxor_le_int16 GxB_LXOR_LE_INT16 eq_le_int16 GxB_EQ_LE_INT16 any_le_int16 GxB_ANY_LE_INT16 lor_le_int32 GxB_LOR_LE_INT32 land_le_int32 GxB_LAND_LE_INT32 lxor_le_int32 GxB_LXOR_LE_INT32 eq_le_int32 GxB_EQ_LE_INT32 any_le_int32 GxB_ANY_LE_INT32 lor_le_int64 GxB_LOR_LE_INT64 land_le_int64 GxB_LAND_LE_INT64 lxor_le_int64 GxB_LXOR_LE_INT64 eq_le_int64 GxB_EQ_LE_INT64 any_le_int64 GxB_ANY_LE_INT64 lor_le_uint8 GxB_LOR_LE_UINT8 land_le_uint8 GxB_LAND_LE_UINT8 lxor_le_uint8 GxB_LXOR_LE_UINT8 eq_le_uint8 GxB_EQ_LE_UINT8 any_le_uint8 GxB_ANY_LE_UINT8 lor_le_uint16 GxB_LOR_LE_UINT16 land_le_uint16 GxB_LAND_LE_UINT16 lxor_le_uint16 GxB_LXOR_LE_UINT16 eq_le_uint16 GxB_EQ_LE_UINT16 any_le_uint16 GxB_ANY_LE_UINT16 lor_le_uint32 GxB_LOR_LE_UINT32 land_le_uint32 GxB_LAND_LE_UINT32 lxor_le_uint32 GxB_LXOR_LE_UINT32 eq_le_uint32 GxB_EQ_LE_UINT32 any_le_uint32 GxB_ANY_LE_UINT32 lor_le_uint64 GxB_LOR_LE_UINT64 land_le_uint64 GxB_LAND_LE_UINT64 lxor_le_uint64 GxB_LXOR_LE_UINT64 eq_le_uint64 GxB_EQ_LE_UINT64 any_le_uint64 GxB_ANY_LE_UINT64 lor_le_fp32 GxB_LOR_LE_FP32 land_le_fp32 GxB_LAND_LE_FP32 lxor_le_fp32 GxB_LXOR_LE_FP32 eq_le_fp32 GxB_EQ_LE_FP32 any_le_fp32 GxB_ANY_LE_FP32 lor_le_fp64 GxB_LOR_LE_FP64 land_le_fp64 GxB_LAND_LE_FP64 lxor_le_fp64 GxB_LXOR_LE_FP64 eq_le_fp64 GxB_EQ_LE_FP64 any_le_fp64 GxB_ANY_LE_FP64 lor_first_bool GxB_LOR_FIRST_BOOL land_first_bool GxB_LAND_FIRST_BOOL lxor_first_bool GxB_LXOR_FIRST_BOOL eq_first_bool GxB_EQ_FIRST_BOOL any_first_bool GxB_ANY_FIRST_BOOL lor_second_bool GxB_LOR_SECOND_BOOL land_second_bool GxB_LAND_SECOND_BOOL lxor_second_bool GxB_LXOR_SECOND_BOOL eq_second_bool GxB_EQ_SECOND_BOOL any_second_bool GxB_ANY_SECOND_BOOL lor_pair_bool GxB_LOR_PAIR_BOOL land_pair_bool GxB_LAND_PAIR_BOOL lxor_pair_bool GxB_LXOR_PAIR_BOOL eq_pair_bool GxB_EQ_PAIR_BOOL any_pair_bool GxB_ANY_PAIR_BOOL lor_lor_bool GxB_LOR_LOR_BOOL land_lor_bool GxB_LAND_LOR_BOOL lxor_lor_bool GxB_LXOR_LOR_BOOL eq_lor_bool GxB_EQ_LOR_BOOL any_lor_bool GxB_ANY_LOR_BOOL lor_land_bool GxB_LOR_LAND_BOOL land_land_bool GxB_LAND_LAND_BOOL lxor_land_bool GxB_LXOR_LAND_BOOL eq_land_bool GxB_EQ_LAND_BOOL any_land_bool GxB_ANY_LAND_BOOL lor_lxor_bool GxB_LOR_LXOR_BOOL land_lxor_bool GxB_LAND_LXOR_BOOL lxor_lxor_bool GxB_LXOR_LXOR_BOOL eq_lxor_bool GxB_EQ_LXOR_BOOL any_lxor_bool GxB_ANY_LXOR_BOOL lor_eq_bool GxB_LOR_EQ_BOOL land_eq_bool GxB_LAND_EQ_BOOL lxor_eq_bool GxB_LXOR_EQ_BOOL eq_eq_bool GxB_EQ_EQ_BOOL any_eq_bool GxB_ANY_EQ_BOOL lor_gt_bool GxB_LOR_GT_BOOL land_gt_bool GxB_LAND_GT_BOOL lxor_gt_bool GxB_LXOR_GT_BOOL eq_gt_bool GxB_EQ_GT_BOOL any_gt_bool GxB_ANY_GT_BOOL lor_lt_bool GxB_LOR_LT_BOOL land_lt_bool GxB_LAND_LT_BOOL lxor_lt_bool GxB_LXOR_LT_BOOL eq_lt_bool GxB_EQ_LT_BOOL any_lt_bool GxB_ANY_LT_BOOL lor_ge_bool GxB_LOR_GE_BOOL land_ge_bool GxB_LAND_GE_BOOL lxor_ge_bool GxB_LXOR_GE_BOOL eq_ge_bool GxB_EQ_GE_BOOL any_ge_bool GxB_ANY_GE_BOOL lor_le_bool GxB_LOR_LE_BOOL land_le_bool GxB_LAND_LE_BOOL lxor_le_bool GxB_LXOR_LE_BOOL eq_le_bool GxB_EQ_LE_BOOL any_le_bool GxB_ANY_LE_BOOL plus_first_fc32 GxB_PLUS_FIRST_FC32 times_first_fc32 GxB_TIMES_FIRST_FC32 any_first_fc32 GxB_ANY_FIRST_FC32 plus_first_fc64 GxB_PLUS_FIRST_FC64 times_first_fc64 GxB_TIMES_FIRST_FC64 any_first_fc64 GxB_ANY_FIRST_FC64 plus_second_fc32 GxB_PLUS_SECOND_FC32 times_second_fc32 GxB_TIMES_SECOND_FC32 any_second_fc32 GxB_ANY_SECOND_FC32 plus_second_fc64 GxB_PLUS_SECOND_FC64 times_second_fc64 GxB_TIMES_SECOND_FC64 any_second_fc64 GxB_ANY_SECOND_FC64 plus_pair_fc32 GxB_PLUS_PAIR_FC32 times_pair_fc32 GxB_TIMES_PAIR_FC32 any_pair_fc32 GxB_ANY_PAIR_FC32 plus_pair_fc64 GxB_PLUS_PAIR_FC64 times_pair_fc64 GxB_TIMES_PAIR_FC64 any_pair_fc64 GxB_ANY_PAIR_FC64 plus_plus_fc32 GxB_PLUS_PLUS_FC32 times_plus_fc32 GxB_TIMES_PLUS_FC32 any_plus_fc32 GxB_ANY_PLUS_FC32 plus_plus_fc64 GxB_PLUS_PLUS_FC64 times_plus_fc64 GxB_TIMES_PLUS_FC64 any_plus_fc64 GxB_ANY_PLUS_FC64 plus_minus_fc32 GxB_PLUS_MINUS_FC32 times_minus_fc32 GxB_TIMES_MINUS_FC32 any_minus_fc32 GxB_ANY_MINUS_FC32 plus_minus_fc64 GxB_PLUS_MINUS_FC64 times_minus_fc64 GxB_TIMES_MINUS_FC64 any_minus_fc64 GxB_ANY_MINUS_FC64 plus_times_fc32 GxB_PLUS_TIMES_FC32 times_times_fc32 GxB_TIMES_TIMES_FC32 any_times_fc32 GxB_ANY_TIMES_FC32 plus_times_fc64 GxB_PLUS_TIMES_FC64 times_times_fc64 GxB_TIMES_TIMES_FC64 any_times_fc64 GxB_ANY_TIMES_FC64 plus_div_fc32 GxB_PLUS_DIV_FC32 times_div_fc32 GxB_TIMES_DIV_FC32 any_div_fc32 GxB_ANY_DIV_FC32 plus_div_fc64 GxB_PLUS_DIV_FC64 times_div_fc64 GxB_TIMES_DIV_FC64 any_div_fc64 GxB_ANY_DIV_FC64 plus_rdiv_fc32 GxB_PLUS_RDIV_FC32 times_rdiv_fc32 GxB_TIMES_RDIV_FC32 any_rdiv_fc32 GxB_ANY_RDIV_FC32 plus_rdiv_fc64 GxB_PLUS_RDIV_FC64 times_rdiv_fc64 GxB_TIMES_RDIV_FC64 any_rdiv_fc64 GxB_ANY_RDIV_FC64 plus_rminus_fc32 GxB_PLUS_RMINUS_FC32 times_rminus_fc32 GxB_TIMES_RMINUS_FC32 any_rminus_fc32 GxB_ANY_RMINUS_FC32 plus_rminus_fc64 GxB_PLUS_RMINUS_FC64 times_rminus_fc64 GxB_TIMES_RMINUS_FC64 any_rminus_fc64 GxB_ANY_RMINUS_FC64 bor_bor_uint8 GxB_BOR_BOR_UINT8 bor_bor_uint16 GxB_BOR_BOR_UINT16 bor_bor_uint32 GxB_BOR_BOR_UINT32 bor_bor_uint64 GxB_BOR_BOR_UINT64 bor_band_uint8 GxB_BOR_BAND_UINT8 bor_band_uint16 GxB_BOR_BAND_UINT16 bor_band_uint32 GxB_BOR_BAND_UINT32 bor_band_uint64 GxB_BOR_BAND_UINT64 bor_bxor_uint8 GxB_BOR_BXOR_UINT8 bor_bxor_uint16 GxB_BOR_BXOR_UINT16 bor_bxor_uint32 GxB_BOR_BXOR_UINT32 bor_bxor_uint64 GxB_BOR_BXOR_UINT64 bor_bxnor_uint8 GxB_BOR_BXNOR_UINT8 bor_bxnor_uint16 GxB_BOR_BXNOR_UINT16 bor_bxnor_uint32 GxB_BOR_BXNOR_UINT32 bor_bxnor_uint64 GxB_BOR_BXNOR_UINT64 band_bor_uint8 GxB_BAND_BOR_UINT8 band_bor_uint16 GxB_BAND_BOR_UINT16 band_bor_uint32 GxB_BAND_BOR_UINT32 band_bor_uint64 GxB_BAND_BOR_UINT64 band_band_uint8 GxB_BAND_BAND_UINT8 band_band_uint16 GxB_BAND_BAND_UINT16 band_band_uint32 GxB_BAND_BAND_UINT32 band_band_uint64 GxB_BAND_BAND_UINT64 band_bxor_uint8 GxB_BAND_BXOR_UINT8 band_bxor_uint16 GxB_BAND_BXOR_UINT16 band_bxor_uint32 GxB_BAND_BXOR_UINT32 band_bxor_uint64 GxB_BAND_BXOR_UINT64 band_bxnor_uint8 GxB_BAND_BXNOR_UINT8 band_bxnor_uint16 GxB_BAND_BXNOR_UINT16 band_bxnor_uint32 GxB_BAND_BXNOR_UINT32 band_bxnor_uint64 GxB_BAND_BXNOR_UINT64 bxor_bor_uint8 GxB_BXOR_BOR_UINT8 bxor_bor_uint16 GxB_BXOR_BOR_UINT16 bxor_bor_uint32 GxB_BXOR_BOR_UINT32 bxor_bor_uint64 GxB_BXOR_BOR_UINT64 bxor_band_uint8 GxB_BXOR_BAND_UINT8 bxor_band_uint16 GxB_BXOR_BAND_UINT16 bxor_band_uint32 GxB_BXOR_BAND_UINT32 bxor_band_uint64 GxB_BXOR_BAND_UINT64 bxor_bxor_uint8 GxB_BXOR_BXOR_UINT8 bxor_bxor_uint16 GxB_BXOR_BXOR_UINT16 bxor_bxor_uint32 GxB_BXOR_BXOR_UINT32 bxor_bxor_uint64 GxB_BXOR_BXOR_UINT64 bxor_bxnor_uint8 GxB_BXOR_BXNOR_UINT8 bxor_bxnor_uint16 GxB_BXOR_BXNOR_UINT16 bxor_bxnor_uint32 GxB_BXOR_BXNOR_UINT32 bxor_bxnor_uint64 GxB_BXOR_BXNOR_UINT64 bxnor_bor_uint8 GxB_BXNOR_BOR_UINT8 bxnor_bor_uint16 GxB_BXNOR_BOR_UINT16 bxnor_bor_uint32 GxB_BXNOR_BOR_UINT32 bxnor_bor_uint64 GxB_BXNOR_BOR_UINT64 bxnor_band_uint8 GxB_BXNOR_BAND_UINT8 bxnor_band_uint16 GxB_BXNOR_BAND_UINT16 bxnor_band_uint32 GxB_BXNOR_BAND_UINT32 bxnor_band_uint64 GxB_BXNOR_BAND_UINT64 bxnor_bxor_uint8 GxB_BXNOR_BXOR_UINT8 bxnor_bxor_uint16 GxB_BXNOR_BXOR_UINT16 bxnor_bxor_uint32 GxB_BXNOR_BXOR_UINT32 bxnor_bxor_uint64 GxB_BXNOR_BXOR_UINT64 bxnor_bxnor_uint8 GxB_BXNOR_BXNOR_UINT8 bxnor_bxnor_uint16 GxB_BXNOR_BXNOR_UINT16 bxnor_bxnor_uint32 GxB_BXNOR_BXNOR_UINT32 bxnor_bxnor_uint64 GxB_BXNOR_BXNOR_UINT64 min_firsti_int32 GxB_MIN_FIRSTI_INT32 min_firsti_int64 GxB_MIN_FIRSTI_INT64 max_firsti_int32 GxB_MAX_FIRSTI_INT32 max_firsti_int64 GxB_MAX_FIRSTI_INT64 any_firsti_int32 GxB_ANY_FIRSTI_INT32 any_firsti_int64 GxB_ANY_FIRSTI_INT64 plus_firsti_int32 GxB_PLUS_FIRSTI_INT32 plus_firsti_int64 GxB_PLUS_FIRSTI_INT64 times_firsti_int32 GxB_TIMES_FIRSTI_INT32 times_firsti_int64 GxB_TIMES_FIRSTI_INT64 min_firsti1_int32 GxB_MIN_FIRSTI1_INT32 min_firsti1_int64 GxB_MIN_FIRSTI1_INT64 max_firsti1_int32 GxB_MAX_FIRSTI1_INT32 max_firsti1_int64 GxB_MAX_FIRSTI1_INT64 any_firsti1_int32 GxB_ANY_FIRSTI1_INT32 any_firsti1_int64 GxB_ANY_FIRSTI1_INT64 plus_firsti1_int32 GxB_PLUS_FIRSTI1_INT32 plus_firsti1_int64 GxB_PLUS_FIRSTI1_INT64 times_firsti1_int32 GxB_TIMES_FIRSTI1_INT32 times_firsti1_int64 GxB_TIMES_FIRSTI1_INT64 min_firstj_int32 GxB_MIN_FIRSTJ_INT32 min_firstj_int64 GxB_MIN_FIRSTJ_INT64 max_firstj_int32 GxB_MAX_FIRSTJ_INT32 max_firstj_int64 GxB_MAX_FIRSTJ_INT64 any_firstj_int32 GxB_ANY_FIRSTJ_INT32 any_firstj_int64 GxB_ANY_FIRSTJ_INT64 plus_firstj_int32 GxB_PLUS_FIRSTJ_INT32 plus_firstj_int64 GxB_PLUS_FIRSTJ_INT64 times_firstj_int32 GxB_TIMES_FIRSTJ_INT32 times_firstj_int64 GxB_TIMES_FIRSTJ_INT64 min_firstj1_int32 GxB_MIN_FIRSTJ1_INT32 min_firstj1_int64 GxB_MIN_FIRSTJ1_INT64 max_firstj1_int32 GxB_MAX_FIRSTJ1_INT32 max_firstj1_int64 GxB_MAX_FIRSTJ1_INT64 any_firstj1_int32 GxB_ANY_FIRSTJ1_INT32 any_firstj1_int64 GxB_ANY_FIRSTJ1_INT64 plus_firstj1_int32 GxB_PLUS_FIRSTJ1_INT32 plus_firstj1_int64 GxB_PLUS_FIRSTJ1_INT64 times_firstj1_int32 GxB_TIMES_FIRSTJ1_INT32 times_firstj1_int64 GxB_TIMES_FIRSTJ1_INT64 min_secondi_int32 GxB_MIN_SECONDI_INT32 min_secondi_int64 GxB_MIN_SECONDI_INT64 max_secondi_int32 GxB_MAX_SECONDI_INT32 max_secondi_int64 GxB_MAX_SECONDI_INT64 any_secondi_int32 GxB_ANY_SECONDI_INT32 any_secondi_int64 GxB_ANY_SECONDI_INT64 plus_secondi_int32 GxB_PLUS_SECONDI_INT32 plus_secondi_int64 GxB_PLUS_SECONDI_INT64 times_secondi_int32 GxB_TIMES_SECONDI_INT32 times_secondi_int64 GxB_TIMES_SECONDI_INT64 min_secondi1_int32 GxB_MIN_SECONDI1_INT32 min_secondi1_int64 GxB_MIN_SECONDI1_INT64 max_secondi1_int32 GxB_MAX_SECONDI1_INT32 max_secondi1_int64 GxB_MAX_SECONDI1_INT64 any_secondi1_int32 GxB_ANY_SECONDI1_INT32 any_secondi1_int64 GxB_ANY_SECONDI1_INT64 plus_secondi1_int32 GxB_PLUS_SECONDI1_INT32 plus_secondi1_int64 GxB_PLUS_SECONDI1_INT64 times_secondi1_int32 GxB_TIMES_SECONDI1_INT32 times_secondi1_int64 GxB_TIMES_SECONDI1_INT64 min_secondj_int32 GxB_MIN_SECONDJ_INT32 min_secondj_int64 GxB_MIN_SECONDJ_INT64 max_secondj_int32 GxB_MAX_SECONDJ_INT32 max_secondj_int64 GxB_MAX_SECONDJ_INT64 any_secondj_int32 GxB_ANY_SECONDJ_INT32 any_secondj_int64 GxB_ANY_SECONDJ_INT64 plus_secondj_int32 GxB_PLUS_SECONDJ_INT32 plus_secondj_int64 GxB_PLUS_SECONDJ_INT64 times_secondj_int32 GxB_TIMES_SECONDJ_INT32 times_secondj_int64 GxB_TIMES_SECONDJ_INT64 min_secondj1_int32 GxB_MIN_SECONDJ1_INT32 min_secondj1_int64 GxB_MIN_SECONDJ1_INT64 max_secondj1_int32 GxB_MAX_SECONDJ1_INT32 max_secondj1_int64 GxB_MAX_SECONDJ1_INT64 any_secondj1_int32 GxB_ANY_SECONDJ1_INT32 any_secondj1_int64 GxB_ANY_SECONDJ1_INT64 plus_secondj1_int32 GxB_PLUS_SECONDJ1_INT32 plus_secondj1_int64 GxB_PLUS_SECONDJ1_INT64 times_secondj1_int32 GxB_TIMES_SECONDJ1_INT32 times_secondj1_int64 GxB_TIMES_SECONDJ1_INT64 plus_times_semiring_int8 GrB_PLUS_TIMES_SEMIRING_INT8 plus_times_semiring_int16 GrB_PLUS_TIMES_SEMIRING_INT16 plus_times_semiring_int32 GrB_PLUS_TIMES_SEMIRING_INT32 plus_times_semiring_int64 GrB_PLUS_TIMES_SEMIRING_INT64 plus_times_semiring_uint8 GrB_PLUS_TIMES_SEMIRING_UINT8 plus_times_semiring_uint16 GrB_PLUS_TIMES_SEMIRING_UINT16 plus_times_semiring_uint32 GrB_PLUS_TIMES_SEMIRING_UINT32 plus_times_semiring_uint64 GrB_PLUS_TIMES_SEMIRING_UINT64 plus_times_semiring_fp32 GrB_PLUS_TIMES_SEMIRING_FP32 plus_times_semiring_fp64 GrB_PLUS_TIMES_SEMIRING_FP64 plus_min_semiring_int8 GrB_PLUS_MIN_SEMIRING_INT8 plus_min_semiring_int16 GrB_PLUS_MIN_SEMIRING_INT16 plus_min_semiring_int32 GrB_PLUS_MIN_SEMIRING_INT32 plus_min_semiring_int64 GrB_PLUS_MIN_SEMIRING_INT64 plus_min_semiring_uint8 GrB_PLUS_MIN_SEMIRING_UINT8 plus_min_semiring_uint16 GrB_PLUS_MIN_SEMIRING_UINT16 plus_min_semiring_uint32 GrB_PLUS_MIN_SEMIRING_UINT32 plus_min_semiring_uint64 GrB_PLUS_MIN_SEMIRING_UINT64 plus_min_semiring_fp32 GrB_PLUS_MIN_SEMIRING_FP32 plus_min_semiring_fp64 GrB_PLUS_MIN_SEMIRING_FP64 min_plus_semiring_int8 GrB_MIN_PLUS_SEMIRING_INT8 min_plus_semiring_int16 GrB_MIN_PLUS_SEMIRING_INT16 min_plus_semiring_int32 GrB_MIN_PLUS_SEMIRING_INT32 min_plus_semiring_int64 GrB_MIN_PLUS_SEMIRING_INT64 min_plus_semiring_uint8 GrB_MIN_PLUS_SEMIRING_UINT8 min_plus_semiring_uint16 GrB_MIN_PLUS_SEMIRING_UINT16 min_plus_semiring_uint32 GrB_MIN_PLUS_SEMIRING_UINT32 min_plus_semiring_uint64 GrB_MIN_PLUS_SEMIRING_UINT64 min_plus_semiring_fp32 GrB_MIN_PLUS_SEMIRING_FP32 min_plus_semiring_fp64 GrB_MIN_PLUS_SEMIRING_FP64 min_times_semiring_int8 GrB_MIN_TIMES_SEMIRING_INT8 min_times_semiring_int16 GrB_MIN_TIMES_SEMIRING_INT16 min_times_semiring_int32 GrB_MIN_TIMES_SEMIRING_INT32 min_times_semiring_int64 GrB_MIN_TIMES_SEMIRING_INT64 min_times_semiring_uint8 GrB_MIN_TIMES_SEMIRING_UINT8 min_times_semiring_uint16 GrB_MIN_TIMES_SEMIRING_UINT16 min_times_semiring_uint32 GrB_MIN_TIMES_SEMIRING_UINT32 min_times_semiring_uint64 GrB_MIN_TIMES_SEMIRING_UINT64 min_times_semiring_fp32 GrB_MIN_TIMES_SEMIRING_FP32 min_times_semiring_fp64 GrB_MIN_TIMES_SEMIRING_FP64 min_first_semiring_int8 GrB_MIN_FIRST_SEMIRING_INT8 min_first_semiring_int16 GrB_MIN_FIRST_SEMIRING_INT16 min_first_semiring_int32 GrB_MIN_FIRST_SEMIRING_INT32 min_first_semiring_int64 GrB_MIN_FIRST_SEMIRING_INT64 min_first_semiring_uint8 GrB_MIN_FIRST_SEMIRING_UINT8 min_first_semiring_uint16 GrB_MIN_FIRST_SEMIRING_UINT16 min_first_semiring_uint32 GrB_MIN_FIRST_SEMIRING_UINT32 min_first_semiring_uint64 GrB_MIN_FIRST_SEMIRING_UINT64 min_first_semiring_fp32 GrB_MIN_FIRST_SEMIRING_FP32 min_first_semiring_fp64 GrB_MIN_FIRST_SEMIRING_FP64 min_second_semiring_int8 GrB_MIN_SECOND_SEMIRING_INT8 min_second_semiring_int16 GrB_MIN_SECOND_SEMIRING_INT16 min_second_semiring_int32 GrB_MIN_SECOND_SEMIRING_INT32 min_second_semiring_int64 GrB_MIN_SECOND_SEMIRING_INT64 min_second_semiring_uint8 GrB_MIN_SECOND_SEMIRING_UINT8 min_second_semiring_uint16 GrB_MIN_SECOND_SEMIRING_UINT16 min_second_semiring_uint32 GrB_MIN_SECOND_SEMIRING_UINT32 min_second_semiring_uint64 GrB_MIN_SECOND_SEMIRING_UINT64 min_second_semiring_fp32 GrB_MIN_SECOND_SEMIRING_FP32 min_second_semiring_fp64 GrB_MIN_SECOND_SEMIRING_FP64 min_max_semiring_int8 GrB_MIN_MAX_SEMIRING_INT8 min_max_semiring_int16 GrB_MIN_MAX_SEMIRING_INT16 min_max_semiring_int32 GrB_MIN_MAX_SEMIRING_INT32 min_max_semiring_int64 GrB_MIN_MAX_SEMIRING_INT64 min_max_semiring_uint8 GrB_MIN_MAX_SEMIRING_UINT8 min_max_semiring_uint16 GrB_MIN_MAX_SEMIRING_UINT16 min_max_semiring_uint32 GrB_MIN_MAX_SEMIRING_UINT32 min_max_semiring_uint64 GrB_MIN_MAX_SEMIRING_UINT64 min_max_semiring_fp32 GrB_MIN_MAX_SEMIRING_FP32 min_max_semiring_fp64 GrB_MIN_MAX_SEMIRING_FP64 max_plus_semiring_int8 GrB_MAX_PLUS_SEMIRING_INT8 max_plus_semiring_int16 GrB_MAX_PLUS_SEMIRING_INT16 max_plus_semiring_int32 GrB_MAX_PLUS_SEMIRING_INT32 max_plus_semiring_int64 GrB_MAX_PLUS_SEMIRING_INT64 max_plus_semiring_uint8 GrB_MAX_PLUS_SEMIRING_UINT8 max_plus_semiring_uint16 GrB_MAX_PLUS_SEMIRING_UINT16 max_plus_semiring_uint32 GrB_MAX_PLUS_SEMIRING_UINT32 max_plus_semiring_uint64 GrB_MAX_PLUS_SEMIRING_UINT64 max_plus_semiring_fp32 GrB_MAX_PLUS_SEMIRING_FP32 max_plus_semiring_fp64 GrB_MAX_PLUS_SEMIRING_FP64 max_times_semiring_int8 GrB_MAX_TIMES_SEMIRING_INT8 max_times_semiring_int16 GrB_MAX_TIMES_SEMIRING_INT16 max_times_semiring_int32 GrB_MAX_TIMES_SEMIRING_INT32 max_times_semiring_int64 GrB_MAX_TIMES_SEMIRING_INT64 max_times_semiring_uint8 GrB_MAX_TIMES_SEMIRING_UINT8 max_times_semiring_uint16 GrB_MAX_TIMES_SEMIRING_UINT16 max_times_semiring_uint32 GrB_MAX_TIMES_SEMIRING_UINT32 max_times_semiring_uint64 GrB_MAX_TIMES_SEMIRING_UINT64 max_times_semiring_fp32 GrB_MAX_TIMES_SEMIRING_FP32 max_times_semiring_fp64 GrB_MAX_TIMES_SEMIRING_FP64 max_first_semiring_int8 GrB_MAX_FIRST_SEMIRING_INT8 max_first_semiring_int16 GrB_MAX_FIRST_SEMIRING_INT16 max_first_semiring_int32 GrB_MAX_FIRST_SEMIRING_INT32 max_first_semiring_int64 GrB_MAX_FIRST_SEMIRING_INT64 max_first_semiring_uint8 GrB_MAX_FIRST_SEMIRING_UINT8 max_first_semiring_uint16 GrB_MAX_FIRST_SEMIRING_UINT16 max_first_semiring_uint32 GrB_MAX_FIRST_SEMIRING_UINT32 max_first_semiring_uint64 GrB_MAX_FIRST_SEMIRING_UINT64 max_first_semiring_fp32 GrB_MAX_FIRST_SEMIRING_FP32 max_first_semiring_fp64 GrB_MAX_FIRST_SEMIRING_FP64 max_second_semiring_int8 GrB_MAX_SECOND_SEMIRING_INT8 max_second_semiring_int16 GrB_MAX_SECOND_SEMIRING_INT16 max_second_semiring_int32 GrB_MAX_SECOND_SEMIRING_INT32 max_second_semiring_int64 GrB_MAX_SECOND_SEMIRING_INT64 max_second_semiring_uint8 GrB_MAX_SECOND_SEMIRING_UINT8 max_second_semiring_uint16 GrB_MAX_SECOND_SEMIRING_UINT16 max_second_semiring_uint32 GrB_MAX_SECOND_SEMIRING_UINT32 max_second_semiring_uint64 GrB_MAX_SECOND_SEMIRING_UINT64 max_second_semiring_fp32 GrB_MAX_SECOND_SEMIRING_FP32 max_second_semiring_fp64 GrB_MAX_SECOND_SEMIRING_FP64 max_min_semiring_int8 GrB_MAX_MIN_SEMIRING_INT8 max_min_semiring_int16 GrB_MAX_MIN_SEMIRING_INT16 max_min_semiring_int32 GrB_MAX_MIN_SEMIRING_INT32 max_min_semiring_int64 GrB_MAX_MIN_SEMIRING_INT64 max_min_semiring_uint8 GrB_MAX_MIN_SEMIRING_UINT8 max_min_semiring_uint16 GrB_MAX_MIN_SEMIRING_UINT16 max_min_semiring_uint32 GrB_MAX_MIN_SEMIRING_UINT32 max_min_semiring_uint64 GrB_MAX_MIN_SEMIRING_UINT64 max_min_semiring_fp32 GrB_MAX_MIN_SEMIRING_FP32 max_min_semiring_fp64 GrB_MAX_MIN_SEMIRING_FP64 lor_land_semiring_bool GrB_LOR_LAND_SEMIRING_BOOL land_lor_semiring_bool GrB_LAND_LOR_SEMIRING_BOOL lxor_land_semiring_bool GrB_LXOR_LAND_SEMIRING_BOOL lxnor_lor_semiring_bool GrB_LXNOR_LOR_SEMIRING_BOOL"},{"location":"test_type_header/","title":"Types","text":"<p><pre><code>create extension if not exists onesparse;\n</code></pre> OneSparse exposes SuiteSparse:GraphBLAS objects as native Postgres types.  These types are: <pre><code>                                                 List of data types\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Schema   \u2502     Name     \u2502                                      Description                                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 onesparse \u2502 binaryop     \u2502 BinaryOps apply a function to two elements and returning an element.                  \u2502\n\u2502 onesparse \u2502 descriptor   \u2502 Descriptors control specific details of GraphBLAS operations.                         \u2502\n\u2502 onesparse \u2502 indexunaryop \u2502 IndexUnaryOps apply a function to a positional element, returning an element.         \u2502\n\u2502 onesparse \u2502 matrix       \u2502 Matrices hold sparse rows and columns of elements.                                    \u2502\n\u2502 onesparse \u2502 monoid       \u2502 Monoids apply a BinaryOp and an identity value to two elements, returning an element. \u2502\n\u2502 onesparse \u2502 scalar       \u2502 Scalars hold individual element values.                                               \u2502\n\u2502 onesparse \u2502 semiring     \u2502 Semirings associate additive and multiplicative operators for matrix multiplication.  \u2502\n\u2502 onesparse \u2502 type         \u2502 Types define the structure and behavior of elements.                                  \u2502\n\u2502 onesparse \u2502 unaryop      \u2502 UnaryOps apply a function to an element, returning an element.                        \u2502\n\u2502 onesparse \u2502 vector       \u2502 Vectors hold a sparse array of elements.                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(10 rows)\n</code></pre></p>"},{"location":"test_type_header/#element-types","title":"Element Types","text":"<p>The GraphBLAS has both core types and user defined types that define the value and structure of matrix elements.  Currently onesparse maps these Postgres types to GraphBLAS types. SuiteSparse provides a wider variety of numeric types than Postgres (unsigned ints, complex, user defined).</p> Postgres Type Name SuiteSparse Type Name smallint int16 integer int32 bigint int64 float fp32 double precision fp64 bool bool <p>Types can stored in tables in the database, they can be created by casting the SuiteSparse type name to the <code>type</code> type: <pre><code>select 'int32'::type;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 type  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Matrix, Vector and Scalar constructors take a type argument.  The name is implicity cast to type in this case.  The two examples: <pre><code>select matrix('int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 matrix \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect matrix('int32'::type);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 matrix \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Are equivalent.</p> OneSparse Name SuiteSparse Name bool GrB_BOOL int8 GrB_INT8 int16 GrB_INT16 int32 GrB_INT32 int64 GrB_INT64 uint8 GrB_UINT8 uint16 GrB_UINT16 uint32 GrB_UINT32 uint64 GrB_UINT64 fp32 GrB_FP32 fp64 GrB_FP64 fc32 GxB_FC32 fc64 GxB_FC64"},{"location":"test_unaryop_header/","title":"UnaryOp","text":"<p>UnaryOps apply a function to an element, returning an element.</p> OneSparse Name SuiteSparse Name identity_bool GrB_IDENTITY_BOOL ainv_bool GrB_AINV_BOOL minv_bool GrB_MINV_BOOL lnot_bool GxB_LNOT_BOOL identity_int8 GrB_IDENTITY_INT8 ainv_int8 GrB_AINV_INT8 minv_int8 GrB_MINV_INT8 lnot_int8 GxB_LNOT_INT8 identity_int16 GrB_IDENTITY_INT16 ainv_int16 GrB_AINV_INT16 minv_int16 GrB_MINV_INT16 lnot_int16 GxB_LNOT_INT16 identity_int32 GrB_IDENTITY_INT32 ainv_int32 GrB_AINV_INT32 minv_int32 GrB_MINV_INT32 lnot_int32 GxB_LNOT_INT32 identity_int64 GrB_IDENTITY_INT64 ainv_int64 GrB_AINV_INT64 minv_int64 GrB_MINV_INT64 lnot_int64 GxB_LNOT_INT64 identity_uint8 GrB_IDENTITY_UINT8 ainv_uint8 GrB_AINV_UINT8 minv_uint8 GrB_MINV_UINT8 lnot_uint8 GxB_LNOT_UINT8 identity_uint16 GrB_IDENTITY_UINT16 ainv_uint16 GrB_AINV_UINT16 minv_uint16 GrB_MINV_UINT16 lnot_uint16 GxB_LNOT_UINT16 identity_uint32 GrB_IDENTITY_UINT32 ainv_uint32 GrB_AINV_UINT32 minv_uint32 GrB_MINV_UINT32 lnot_uint32 GxB_LNOT_UINT32 identity_uint64 GrB_IDENTITY_UINT64 ainv_uint64 GrB_AINV_UINT64 minv_uint64 GrB_MINV_UINT64 lnot_uint64 GxB_LNOT_UINT64 identity_fp32 GrB_IDENTITY_FP32 ainv_fp32 GrB_AINV_FP32 minv_fp32 GrB_MINV_FP32 lnot_fp32 GxB_LNOT_FP32 identity_fp64 GrB_IDENTITY_FP64 ainv_fp64 GrB_AINV_FP64 minv_fp64 GrB_MINV_FP64 lnot_fp64 GxB_LNOT_FP64 identity_fc32 GxB_IDENTITY_FC32 ainv_fc32 GxB_AINV_FC32 minv_fc32 GxB_MINV_FC32 identity_fc64 GxB_IDENTITY_FC64 ainv_fc64 GxB_AINV_FC64 minv_fc64 GxB_MINV_FC64 one_bool GxB_ONE_BOOL abs_bool GrB_ABS_BOOL one_int8 GxB_ONE_INT8 abs_int8 GrB_ABS_INT8 bnot_int8 GrB_BNOT_INT8 one_int16 GxB_ONE_INT16 abs_int16 GrB_ABS_INT16 bnot_int16 GrB_BNOT_INT16 one_int32 GxB_ONE_INT32 abs_int32 GrB_ABS_INT32 bnot_int32 GrB_BNOT_INT32 one_int64 GxB_ONE_INT64 abs_int64 GrB_ABS_INT64 bnot_int64 GrB_BNOT_INT64 one_uint8 GxB_ONE_UINT8 abs_uint8 GrB_ABS_UINT8 bnot_uint8 GrB_BNOT_UINT8 one_uint16 GxB_ONE_UINT16 abs_uint16 GrB_ABS_UINT16 bnot_uint16 GrB_BNOT_UINT16 one_uint32 GxB_ONE_UINT32 abs_uint32 GrB_ABS_UINT32 bnot_uint32 GrB_BNOT_UINT32 one_uint64 GxB_ONE_UINT64 abs_uint64 GrB_ABS_UINT64 bnot_uint64 GrB_BNOT_UINT64 one_fp32 GxB_ONE_FP32 abs_fp32 GrB_ABS_FP32 one_fp64 GxB_ONE_FP64 abs_fp64 GrB_ABS_FP64 one_fc32 GxB_ONE_FC32 one_fc64 GxB_ONE_FC64 lnot GrB_LNOT abs_bool GxB_ABS_BOOL abs_int8 GxB_ABS_INT8 abs_int16 GxB_ABS_INT16 abs_int32 GxB_ABS_INT32 abs_int64 GxB_ABS_INT64 abs_uint8 GxB_ABS_UINT8 abs_uint16 GxB_ABS_UINT16 abs_uint32 GxB_ABS_UINT32 abs_uint64 GxB_ABS_UINT64 abs_fp32 GxB_ABS_FP32 abs_fp64 GxB_ABS_FP64 sqrt_fp32 GxB_SQRT_FP32 log_fp32 GxB_LOG_FP32 exp_fp32 GxB_EXP_FP32 log2_fp32 GxB_LOG2_FP32 sqrt_fp64 GxB_SQRT_FP64 log_fp64 GxB_LOG_FP64 exp_fp64 GxB_EXP_FP64 log2_fp64 GxB_LOG2_FP64 sqrt_fc32 GxB_SQRT_FC32 log_fc32 GxB_LOG_FC32 exp_fc32 GxB_EXP_FC32 log2_fc32 GxB_LOG2_FC32 sqrt_fc64 GxB_SQRT_FC64 log_fc64 GxB_LOG_FC64 exp_fc64 GxB_EXP_FC64 log2_fc64 GxB_LOG2_FC64 sin_fp32 GxB_SIN_FP32 cos_fp32 GxB_COS_FP32 tan_fp32 GxB_TAN_FP32 sin_fp64 GxB_SIN_FP64 cos_fp64 GxB_COS_FP64 tan_fp64 GxB_TAN_FP64 sin_fc32 GxB_SIN_FC32 cos_fc32 GxB_COS_FC32 tan_fc32 GxB_TAN_FC32 sin_fc64 GxB_SIN_FC64 cos_fc64 GxB_COS_FC64 tan_fc64 GxB_TAN_FC64 acos_fp32 GxB_ACOS_FP32 asin_fp32 GxB_ASIN_FP32 atan_fp32 GxB_ATAN_FP32 acos_fp64 GxB_ACOS_FP64 asin_fp64 GxB_ASIN_FP64 atan_fp64 GxB_ATAN_FP64 acos_fc32 GxB_ACOS_FC32 asin_fc32 GxB_ASIN_FC32 atan_fc32 GxB_ATAN_FC32 acos_fc64 GxB_ACOS_FC64 asin_fc64 GxB_ASIN_FC64 atan_fc64 GxB_ATAN_FC64 sinh_fp32 GxB_SINH_FP32 cosh_fp32 GxB_COSH_FP32 tanh_fp32 GxB_TANH_FP32 sinh_fp64 GxB_SINH_FP64 cosh_fp64 GxB_COSH_FP64 tanh_fp64 GxB_TANH_FP64 sinh_fc32 GxB_SINH_FC32 cosh_fc32 GxB_COSH_FC32 tanh_fc32 GxB_TANH_FC32 sinh_fc64 GxB_SINH_FC64 cosh_fc64 GxB_COSH_FC64 tanh_fc64 GxB_TANH_FC64 acosh_fp32 GxB_ACOSH_FP32 asinh_fp32 GxB_ASINH_FP32 atanh_fp32 GxB_ATANH_FP32 signum_fp32 GxB_SIGNUM_FP32 acosh_fp64 GxB_ACOSH_FP64 asinh_fp64 GxB_ASINH_FP64 atanh_fp64 GxB_ATANH_FP64 signum_fp64 GxB_SIGNUM_FP64 acosh_fc32 GxB_ACOSH_FC32 asinh_fc32 GxB_ASINH_FC32 atanh_fc32 GxB_ATANH_FC32 signum_fc32 GxB_SIGNUM_FC32 acosh_fc64 GxB_ACOSH_FC64 asinh_fc64 GxB_ASINH_FC64 atanh_fc64 GxB_ATANH_FC64 signum_fc64 GxB_SIGNUM_FC64 ceil_fp32 GxB_CEIL_FP32 floor_fp32 GxB_FLOOR_FP32 round_fp32 GxB_ROUND_FP32 trunc_fp32 GxB_TRUNC_FP32 ceil_fp64 GxB_CEIL_FP64 floor_fp64 GxB_FLOOR_FP64 round_fp64 GxB_ROUND_FP64 trunc_fp64 GxB_TRUNC_FP64 ceil_fc32 GxB_CEIL_FC32 floor_fc32 GxB_FLOOR_FC32 round_fc32 GxB_ROUND_FC32 trunc_fc32 GxB_TRUNC_FC32 ceil_fc64 GxB_CEIL_FC64 floor_fc64 GxB_FLOOR_FC64 round_fc64 GxB_ROUND_FC64 trunc_fc64 GxB_TRUNC_FC64 exp2_fp32 GxB_EXP2_FP32 expm1_fp32 GxB_EXPM1_FP32 log10_fp32 GxB_LOG10_FP32 log1p_fp32 GxB_LOG1P_FP32 exp2_fp64 GxB_EXP2_FP64 expm1_fp64 GxB_EXPM1_FP64 log10_fp64 GxB_LOG10_FP64 log1p_fp64 GxB_LOG1P_FP64 exp2_fc32 GxB_EXP2_FC32 expm1_fc32 GxB_EXPM1_FC32 log10_fc32 GxB_LOG10_FC32 log1p_fc32 GxB_LOG1P_FC32 exp2_fc64 GxB_EXP2_FC64 expm1_fc64 GxB_EXPM1_FC64 log10_fc64 GxB_LOG10_FC64 log1p_fc64 GxB_LOG1P_FC64 lgamma_fp32 GxB_LGAMMA_FP32 tgamma_fp32 GxB_TGAMMA_FP32 erf_fp32 GxB_ERF_FP32 erfc_fp32 GxB_ERFC_FP32 lgamma_fp64 GxB_LGAMMA_FP64 tgamma_fp64 GxB_TGAMMA_FP64 erf_fp64 GxB_ERF_FP64 erfc_fp64 GxB_ERFC_FP64 cbrt_fp32 GxB_CBRT_FP32 cbrt_fp64 GxB_CBRT_FP64 frexpx_fp32 GxB_FREXPX_FP32 frexpe_fp32 GxB_FREXPE_FP32 frexpx_fp64 GxB_FREXPX_FP64 frexpe_fp64 GxB_FREXPE_FP64 conj_fc32 GxB_CONJ_FC32 conj_fc64 GxB_CONJ_FC64 creal_fc32 GxB_CREAL_FC32 cimag_fc32 GxB_CIMAG_FC32 carg_fc32 GxB_CARG_FC32 abs_fc32 GxB_ABS_FC32 creal_fc64 GxB_CREAL_FC64 cimag_fc64 GxB_CIMAG_FC64 carg_fc64 GxB_CARG_FC64 abs_fc64 GxB_ABS_FC64 isinf_fp32 GxB_ISINF_FP32 isinf_fp64 GxB_ISINF_FP64 isinf_fc32 GxB_ISINF_FC32 isinf_fc64 GxB_ISINF_FC64 isnan_fp32 GxB_ISNAN_FP32 isnan_fp64 GxB_ISNAN_FP64 isnan_fc32 GxB_ISNAN_FC32 isnan_fc64 GxB_ISNAN_FC64 isfinite_fp32 GxB_ISFINITE_FP32 isfinite_fp64 GxB_ISFINITE_FP64 isfinite_fc32 GxB_ISFINITE_FC32 isfinite_fc64 GxB_ISFINITE_FC64 positioni_int32 GxB_POSITIONI_INT32 positioni_int64 GxB_POSITIONI_INT64 positioni1_int32 GxB_POSITIONI1_INT32 positioni1_int64 GxB_POSITIONI1_INT64 positionj_int32 GxB_POSITIONJ_INT32 positionj_int64 GxB_POSITIONJ_INT64 positionj1_int32 GxB_POSITIONJ1_INT32 positionj1_int64 GxB_POSITIONJ1_INT64"},{"location":"test_vector_header/","title":"Vector","text":"<p>This documentation is also tests for the code, the examples below show the literal output of these statements from Postgres.</p> <p>Some setup to make sure warnings are shown, and that the extension is installed. <pre><code>set client_min_messages = 'WARNING';\ncreate extension if not exists onesparse;\n</code></pre> An empty vector can be constructed many ways, but one of the simplest is casting a type code to the matrix type.  In this case <code>int32</code> means GrB_INT32.  The type codes are intentionally compressed to be as short as possible for smaller pg_dumps.</p> <p>Much of these functions are basically vector versions of the same functions for matrix.  See those docs for details: <pre><code>select 'int32'::vector;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 vector \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect vector('int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 vector \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect size('int32'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        size         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect 'int32[]'::vector;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 vector \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32[]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect size('int32[]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        size         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1152921504606846976 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect 'int32(10)'::vector;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  vector   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(10) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32(10)'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect size('int32(10)'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 size \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect 'int32(10)[]'::vector;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  vector   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(10) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32(10)[]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect size('int32(10)[]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 size \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect 'int32[0:1 1:2 2:3]'::vector;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       vector       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[0:1 1:2 2:3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect nvals('int32[0:1 1:2 2:3]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nvals \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect * from elements('int32[0:1 1:2 2:3]'::vector);\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 i \u2502    v    \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0 \u2502 int32:1 \u2502\n\u2502 1 \u2502 int32:2 \u2502\n\u2502 2 \u2502 int32:3 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(3 rows)\n\nselect 'int32(10)[0:1 1:2 2:3]'::vector;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         vector         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32(10)[0:1 1:2 2:3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect size('int32(10)[0:1 1:2 2:3]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 size \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect size('int32(2)[0:1 1:2 2:3]'::vector);\nERROR:  INVALID_INDEX GraphBLAS error: GrB_INVALID_INDEX\nfunction: GrB_Vector_setElement_INT64 (w, x, row)\nRow index 2 out of range; must be &lt; 2: Error setting Vector Element\nLINE 1: select size('int32(2)[0:1 1:2 2:3]'::vector);\n                    ^\n</code></pre></p>"},{"location":"test_vector_header/#equality","title":"Equality","text":"<p>Two matrices can be compared for equality with the '=' and '!=' operators: <pre><code>select u != v as \"u != v\", u = v as \"u = v\", v = u as \"v = u\", v = u as \"v = u\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 u != v \u2502 u = v \u2502 v = u \u2502 v = u \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 t      \u2502 f     \u2502 f     \u2502 f     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect eadd('int32[0:1 1:2 2:3]'::vector, 'int32[0:1 1:2 2:3]'::vector, 'plus_int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        eadd        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[0:2 1:4 2:6] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Eadd can also be accomplished with binary operators specific to OneSparse.  Different binaryops are passed to eadd to do different elementwise operations: <pre><code>select print(u |+ v) as \"u |+ v\", print(u |- v) as \"u |- v\", print(u |* v) as \"u |* v\", print(u |/ v) as \"u |/ v\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  u |+ v   \u2502  u |- v   \u2502  u |* v   \u2502  u |/ v   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502           \u2502           \u2502           \u2502\n\u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502       \u2502  0\u2502       \u2502  0\u2502       \u2502  0\u2502       \u2502\n\u2502  1\u2502  5    \u2502  1\u2502 -1    \u2502  1\u2502  6    \u2502  1\u2502  0    \u2502\n\u2502  2\u2502  3    \u2502  2\u2502  3    \u2502  2\u2502  3    \u2502  2\u2502  3    \u2502\n\u2502  3\u2502       \u2502  3\u2502       \u2502  3\u2502       \u2502  3\u2502       \u2502\n\u2502           \u2502           \u2502           \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect emult('int32[0:1 1:2 2:3]'::vector, 'int32[0:1 1:2 2:3]'::vector, 'times_int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       emult        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[0:1 1:4 2:9] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Emult can also be accomplished with binary operators specific to OneSparse.  Different binaryops are passed to emult to do different elementwise operations: <pre><code>select print(u &amp;+ v) as \"u &amp;+ v\", print(u &amp;- v) as \"u &amp;- v\", print(u &amp;* v) as \"u &amp;* v\", print(u &amp;/ v) as \"u &amp;/ v\" from test_fixture;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  u &amp;+ v   \u2502  u &amp;- v   \u2502  u &amp;* v   \u2502  u &amp;/ v   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502           \u2502           \u2502           \u2502\n\u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502       \u2502  0\u2502       \u2502  0\u2502       \u2502  0\u2502       \u2502\n\u2502  1\u2502  5    \u2502  1\u2502 -1    \u2502  1\u2502  6    \u2502  1\u2502  0    \u2502\n\u2502  2\u2502       \u2502  2\u2502       \u2502  2\u2502       \u2502  2\u2502       \u2502\n\u2502  3\u2502       \u2502  3\u2502       \u2502  3\u2502       \u2502  3\u2502       \u2502\n\u2502           \u2502           \u2502           \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect eunion('int32[0:1 1:2 2:3]'::vector, 42, 'int32[0:1 1:2 2:3]'::vector, 84, 'plus_int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       eunion       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[0:2 1:4 2:6] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect reduce_scalar('int32[0:1 1:2 2:3]'::vector, 'plus_monoid_int32');\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 reduce_scalar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32:6       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect choose('int32[0:1 1:2 2:3]'::vector, 'valuegt_int32', 1);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     choose     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[1:2 2:3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect apply('int32[1:1 2:2 3:3]'::vector, 'ainv_int32'::unaryop);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         apply         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[1:-1 2:-2 3:-3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Elements can be set individually with <code>set_element</code>, the modified input is returned: <pre><code>select set_element('int32[1:1 2:2 3:3]'::vector, 4, 4);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      set_element       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[1:1 2:2 3:3 4:4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre> Scalar elements can be extracted individually with <code>get_element</code> <pre><code>select get_element('int32[1:1 2:2 3:3]'::vector, 3);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 get_element \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32:3     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect print('int32(4)[1:1 2:2 3:3]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   print   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502\n\u2502    \u2500\u2500\u2500    \u2502\n\u2502  0\u2502       \u2502\n\u2502  1\u2502  1    \u2502\n\u2502  2\u2502  2    \u2502\n\u2502  3\u2502  3    \u2502\n\u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect wait('int32[0:1 1:2 2:3]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 wait \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect dup('int32[0:1 1:2 2:3]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        dup         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32[0:1 1:2 2:3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n\nselect clear('int32[0:1 1:2 2:3]'::vector);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 clear \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 int32 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(1 row)\n</code></pre></p>"}]}